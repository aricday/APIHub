{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useMemo, useEffect } from 'react';\nimport { CRUD_GET_LIST, useTranslate, useGetList, useVersion } from 'ra-core';\nimport { Labeled } from 'react-admin';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { parse, stringify } from 'query-string';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport get from 'lodash/get';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconAdd from '@material-ui/icons/Add';\nimport { useApiHubPreference, readApiHubPreference } from '../../preferences';\nimport { DocumentationTree, DocumentView, DocumentCreate, DocumentEdit } from './';\nimport { documentHasChildren } from './DocumentationTree';\nimport { createNewDocument } from './DocumentCreate';\nimport { getAllDocumentParents } from './getAllDocumentParents';\nimport { defaultLocale, documentationLocales, LocaleSwitcherMenu, supportedLocales } from '../../i18n';\nimport { addNewDocument, removeNewDocument, getNewDocument, addExpandedNodes } from './documentationReducer';\nimport { useExpandedNodes } from './documentationTreeHooks';\nconst entityType = 'api';\nconst entityTypeUuid = 'f0ee916c-9cb9-4e96-9d0e-268f74a2c2d3';\n\nfunction useQuery() {\n  const location = useLocation();\n  return parse(location.search);\n}\n\nfunction useDocumentationHistory(items, entityUuid, locale) {\n  const history = useHistory();\n  const query = useQuery();\n  const dispatch = useDispatch();\n  const selectedDocumentNavtitle = get(query, 'uri', null);\n  const mode = get(query, 'mode', 'view');\n  const selectedDocument = items.find(documentation => documentation.navtitle === selectedDocumentNavtitle);\n  const selectedDocumentId = selectedDocument ? selectedDocument.id : null;\n  useEffect(() => {\n    const parents = getAllDocumentParents(selectedDocument, items).map(({\n      id\n    }) => id);\n\n    if (parents.length > 0) {\n      dispatch(addExpandedNodes(entityUuid, locale, parents));\n    }\n  }, [dispatch, items, locale, selectedDocument, entityUuid]);\n\n  const openDocumentPage = (document = null, mode = 'view', state = null) => {\n    return history.push(Object.assign({\n      pathname: history.location.pathname,\n      search: stringify(Object.assign(Object.assign({}, document && {\n        uri: document.navtitle\n      }), {\n        mode\n      }))\n    }, state != null && {\n      state\n    }));\n  };\n\n  const openNewDocumentPage = state => {\n    return openDocumentPage(null, 'add', state);\n  };\n\n  const closeDocumentPage = () => {\n    return history.push({\n      pathname: history.location.pathname\n    });\n  };\n\n  return {\n    mode,\n    selectedDocument,\n    selectedDocumentId,\n    openDocumentPage,\n    openNewDocumentPage,\n    closeDocumentPage\n  };\n}\n\nconst DocumentationContent = ({\n  entityUuid,\n  items,\n  locale,\n  onLocaleChange,\n  userCanEdit = false,\n  userCanDelete = false\n}) => {\n  const translate = useTranslate();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const _useExpandedNodes = useExpandedNodes(entityUuid, locale),\n        _useExpandedNodes2 = _slicedToArray(_useExpandedNodes, 2),\n        expanded = _useExpandedNodes2[0],\n        setExpanded = _useExpandedNodes2[1];\n\n  const _useDocumentationHist = useDocumentationHistory(items, entityUuid, locale),\n        mode = _useDocumentationHist.mode,\n        selectedDocument = _useDocumentationHist.selectedDocument,\n        selectedDocumentId = _useDocumentationHist.selectedDocumentId,\n        openDocumentPage = _useDocumentationHist.openDocumentPage,\n        openNewDocumentPage = _useDocumentationHist.openNewDocumentPage,\n        closeDocumentPage = _useDocumentationHist.closeDocumentPage;\n\n  const handleLocaleChange = locale => {\n    openDocumentPage();\n    onLocaleChange(locale);\n  };\n\n  const handleSelectDocument = document => {\n    openDocumentPage(document, 'view');\n  };\n\n  const handleEditDocument = () => {\n    openDocumentPage(selectedDocument, 'edit');\n  };\n\n  const handleSaveEditDocument = () => {\n    openDocumentPage(selectedDocument, 'view');\n  };\n\n  const handleCancelEditDocument = () => {\n    openDocumentPage(selectedDocument, 'view');\n  };\n\n  const newDocument = useSelector(getNewDocument);\n  useEffect(() => {\n    if (mode === 'add') {\n      if (!history.location.state) {\n        history.goBack();\n        return;\n      }\n\n      dispatch(addNewDocument(history.location.state));\n    } else if (newDocument) {\n      dispatch(removeNewDocument());\n    }\n  }, [dispatch, history, mode, newDocument]);\n\n  const handleAddNewDocument = parentDocument => {\n    if (newDocument != null) {\n      return;\n    }\n\n    if (parentDocument) {\n      dispatch(addExpandedNodes(entityUuid, locale, [parentDocument.id]));\n    }\n\n    const title = translate('resources.apis.documentation.fields.new_document');\n    openNewDocumentPage(createNewDocument(title, parentDocument, items, entityType, entityTypeUuid, locale));\n  };\n\n  const handleSaveNewDocument = document => {\n    openDocumentPage(document, 'view');\n  };\n\n  const handleCancelAddNewDocument = () => {\n    closeDocumentPage();\n  };\n\n  const handleDeleteDocument = () => {\n    closeDocumentPage();\n  };\n\n  const hasChildren = useMemo(() => selectedDocument ? documentHasChildren(items, selectedDocument) : false, [items, selectedDocument]);\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(\"div\", {\n    className: classes.tree\n  }, React.createElement(\"div\", {\n    className: classes.treeToolbar\n  }, React.createElement(Labeled, {\n    label: \"resources.apis.documentation.fields.select_documentation_locale\"\n  }, React.createElement(LocaleSwitcherMenu, {\n    locale: locale,\n    locales: supportedLocales,\n    onChange: handleLocaleChange,\n    className: classes.localeButton\n  })), userCanEdit && React.createElement(IconButton, {\n    color: \"primary\",\n    onClick: () => handleAddNewDocument(),\n    disabled: newDocument != null,\n    \"aria-label\": translate('resources.apis.documentation.actions.new_document_button'),\n    title: translate('resources.apis.documentation.actions.new_document_button')\n  }, React.createElement(IconAdd, null))), React.createElement(Divider, null), locale && React.createElement(DocumentationTree, {\n    items: [...(newDocument != null ? [newDocument] : []), ...items],\n    onDocumentSelected: handleSelectDocument,\n    selectedDocumentId: newDocument != null ? newDocument.id : selectedDocumentId,\n    expanded: expanded,\n    onExpandedChange: setExpanded\n  })), React.createElement(\"div\", {\n    className: classes.documentation\n  }, selectedDocument && mode === 'view' ? React.createElement(DocumentView, {\n    document: selectedDocument,\n    entityType: entityType,\n    entityUuid: entityUuid,\n    locale: locale,\n    userCanDelete: userCanDelete,\n    userCanEdit: userCanEdit,\n    hasChildren: hasChildren,\n    onEdit: handleEditDocument,\n    onAddNewDocument: handleAddNewDocument,\n    onDeleteDocument: handleDeleteDocument,\n    allDocuments: items\n  }) : null, selectedDocument && mode === 'edit' ? React.createElement(DocumentEdit, {\n    document: selectedDocument,\n    entityType: entityType,\n    entityUuid: entityUuid,\n    userCanDelete: userCanDelete,\n    userCanEdit: userCanEdit,\n    hasChildren: hasChildren,\n    onSave: handleSaveEditDocument,\n    onCancel: handleCancelEditDocument,\n    onAddNewDocument: handleAddNewDocument,\n    onDeleteDocument: handleDeleteDocument\n  }) : null, newDocument && mode === 'add' ? React.createElement(DocumentCreate, {\n    document: newDocument,\n    entityType: entityType,\n    entityUuid: entityUuid,\n    allDocuments: items,\n    onSaved: handleSaveNewDocument,\n    onCancel: handleCancelAddNewDocument\n  }) : null));\n};\n\nexport const Documentation = _a => {\n  var record = _a.record,\n      rest = __rest(_a, [\"record\"]);\n\n  const translate = useTranslate();\n  const version = useVersion();\n\n  const _useApiHubPreference = useApiHubPreference('documentationLocale'),\n        _useApiHubPreference2 = _slicedToArray(_useApiHubPreference, 2),\n        documentationLocalePreference = _useApiHubPreference2[0],\n        writeDocumentationLocalePreference = _useApiHubPreference2[1];\n\n  useEffect(() => {\n    const locale = readApiHubPreference('locale', defaultLocale);\n\n    if (documentationLocalePreference === undefined) {\n      writeDocumentationLocalePreference(locale);\n    }\n  }, [documentationLocalePreference, writeDocumentationLocalePreference]);\n\n  const handleDocumentationLocaleChange = newLocale => {\n    writeDocumentationLocalePreference(newLocale);\n  };\n  /**\n   * We want the list of ids to be always available for optimistic rendering,\n   * and therefore we need a custom action (CRUD_GET_LIST) that will be used.\n   */\n\n\n  const _useGetList = useGetList('documents', undefined, undefined, {\n    entityType,\n    entityUuid: record.id,\n    locale: documentationLocales[documentationLocalePreference]\n  }, {\n    action: CRUD_GET_LIST,\n    version\n  }),\n        ids = _useGetList.ids,\n        loaded = _useGetList.loaded,\n        error = _useGetList.error,\n        total = _useGetList.total; // When the user changes the page/sort/filter or delete an item, this\n  // controller runs the useGetList hook again. While the result of this new\n  // call is loading, the ids and total are empty. To avoid rendering an\n  // empty list at that moment, we override the ids and total with the latest\n  // loaded ones.\n\n\n  const defaultIds = useSelector(state => get(state.admin.resources, ['documents', 'list', 'ids'], []));\n  const idsToDisplay = typeof total === 'undefined' ? defaultIds : ids;\n  const data = useSelector(state => get(state.admin.resources, ['documents', 'data'], {}));\n  const items = useMemo(() => Object.values(data).filter(item => idsToDisplay.includes(item.id)), [data, idsToDisplay]);\n\n  if (!loaded) {\n    return React.createElement(LinearProgress, null);\n  }\n\n  if (!data || error) {\n    return React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"error\"\n    }, translate('ra.page.error'));\n  }\n\n  return React.createElement(DocumentationContent, Object.assign({\n    entityUuid: record.id,\n    items: items,\n    locale: documentationLocalePreference,\n    onLocaleChange: handleDocumentationLocaleChange\n  }, rest));\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  tree: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    padding: theme.spacing(1),\n    paddingRight: theme.spacing(2),\n    flexGrow: 0,\n    flexShrink: 0,\n    flexBasis: '20%',\n    borderStyle: 'solid',\n    borderColor: theme.palette.divider,\n    borderWidth: '0px 1px 0px 0px'\n  },\n  treeToolbar: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  documentation: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    padding: theme.spacing(1),\n    flexGrow: 1\n  },\n  localeButton: {\n    width: '100%',\n    justifyContent: 'space-between'\n  },\n  leftIcon: {\n    marginRight: theme.spacing(1)\n  }\n}), {\n  name: 'Layer7Documentation'\n});","map":null,"metadata":{},"sourceType":"module"}