{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement } from 'react';\nimport { Filter, sanitizeListRestProps, SelectInput, TopToolbar } from 'react-admin';\nimport classnames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport { readApiHubPreference } from '../preferences';\nimport { AccessField, CardGrid, Datagrid, List, ListDisplayButton, ListDisplayProvider, LIST_DISPLAY_CARDS, SortButton, SortMenuItem, TruncatedTextField, useListDisplay } from '../ui';\nimport { ApplicationCard } from './ApplicationCard';\nvar defaultSort = {\n  field: 'uuid',\n  order: 'ASC'\n};\nvar listDisplayPreferenceName = 'listDisplay/applications';\nexport var ApplicationList = function ApplicationList(props) {\n  var initialListDisplay = readApiHubPreference(listDisplayPreferenceName, LIST_DISPLAY_CARDS);\n  return React.createElement(ListDisplayProvider, {\n    initialListDisplay: initialListDisplay,\n    preferenceName: listDisplayPreferenceName\n  }, React.createElement(List, Object.assign({\n    actions: React.createElement(ApplicationListActions, null),\n    filter: {\n      $select: 'Name,Uuid,ApiKey,Status,Description'\n    },\n    filters: React.createElement(ApplicationFilter, null),\n    sort: defaultSort,\n    bulkActionButtons: false,\n    component: ApplicationListComponent\n  }, props), React.createElement(ApplicationListDisplay, null)));\n};\n\nvar ApplicationListComponent = function ApplicationListComponent(props) {\n  return React.createElement(\"div\", Object.assign({}, props));\n};\n\nvar ApplicationFilter = function ApplicationFilter(props) {\n  return React.createElement(Filter, Object.assign({}, props), React.createElement(SelectInput, {\n    source: \"status\",\n    choices: [{\n      id: 'Enabled',\n      name: 'resources.applications.status.enabled'\n    }, {\n      id: 'Disabled',\n      name: 'resources.applications.status.disabled'\n    }]\n  }));\n};\n\nvar ApplicationListDisplay = function ApplicationListDisplay(props) {\n  var _useListDisplay = useListDisplay(),\n      _useListDisplay2 = _slicedToArray(_useListDisplay, 1),\n      display = _useListDisplay2[0];\n\n  if (display === LIST_DISPLAY_CARDS) {\n    return React.createElement(CardGrid, Object.assign({}, props), React.createElement(ApplicationCard, null));\n  }\n\n  return React.createElement(Card, null, React.createElement(Datagrid, Object.assign({\n    rowClick: \"show\"\n  }, props), React.createElement(TruncatedTextField, {\n    source: \"name\"\n  }), React.createElement(AccessField, {\n    source: \"status\",\n    translationKey: \"resources.applications.status\"\n  })));\n};\n\nvar useApplicationListActionsStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      alignItems: 'center'\n    },\n    button: {\n      marginLeft: theme.spacing()\n    }\n  };\n});\n\nvar ApplicationListActions = function ApplicationListActions(_a) {\n  var className = _a.className,\n      currentSort = _a.currentSort,\n      displayedFilters = _a.displayedFilters,\n      exporter = _a.exporter,\n      filters = _a.filters,\n      filterValues = _a.filterValues,\n      permanentFilter = _a.permanentFilter,\n      resource = _a.resource,\n      showFilter = _a.showFilter,\n      props = __rest(_a, [\"className\", \"currentSort\", \"displayedFilters\", \"exporter\", \"filters\", \"filterValues\", \"permanentFilter\", \"resource\", \"showFilter\"]);\n\n  var classes = useApplicationListActionsStyles();\n\n  var _useListDisplay3 = useListDisplay(),\n      _useListDisplay4 = _slicedToArray(_useListDisplay3, 1),\n      display = _useListDisplay4[0];\n\n  return React.createElement(TopToolbar, Object.assign({\n    className: classnames(classes.root, className)\n  }, sanitizeListRestProps(props)), filters && cloneElement(filters, {\n    resource: resource,\n    showFilter: showFilter,\n    displayedFilters: displayedFilters,\n    filterValues: filterValues,\n    context: 'button'\n  }), display === LIST_DISPLAY_CARDS ? React.createElement(ApplicationListSortButton, {\n    resource: resource,\n    currentSort: currentSort\n  }) : null, React.createElement(ListDisplayButton, {\n    className: classes.button\n  }));\n};\n\nexport var ApplicationListSortButton = function ApplicationListSortButton(props) {\n  return React.createElement(SortButton, Object.assign({}, props), React.createElement(SortMenuItem, {\n    label: \"resources.applications.list.sort.name.asc\",\n    sort: SortByNameASC\n  }), React.createElement(SortMenuItem, {\n    label: \"resources.applications.list.sort.name.desc\",\n    sort: SortByNameDESC\n  }));\n};\nvar SortByNameASC = {\n  field: 'name',\n  order: 'ASC'\n};\nvar SortByNameDESC = {\n  field: 'name',\n  order: 'DESC'\n};","map":null,"metadata":{},"sourceType":"module"}