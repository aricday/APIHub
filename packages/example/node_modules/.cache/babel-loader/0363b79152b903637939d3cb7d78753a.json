{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useState, useCallback } from 'react';\nimport { Link, InputHelperText, useInput, useTranslate } from 'react-admin';\nimport { FormGroup, FormControlLabel, FormHelperText, Checkbox, Typography } from '@material-ui/core';\nimport { TermsDialog } from './TermsDialog';\nexport const TermsLabel = () => {\n  const translate = useTranslate();\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setIsOpen = _useState2[1];\n\n  const handleOpen = event => {\n    event.preventDefault();\n    setIsOpen(true);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Typography, {\n    variant: \"body1\"\n  }, translate('apihub.account_setup.terms_of_use_acknowledgement'), React.createElement(Link, {\n    to: \"#\",\n    onClick: handleOpen\n  }, translate('apihub.account_setup.terms_of_use'))), isOpen === true && React.createElement(TermsDialog, {\n    open: isOpen,\n    onClose: handleClose\n  }));\n};\nexport const TermsInput = _a => {\n  var helperText = _a.helperText,\n      rest = __rest(_a, [\"helperText\"]);\n\n  const _b = useInput(Object.assign({}, rest)),\n        _c = _b.input,\n        onChange = _c.onChange,\n        type = _c.type,\n        value = _c.value,\n        inputProps = __rest(_c, [\"onChange\", \"type\", \"value\"]),\n        _b$meta = _b.meta,\n        error = _b$meta.error,\n        touched = _b$meta.touched;\n\n  const handleChange = useCallback((_, value) => {\n    onChange(value);\n  }, [onChange]);\n  return React.createElement(FormGroup, null, React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, Object.assign({\n      color: \"primary\",\n      onChange: handleChange\n    }, inputProps)),\n    label: React.createElement(TermsLabel, null),\n    labelPlacement: \"end\"\n  }), React.createElement(FormHelperText, {\n    error: !!error\n  }, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error,\n    helperText: helperText\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}