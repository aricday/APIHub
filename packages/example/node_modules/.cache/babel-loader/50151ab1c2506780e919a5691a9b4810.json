{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { fetchUtils } from 'ra-core';\nconst basePath = '/document-service/0.1';\nexport const buildDocumentId = (entityType, entityUuid, navtitle, locale) => {\n  // The document API does not follow the usual REST convention\n  // To make it work with react admin, we build an ID which will be destructured\n  // in the dataProvider\n  return `${entityType}/${entityUuid}/${navtitle}/${locale}`;\n};\n/**\n * Prepare data to create a document\n * Filtered params are: id, uuid, children\n * Conserved params are: type, typeUuid, locale, parentUuid, status, title, navtitle, markdown, ordinal, modifyTs\n */\n\nconst prepareCreateData = _a => {\n  var id = _a.id,\n      uuid = _a.uuid,\n      children = _a.children,\n      rest = __rest(_a, [\"id\", \"uuid\", \"children\"]);\n\n  return JSON.stringify(rest);\n};\n/**\n * Prepare data to update a document\n * Filtered params are: id, children\n * Conserved params are: uuid, type, typeUuid, locale, parentUuid, status, title, navtitle, markdown, ordinal, modifyTs\n */\n\n\nconst prepareUpdateData = _a => {\n  var id = _a.id,\n      children = _a.children,\n      rest = __rest(_a, [\"id\", \"children\"]);\n\n  return JSON.stringify(rest);\n};\n\nexport const documentsDataProvider = baseUrl => {\n  return {\n    getList: async ({\n      filter\n    }) => {\n      const entityType = filter.entityType,\n            entityUuid = filter.entityUuid,\n            locale = filter.locale,\n            _filter$fetchTree = filter.fetchTree,\n            fetchTree = _filter$fetchTree === void 0 ? true : _filter$fetchTree;\n      const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/${fetchTree ? 'tree' : ''}?locale=${locale}`;\n\n      const _ref = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            json = _ref.json;\n\n      return {\n        data: json.map(item => Object.assign(Object.assign({}, item), {\n          id: buildDocumentId(entityType, entityUuid, item.navtitle, locale)\n        })),\n        total: json.length\n      };\n    },\n    getOne: async ({\n      id\n    }) => {\n      const _id$split = id.split('/'),\n            _id$split2 = _slicedToArray(_id$split, 4),\n            entityType = _id$split2[0],\n            entityUuid = _id$split2[1],\n            navtitle = _id$split2[2],\n            locale = _id$split2[3];\n\n      const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/${encodeURIComponent(navtitle)}?locale=${locale}`;\n\n      const _ref2 = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            json = _ref2.json;\n\n      return {\n        data: Object.assign(Object.assign({}, json), {\n          id: buildDocumentId(entityType, entityUuid, json.navtitle, json.locale)\n        })\n      };\n    },\n    create: async _a => {\n      var _b = _a.data,\n          id = _b.id,\n          body = __rest(_b, [\"id\"]);\n\n      const _id$split3 = id.split('/'),\n            _id$split4 = _slicedToArray(_id$split3, 2),\n            entityType = _id$split4[0],\n            entityUuid = _id$split4[1];\n\n      const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs`;\n\n      const _ref3 = await fetchUtils.fetchJson(url, {\n        credentials: 'include',\n        method: 'POST',\n        body: prepareCreateData(body)\n      }),\n            json = _ref3.json;\n\n      return {\n        data: Object.assign(Object.assign({}, json), {\n          id: buildDocumentId(entityType, entityUuid, json.navtitle, json.locale)\n        })\n      };\n    },\n    update: async _a => {\n      var _b = _a.data,\n          id = _b.id,\n          body = __rest(_b, [\"id\"]);\n\n      const _id$split5 = id.split('/'),\n            _id$split6 = _slicedToArray(_id$split5, 4),\n            entityType = _id$split6[0],\n            entityUuid = _id$split6[1],\n            navtitle = _id$split6[2],\n            locale = _id$split6[3];\n\n      const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/${encodeURIComponent(navtitle)}?locale=${locale}`;\n\n      const _ref4 = await fetchUtils.fetchJson(url, {\n        credentials: 'include',\n        method: 'PUT',\n        body: prepareUpdateData(body)\n      }),\n            json = _ref4.json;\n\n      return {\n        data: Object.assign(Object.assign({}, json), {\n          id: buildDocumentId(entityType, entityUuid, json.navtitle, json.locale)\n        })\n      };\n    },\n    updateTree: async ({\n      entityType,\n      entityUuid,\n      locale,\n      data\n    }) => {\n      const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/tree?locale=${locale}`;\n\n      const _ref5 = await fetchUtils.fetchJson(url, {\n        method: 'PUT',\n        credentials: 'include',\n        body: JSON.stringify(data)\n      }),\n            json = _ref5.json;\n\n      return {\n        data: json\n      };\n    },\n    delete: async ({\n      id\n    }) => {\n      const _id$split7 = id.split('/'),\n            _id$split8 = _slicedToArray(_id$split7, 4),\n            entityType = _id$split8[0],\n            entityUuid = _id$split8[1],\n            navtitle = _id$split8[2],\n            locale = _id$split8[3];\n\n      const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/${encodeURIComponent(navtitle)}?locale=${locale}&forceDelete=true`;\n\n      const data = __rest((await fetchUtils.fetchJson(url, {\n        credentials: 'include',\n        method: 'DELETE'\n      })).json, []);\n\n      return {\n        data: Object.assign(Object.assign({}, data), {\n          id: buildDocumentId(entityType, entityUuid, data.navtitle, data.locale)\n        })\n      };\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}