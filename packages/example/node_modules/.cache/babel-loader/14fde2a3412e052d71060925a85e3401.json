{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement } from 'react';\nimport { DateField, Filter, ReferenceArrayInput, sanitizeListRestProps, SelectArrayInput, SearchInput, SelectInput, TextField, TopToolbar } from 'react-admin';\nimport { useTranslate } from 'ra-core';\nimport classnames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport { AccessField, CardGrid, Datagrid, List, ListDisplayButton, ListDisplayProvider, LIST_DISPLAY_CARDS, MarkdownField, SortButton, SortMenuItem, TruncatedTextField, useListDisplay } from '../ui';\nimport { ApiCard } from './ApiCard';\nimport { VisibilityField } from './VisibilityField';\nimport { TagsField } from './TagsField';\nimport { LastUpdateField } from './LastUpdateField';\nimport { readApiHubPreference } from '../preferences';\nconst defaultSort = {\n  field: 'createTs',\n  order: 'DESC'\n};\nconst listDisplayPreferenceName = 'listDisplay/apis';\nexport const ApiList = props => {\n  const initialListDisplay = readApiHubPreference(listDisplayPreferenceName, LIST_DISPLAY_CARDS);\n  return React.createElement(ListDisplayProvider, {\n    initialListDisplay: initialListDisplay,\n    preferenceName: listDisplayPreferenceName\n  }, React.createElement(List, Object.assign({\n    actions: React.createElement(ApiListActions, null),\n    filters: React.createElement(ApiFilter, null),\n    sort: defaultSort,\n    bulkActionButtons: false,\n    component: ApiListComponent\n  }, props), React.createElement(ApiListDisplay, null)));\n};\n\nconst ApiListComponent = props => React.createElement(\"div\", Object.assign({}, props));\n\nconst useApiFilterStyles = makeStyles({\n  searchInput: {\n    minWidth: '300px'\n  }\n});\n\nconst ApiFilter = props => {\n  const translate = useTranslate();\n  const classes = useApiFilterStyles();\n  return React.createElement(Filter, Object.assign({}, props), React.createElement(SearchInput, {\n    source: \"q\",\n    className: classes.searchInput,\n    alwaysOn: true,\n    placeholder: translate('resources.apis.list.filters.search')\n  }), React.createElement(SelectInput, {\n    source: \"accessStatus\",\n    choices: [{\n      id: 'public',\n      name: 'resources.apis.accessStatus.public'\n    }, {\n      id: 'private',\n      name: 'resources.apis.accessStatus.private'\n    }]\n  }), React.createElement(SelectInput, {\n    source: \"portalStatus\",\n    choices: [{\n      id: 'Enabled',\n      name: 'resources.apis.portalStatus.enabled'\n    }, {\n      id: 'Disabled',\n      name: 'resources.apis.portalStatus.disabled'\n    }, {\n      id: 'Deprecated',\n      name: 'resources.apis.portalStatus.deprecated'\n    }, {\n      id: 'New',\n      name: 'resources.apis.portalStatus.unpublished'\n    }]\n  }), React.createElement(SelectInput // The field is ssgServiceType in the response payload but apiServiceType in filters\n  , {\n    // The field is ssgServiceType in the response payload but apiServiceType in filters\n    source: \"apiServiceType\",\n    choices: [{\n      id: 'SOAP',\n      name: 'SOAP'\n    }, {\n      id: 'REST',\n      name: 'REST'\n    }]\n  }), React.createElement(ReferenceArrayInput, {\n    source: \"tags\",\n    reference: \"tags\"\n  }, React.createElement(SelectArrayInput, {\n    optionText: \"name\"\n  })));\n};\n\nconst ApiListDisplay = props => {\n  const _useListDisplay = useListDisplay(),\n        _useListDisplay2 = _slicedToArray(_useListDisplay, 1),\n        display = _useListDisplay2[0];\n\n  if (display === LIST_DISPLAY_CARDS) {\n    return React.createElement(CardGrid, Object.assign({}, props), React.createElement(ApiCard, null));\n  }\n\n  return React.createElement(Card, null, React.createElement(Datagrid, Object.assign({\n    rowClick: \"show\"\n  }, props), React.createElement(TruncatedTextField, {\n    source: \"name\"\n  }), React.createElement(MarkdownField, {\n    source: \"description\",\n    stripTags: true,\n    truncate: true\n  }), React.createElement(TagsField, {\n    source: \"tags\",\n    sortable: false\n  }), React.createElement(DateField, {\n    source: \"createTs\"\n  }), React.createElement(TruncatedTextField, {\n    source: \"version\",\n    label: \"resources.apis.fields.versionShort\"\n  }), React.createElement(TextField, {\n    source: \"ssgServiceType\"\n  }), React.createElement(VisibilityField, {\n    source: \"accessStatus\"\n  }), React.createElement(LastUpdateField, {\n    source: \"modifyTs\"\n  }), React.createElement(AccessField, {\n    source: \"portalStatus\",\n    translationKey: \"resources.apis.portalStatus\"\n  })));\n};\n\nconst useApiListActionsStyles = makeStyles(theme => ({\n  root: {\n    alignItems: 'center'\n  },\n  button: {\n    marginLeft: theme.spacing()\n  }\n}));\n\nconst ApiListActions = _a => {\n  var className = _a.className,\n      currentSort = _a.currentSort,\n      displayedFilters = _a.displayedFilters,\n      exporter = _a.exporter,\n      filters = _a.filters,\n      filterValues = _a.filterValues,\n      permanentFilter = _a.permanentFilter,\n      resource = _a.resource,\n      showFilter = _a.showFilter,\n      props = __rest(_a, [\"className\", \"currentSort\", \"displayedFilters\", \"exporter\", \"filters\", \"filterValues\", \"permanentFilter\", \"resource\", \"showFilter\"]);\n\n  const classes = useApiListActionsStyles();\n\n  const _useListDisplay3 = useListDisplay(),\n        _useListDisplay4 = _slicedToArray(_useListDisplay3, 1),\n        display = _useListDisplay4[0];\n\n  return React.createElement(TopToolbar, Object.assign({\n    className: classnames(classes.root, className)\n  }, sanitizeListRestProps(props)), filters && cloneElement(filters, {\n    resource,\n    showFilter,\n    displayedFilters,\n    filterValues,\n    context: 'button'\n  }), display === LIST_DISPLAY_CARDS ? React.createElement(ApiListSortButton, {\n    resource: resource,\n    currentSort: currentSort\n  }) : null, React.createElement(ListDisplayButton, {\n    className: classes.button\n  }));\n};\n\nexport const ApiListSortButton = props => React.createElement(SortButton, Object.assign({}, props), React.createElement(SortMenuItem, {\n  label: \"resources.apis.list.sort.name.asc\",\n  sort: SortByNameASC\n}), React.createElement(SortMenuItem, {\n  label: \"resources.apis.list.sort.name.desc\",\n  sort: SortByNameDESC\n}), React.createElement(SortMenuItem, {\n  label: \"resources.apis.list.sort.createTs.desc\",\n  sort: SortByCreateTsDESC\n}), React.createElement(SortMenuItem, {\n  label: \"resources.apis.list.sort.createTs.asc\",\n  sort: SortByCreateTsASC\n}), React.createElement(SortMenuItem, {\n  label: \"resources.apis.list.sort.modifyTs.desc\",\n  sort: SortByModifyTsDESC\n}), React.createElement(SortMenuItem, {\n  label: \"resources.apis.list.sort.modifyTs.asc\",\n  sort: SortByModifyTsASC\n}));\nconst SortByNameASC = {\n  field: 'name',\n  order: 'ASC'\n};\nconst SortByNameDESC = {\n  field: 'name',\n  order: 'DESC'\n};\nconst SortByCreateTsASC = {\n  field: 'createTs',\n  order: 'ASC'\n};\nconst SortByCreateTsDESC = {\n  field: 'createTs',\n  order: 'DESC'\n};\nconst SortByModifyTsASC = {\n  field: 'modifyTs',\n  order: 'ASC'\n};\nconst SortByModifyTsDESC = {\n  field: 'modifyTs',\n  order: 'DESC'\n};","map":null,"metadata":{},"sourceType":"module"}