{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { fetchUtils } from 'ra-core';\nconst basePath = '/tags';\nconst basePathApi = '/api-management/1.0/apis';\nexport const tagsDataProvider = baseUrl => {\n  return {\n    getManyReference: async ({\n      id\n    }) => {\n      const url = `${baseUrl}${basePathApi}/${id}/tags`;\n\n      const _ref = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            json = _ref.json;\n\n      return {\n        data: json.map(_a => {\n          var uuid = _a.uuid,\n              item = __rest(_a, [\"uuid\"]);\n\n          return Object.assign({\n            id: uuid\n          }, item);\n        }) || [],\n        total: json.totalElements || 0\n      };\n    },\n    getList: async () => {\n      const url = `${baseUrl}${basePath}`;\n\n      const _ref2 = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            json = _ref2.json;\n\n      return {\n        data: json.map(item => Object.assign({\n          id: item.name\n        }, item)) || [],\n        total: json.length\n      };\n    },\n    getMany: async () => {\n      const url = `${baseUrl}${basePath}`;\n\n      const _ref3 = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            json = _ref3.json;\n\n      return {\n        data: json.map(item => Object.assign({\n          id: item.name\n        }, item)) || [],\n        total: json.length\n      };\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}