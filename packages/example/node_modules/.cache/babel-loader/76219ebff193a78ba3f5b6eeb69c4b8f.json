{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { fetchUtils } from 'ra-core';\nvar basePath = '/document-service/0.1';\nexport var buildDocumentId = function buildDocumentId(entityType, entityUuid, navtitle, locale) {\n  // The document API does not follow the usual REST convention\n  // To make it work with react admin, we build an ID which will be destructured\n  // in the dataProvider\n  return \"\".concat(entityType, \"/\").concat(entityUuid, \"/\").concat(navtitle, \"/\").concat(locale);\n};\n/**\n * Prepare data to create a document\n * Filtered params are: id, uuid, children\n * Conserved params are: type, typeUuid, locale, parentUuid, status, title, navtitle, markdown, ordinal, modifyTs\n */\n\nvar prepareCreateData = function prepareCreateData(_a) {\n  var id = _a.id,\n      uuid = _a.uuid,\n      children = _a.children,\n      rest = __rest(_a, [\"id\", \"uuid\", \"children\"]);\n\n  return JSON.stringify(rest);\n};\n/**\n * Prepare data to update a document\n * Filtered params are: id, children\n * Conserved params are: uuid, type, typeUuid, locale, parentUuid, status, title, navtitle, markdown, ordinal, modifyTs\n */\n\n\nvar prepareUpdateData = function prepareUpdateData(_a) {\n  var id = _a.id,\n      children = _a.children,\n      rest = __rest(_a, [\"id\", \"children\"]);\n\n  return JSON.stringify(rest);\n};\n\nexport var documentsDataProvider = function documentsDataProvider(baseUrl) {\n  return {\n    getList: function getList(_ref) {\n      var filter, entityType, entityUuid, locale, _filter$fetchTree, fetchTree, url, _ref2, json;\n\n      return _regeneratorRuntime.async(function getList$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              filter = _ref.filter;\n              entityType = filter.entityType, entityUuid = filter.entityUuid, locale = filter.locale, _filter$fetchTree = filter.fetchTree, fetchTree = _filter$fetchTree === void 0 ? true : _filter$fetchTree;\n              url = \"\".concat(baseUrl).concat(basePath, \"/\").concat(entityType, \"/\").concat(entityUuid, \"/docs/\").concat(fetchTree ? 'tree' : '', \"?locale=\").concat(locale);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                credentials: 'include'\n              }));\n\n            case 5:\n              _ref2 = _context.sent;\n              json = _ref2.json;\n              return _context.abrupt(\"return\", {\n                data: json.map(function (item) {\n                  return Object.assign(Object.assign({}, item), {\n                    id: buildDocumentId(entityType, entityUuid, item.navtitle, locale)\n                  });\n                }),\n                total: json.length\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    },\n    getOne: function getOne(_ref3) {\n      var id, _id$split, _id$split2, entityType, entityUuid, navtitle, locale, url, _ref4, json;\n\n      return _regeneratorRuntime.async(function getOne$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              id = _ref3.id;\n              _id$split = id.split('/'), _id$split2 = _slicedToArray(_id$split, 4), entityType = _id$split2[0], entityUuid = _id$split2[1], navtitle = _id$split2[2], locale = _id$split2[3];\n              url = \"\".concat(baseUrl).concat(basePath, \"/\").concat(entityType, \"/\").concat(entityUuid, \"/docs/\").concat(encodeURIComponent(navtitle), \"?locale=\").concat(locale);\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                credentials: 'include'\n              }));\n\n            case 5:\n              _ref4 = _context2.sent;\n              json = _ref4.json;\n              return _context2.abrupt(\"return\", {\n                data: Object.assign(Object.assign({}, json), {\n                  id: buildDocumentId(entityType, entityUuid, json.navtitle, json.locale)\n                })\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    },\n    create: function create(_a) {\n      var _b, id, body, _id$split3, _id$split4, entityType, entityUuid, url, _ref5, json;\n\n      return _regeneratorRuntime.async(function create$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _b = _a.data, id = _b.id, body = __rest(_b, [\"id\"]);\n              _id$split3 = id.split('/'), _id$split4 = _slicedToArray(_id$split3, 2), entityType = _id$split4[0], entityUuid = _id$split4[1];\n              url = \"\".concat(baseUrl).concat(basePath, \"/\").concat(entityType, \"/\").concat(entityUuid, \"/docs\");\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                credentials: 'include',\n                method: 'POST',\n                body: prepareCreateData(body)\n              }));\n\n            case 5:\n              _ref5 = _context3.sent;\n              json = _ref5.json;\n              return _context3.abrupt(\"return\", {\n                data: Object.assign(Object.assign({}, json), {\n                  id: buildDocumentId(entityType, entityUuid, json.navtitle, json.locale)\n                })\n              });\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    },\n    update: function update(_a) {\n      var _b, id, body, _id$split5, _id$split6, entityType, entityUuid, navtitle, locale, url, _ref6, json;\n\n      return _regeneratorRuntime.async(function update$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _b = _a.data, id = _b.id, body = __rest(_b, [\"id\"]);\n              _id$split5 = id.split('/'), _id$split6 = _slicedToArray(_id$split5, 4), entityType = _id$split6[0], entityUuid = _id$split6[1], navtitle = _id$split6[2], locale = _id$split6[3];\n              url = \"\".concat(baseUrl).concat(basePath, \"/\").concat(entityType, \"/\").concat(entityUuid, \"/docs/\").concat(encodeURIComponent(navtitle), \"?locale=\").concat(locale);\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                credentials: 'include',\n                method: 'PUT',\n                body: prepareUpdateData(body)\n              }));\n\n            case 5:\n              _ref6 = _context4.sent;\n              json = _ref6.json;\n              return _context4.abrupt(\"return\", {\n                data: Object.assign(Object.assign({}, json), {\n                  id: buildDocumentId(entityType, entityUuid, json.navtitle, json.locale)\n                })\n              });\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    },\n    updateTree: function updateTree(_ref7) {\n      var entityType, entityUuid, locale, data, url, _ref8, json;\n\n      return _regeneratorRuntime.async(function updateTree$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              entityType = _ref7.entityType, entityUuid = _ref7.entityUuid, locale = _ref7.locale, data = _ref7.data;\n              url = \"\".concat(baseUrl).concat(basePath, \"/\").concat(entityType, \"/\").concat(entityUuid, \"/docs/tree?locale=\").concat(locale);\n              _context5.next = 4;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                method: 'PUT',\n                credentials: 'include',\n                body: JSON.stringify(data)\n              }));\n\n            case 4:\n              _ref8 = _context5.sent;\n              json = _ref8.json;\n              return _context5.abrupt(\"return\", {\n                data: json\n              });\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    },\n    delete: function _delete(_ref9) {\n      var id, _id$split7, _id$split8, entityType, entityUuid, navtitle, locale, url, data;\n\n      return _regeneratorRuntime.async(function _delete$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              id = _ref9.id;\n              _id$split7 = id.split('/'), _id$split8 = _slicedToArray(_id$split7, 4), entityType = _id$split8[0], entityUuid = _id$split8[1], navtitle = _id$split8[2], locale = _id$split8[3];\n              url = \"\".concat(baseUrl).concat(basePath, \"/\").concat(entityType, \"/\").concat(entityUuid, \"/docs/\").concat(encodeURIComponent(navtitle), \"?locale=\").concat(locale, \"&forceDelete=true\");\n              _context6.t0 = __rest;\n              _context6.next = 6;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                credentials: 'include',\n                method: 'DELETE'\n              }));\n\n            case 6:\n              _context6.t1 = _context6.sent.json;\n              _context6.t2 = [];\n              data = (0, _context6.t0)(_context6.t1, _context6.t2);\n              return _context6.abrupt(\"return\", {\n                data: Object.assign(Object.assign({}, data), {\n                  id: buildDocumentId(entityType, entityUuid, data.navtitle, data.locale)\n                })\n              });\n\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}