{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { fetchUtils } from 'ra-core'; // Fake id used because we can only access the current user context\n\nexport var CurrentUserId = 'layer7@currentUser';\nexport var userContextsDataProvider = function userContextsDataProvider(baseUrl) {\n  var basePath = \"\".concat(baseUrl, \"/userContexts\");\n  return {\n    getOne: function getOne() {\n      var _ref, data, userContext;\n\n      return _regeneratorRuntime.async(function getOne$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(basePath, {\n                credentials: 'include'\n              }));\n\n            case 2:\n              _ref = _context.sent;\n              data = _ref.json;\n\n              if (!(!data.userContexts || !data.userContexts.length > 0)) {\n                _context.next = 6;\n                break;\n              }\n\n              throw new Error('Invalid user context');\n\n            case 6:\n              userContext = data.userContexts[0];\n              return _context.abrupt(\"return\", {\n                data: Object.assign(Object.assign({}, userContext), {\n                  id: CurrentUserId\n                })\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    },\n    update: function update(_ref2) {\n      var id, data, _data$userDetails, firstName, lastName, email, username, uuid;\n\n      return _regeneratorRuntime.async(function update$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              id = _ref2.id, data = _ref2.data;\n              // The update method should only be used to update the user details\n              _data$userDetails = data.userDetails, firstName = _data$userDetails.firstName, lastName = _data$userDetails.lastName, email = _data$userDetails.email, username = _data$userDetails.username, uuid = _data$userDetails.uuid;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(basePath, {\n                credentials: 'include',\n                method: 'PUT',\n                body: JSON.stringify({\n                  firstName: firstName,\n                  lastName: lastName,\n                  email: email,\n                  username: username,\n                  uuid: uuid\n                })\n              }));\n\n            case 4:\n              return _context2.abrupt(\"return\", {\n                data: Object.assign({\n                  id: id\n                }, data)\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    },\n    updateActiveOrganization: function updateActiveOrganization(_ref3) {\n      var id, data;\n      return _regeneratorRuntime.async(function updateActiveOrganization$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              id = _ref3.id, data = _ref3.data;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(basePath, {\n                credentials: 'include',\n                method: 'PUT',\n                body: JSON.stringify({\n                  orgUuid: data.activeOrgUuid\n                })\n              }));\n\n            case 3:\n              return _context3.abrupt(\"return\", {\n                data: Object.assign({\n                  id: id\n                }, data)\n              });\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}