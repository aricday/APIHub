{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect, forwardRef } from 'react';\nimport { CRUD_CREATE, CRUD_GET_LIST, CRUD_UPDATE, useCreate, useGetList, useLocale, useNotify, useRefresh, useUpdate, useTranslate, useVersion } from 'ra-core';\nimport get from 'lodash/get';\nimport { useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Fab from '@material-ui/core/Fab';\nimport Fade from '@material-ui/core/Fade';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Slide from '@material-ui/core/Slide';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { MarkdownEditor, markdownRenderer as defaultMarkdownRenderer, MarkdownView } from '../ui';\nimport { documentationLocales } from '../i18n';\nimport { useUserContext } from '../userContexts';\nimport { buildDocumentId } from '../dataProvider/documents';\nimport { InputLabel } from '@material-ui/core';\n/**\n * This hook is responsible for fetching the home page markdown content.\n * It returns the markdown directly.\n *\n * @param {Object} options\n * @param {string} options.typeUuid The uuid of the content type to retrieve\n *\n * @example\n * import { useHomePageContent, MarkdownView } from 'layer7-apihub';\n *\n * export const HomePageContent = () => {\n *     const markdown = useHomePageContent();\n *     return <MarkdownView value={markdown} />;\n * }\n */\n\nexport var useHomePageContent = function useHomePageContent(_ref) {\n  var _ref$entityType = _ref.entityType,\n      entityType = _ref$entityType === void 0 ? 'home' : _ref$entityType,\n      _ref$entityUuid = _ref.entityUuid,\n      entityUuid = _ref$entityUuid === void 0 ? 'home1' : _ref$entityUuid,\n      _ref$navtitle = _ref.navtitle,\n      navtitle = _ref$navtitle === void 0 ? 'home1' : _ref$navtitle;\n  var locale = useLocale();\n  var notify = useNotify();\n  var refresh = useRefresh();\n  var version = useVersion();\n  var id = buildDocumentId(entityType, entityUuid, navtitle, documentationLocales[locale]);\n\n  var _useGetList = useGetList('documents', undefined, undefined, {\n    entityType: entityType,\n    entityUuid: entityUuid,\n    locale: documentationLocales[locale],\n    fetchTree: false,\n    version: version\n  }, {\n    action: CRUD_GET_LIST\n  }),\n      ids = _useGetList.ids,\n      loaded = _useGetList.loaded,\n      loading = _useGetList.loading;\n\n  var _useCreate = useCreate('documents'),\n      _useCreate2 = _slicedToArray(_useCreate, 1),\n      create = _useCreate2[0];\n\n  var _useUpdate = useUpdate('documents'),\n      _useUpdate2 = _slicedToArray(_useUpdate, 1),\n      update = _useUpdate2[0]; // When the user create or update the document, the useGetList hook runs again\n  // and returns an empty data while loading. While the result of this new call\n  // is loading, the ids array is empty. To avoid rendering an empty content at\n  // that moment, we override the ids with the latest loaded ones.\n\n\n  var defaultIds = useSelector(function (state) {\n    return get(state.admin.resources, ['documents', 'list', 'ids'], []);\n  });\n  var data = useSelector(function (state) {\n    return get(state.admin.resources, ['documents', 'data'], {});\n  });\n  var documents = (ids.length > 0 ? ids : defaultIds).map(function (id) {\n    return data[id];\n  });\n  var document = documents.find(function (doc) {\n    return doc.navtitle === navtitle;\n  });\n\n  var handleSave = function handleSave(markdown) {\n    var options = {\n      action: !!document ? CRUD_UPDATE : CRUD_CREATE,\n      onSuccess: function onSuccess() {\n        notify('resources.documents.notifications.edit_success', 'info', undefined, !!document ? true : false);\n\n        if (!document) {\n          refresh();\n        }\n      },\n      onFailure: function onFailure() {\n        notify('resources.documents.notifications.edit_error', 'warning');\n      },\n      undoable: !!document ? true : false\n    };\n\n    if (!!document) {\n      update({\n        payload: {\n          id: id,\n          data: Object.assign(Object.assign({}, document), {\n            markdown: markdown\n          })\n        }\n      }, options);\n      return;\n    }\n\n    create({\n      payload: {\n        data: {\n          id: id,\n          locale: documentationLocales[locale],\n          markdown: markdown,\n          navtitle: navtitle,\n          ordinal: 0,\n          status: 'PUBLISHED',\n          title: navtitle,\n          type: entityType,\n          typeUuid: entityUuid\n        }\n      }\n    }, options);\n  };\n\n  return [{\n    data: document,\n    loaded: loaded,\n    loading: loading\n  }, handleSave];\n};\n/**\n * This component is responsible for fetching and displaying an home page content.\n * It also provide mechanisms for portal administrators to update it.\n *\n * The HomePageContent can be used as the default home page if there is only one content to display.\n *\n * @example <caption>Simple usage</caption>\n * <HomePageContent />\n *\n * const MyApp = props => <Admin dashboard={HomePageContent} {...props} />\n *\n */\n\nexport var HomePageContent = function HomePageContent(props) {\n  var _a, _b;\n\n  var _props$navtitle = props.navtitle,\n      navtitle = _props$navtitle === void 0 ? 'home1' : _props$navtitle;\n\n  var _useHomePageContent = useHomePageContent(props),\n      _useHomePageContent2 = _slicedToArray(_useHomePageContent, 2),\n      _useHomePageContent2$ = _useHomePageContent2[0],\n      data = _useHomePageContent2$.data,\n      loaded = _useHomePageContent2$.loaded,\n      handleUpdate = _useHomePageContent2[1];\n\n  var translate = useTranslate();\n  var classes = useStyles();\n\n  var _useUserContext = useUserContext(),\n      _useUserContext2 = _slicedToArray(_useUserContext, 1),\n      userContext = _useUserContext2[0];\n\n  var canEdit = ((_b = (_a = userContext) === null || _a === void 0 ? void 0 : _a.userDetails) === null || _b === void 0 ? void 0 : _b.portalAdmin) || false;\n\n  var _useState = useState('view'),\n      _useState2 = _slicedToArray(_useState, 2),\n      mode = _useState2[0],\n      setMode = _useState2[1];\n\n  var handleToggleEditionMode = function handleToggleEditionMode() {\n    return setMode('edition');\n  };\n\n  var handleToggleViewMode = function handleToggleViewMode() {\n    return setMode('view');\n  };\n\n  useEffect(function () {\n    setMode('view');\n  }, [data]);\n\n  if (!loaded) {\n    return React.createElement(Fade, {\n      in: true,\n      style: {\n        transitionDelay: '300ms'\n      },\n      unmountOnExit: true\n    }, React.createElement(LinearProgress, null));\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(MarkdownView, Object.assign({\n    value: !data ? translate('apihub.homepage.placeholder_empty_content') : data.markdown\n  }, props)), canEdit ? React.createElement(React.Fragment, null, React.createElement(Tooltip, {\n    title: translate(data ? 'ra.action.edit' : 'ra.action.create')\n  }, React.createElement(Fab, {\n    color: \"primary\",\n    \"aria-label\": translate(data ? 'ra.action.edit' : 'ra.action.create'),\n    className: classes.button,\n    onClick: handleToggleEditionMode\n  }, data ? React.createElement(EditIcon, null) : React.createElement(AddIcon, null))), React.createElement(HomePageContentEditor, {\n    initialValue: data ? data.markdown : undefined,\n    navtitle: navtitle,\n    onCancel: handleToggleViewMode,\n    onSave: handleUpdate,\n    open: mode === 'edition'\n  })) : null);\n};\n\nvar HomePageContentEditor = function HomePageContentEditor(_ref2) {\n  var initialValue = _ref2.initialValue,\n      _ref2$markdownRendere = _ref2.markdownRenderer,\n      markdownRenderer = _ref2$markdownRendere === void 0 ? defaultMarkdownRenderer : _ref2$markdownRendere,\n      onCancel = _ref2.onCancel,\n      onSave = _ref2.onSave,\n      open = _ref2.open,\n      navtitle = _ref2.navtitle;\n  var classes = useHomePageContentEditorStyles();\n\n  var _useState3 = useState(initialValue),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  var translate = useTranslate();\n\n  var handleSave = function handleSave() {\n    onSave(value);\n  };\n\n  var handleCancel = function handleCancel() {\n    setValue(initialValue);\n    onCancel();\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    fullScreen: true,\n    onClose: handleCancel,\n    TransitionComponent: Transition\n  }, React.createElement(DialogTitle, null, navtitle), React.createElement(DialogContent, null, React.createElement(InputLabel, {\n    shrink: true,\n    htmlFor: \"textarea\"\n  }, translate('resources.documents.fields.markdown')), React.createElement(MarkdownEditor, {\n    className: classes.editor,\n    value: value,\n    onChange: setValue,\n    markdownRenderer: markdownRenderer\n  })), React.createElement(DialogActions, {\n    className: classes.actions\n  }, React.createElement(Button, {\n    color: \"primary\",\n    variant: \"outlined\",\n    onClick: handleCancel\n  }, translate('resources.documents.actions.cancel')), React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: handleSave,\n    startIcon: React.createElement(SaveIcon, null)\n  }, translate('resources.documents.actions.save'))));\n};\n\nvar Transition = forwardRef(function Transition(props, ref) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props));\n});\nvar useStyles = makeStyles(function (theme) {\n  var appBarHeight = theme.spacing(9); // AppBar (size + margin)\n\n  var homePagePadding = theme.spacing(3); // HomePage (padding)\n\n  return {\n    root: {\n      position: 'relative'\n    },\n    button: {\n      position: 'fixed',\n      right: homePagePadding,\n      top: \"calc(\".concat(appBarHeight, \"px + \").concat(homePagePadding, \"px)\")\n    }\n  };\n});\nvar useHomePageContentEditorStyles = makeStyles(function (theme) {\n  return {\n    editor: {\n      height: \"calc(100% - \".concat(theme.spacing(2), \"px)\")\n    },\n    actions: {\n      margin: theme.spacing(2)\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}