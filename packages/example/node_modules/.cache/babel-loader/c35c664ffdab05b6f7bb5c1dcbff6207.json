{"ast":null,"code":"import React from 'react';\nimport { useTranslate, linkToRecord } from 'ra-core';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport TimeIcon from '@material-ui/icons/AccessTime';\nimport EventIcon from '@material-ui/icons/Event';\nimport format from 'date-fns/format';\nimport { MarkdownView, Stats, StatsText } from '../ui';\nimport { TagsField } from './TagsField';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    cursor: 'pointer',\n    textDecoration: 'none'\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1\n  },\n  header: {\n    borderBottomColor: theme.palette.divider,\n    borderBottomWidth: 1,\n    borderBottomStyle: 'solid'\n  },\n  footer: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 0\n  },\n  description: {\n    flex: 1,\n    overflow: 'hidden',\n    // NOTE: We use some deprecated CSS props here but they are still well supported.\n    // Besides, a new draft specification exists https://www.w3.org/TR/css-overflow-3/#propdef--webkit-line-clamp\n    lineClamp: 3,\n    boxOrient: 'vertical',\n    display: '-webkit-box'\n  },\n  subheader: {\n    display: 'flex',\n    fontFamily: theme.typography.body2.fontFamily,\n    fontSize: theme.typography.caption.fontSize\n  },\n  title: {\n    fontFamily: theme.typography.subtitle2.fontFamily,\n    fontSize: theme.typography.subtitle2.fontSize,\n    fontWeight: theme.typography.fontWeightBold,\n    wordBreak: 'break-word',\n    maxWidth: '100%',\n    marginBottom: theme.spacing()\n  },\n  enabledContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    width: 'auto'\n  },\n  enabled: {\n    color: theme.palette.success.main,\n    '& $enabledIcon': {\n      backgroundColor: theme.palette.success.main\n    }\n  },\n  disabled: {\n    '& $enabledIcon': {\n      backgroundColor: theme.palette.text.disabled\n    }\n  },\n  enabledIcon: {\n    width: theme.spacing(1.5),\n    height: theme.spacing(1.5),\n    borderRadius: 99999,\n    marginRight: theme.spacing()\n  },\n  ssgServiceType: {\n    fontWeight: theme.typography.fontWeightBold\n  },\n  divider: {\n    marginLeft: theme.spacing(),\n    marginRight: theme.spacing(),\n    minHeight: theme.spacing(2)\n  },\n  contentDivider: {\n    width: '100%',\n    marginBottom: theme.spacing(),\n    marginTop: 0\n  },\n  stats: {\n    marginTop: 'auto'\n  },\n  tags: {\n    minHeight: theme.spacing(4),\n    marginBottom: theme.spacing(1)\n  },\n  tag: {\n    borderRadius: theme.spacing(0.5),\n    fontWeight: theme.typography.fontWeightBold,\n    '& + &': {\n      marginLeft: theme.spacing(0.5)\n    }\n  }\n}));\nexport const ApiCard = ({\n  basePath,\n  record\n}) => {\n  const classes = useStyles();\n  const translate = useTranslate();\n  const formattedDate = record ? format(record.modifyTs, 'P') : '';\n  return React.createElement(Card, {\n    className: classes.root,\n    component: Link,\n    to: linkToRecord(basePath, record && record.id, 'show')\n  }, React.createElement(ApiCardHeader, {\n    className: classes.header,\n    title: React.createElement(Tooltip, {\n      title: record.name\n    }, React.createElement(Typography, {\n      variant: \"h5\",\n      component: \"span\",\n      display: \"block\",\n      className: classes.title,\n      noWrap: true\n    }, record.name)),\n    disableTypography: true,\n    subheader: React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes.subheader\n    }, React.createElement(\"div\", {\n      className: classNames(classes.enabledContainer, {\n        [classes.enabled]: record.portalStatus === 'ENABLED',\n        [classes.disabled]: record.portalStatus !== 'ENABLED'\n      })\n    }, React.createElement(\"div\", {\n      className: classes.enabledIcon\n    }), React.createElement(Typography, {\n      variant: \"caption\"\n    }, translate(`resources.apis.portalStatus.${record.portalStatus.toLowerCase()}`))), React.createElement(Divider, {\n      orientation: \"vertical\",\n      className: classes.divider\n    }), React.createElement(Typography, {\n      variant: \"caption\",\n      color: \"textSecondary\",\n      className: classes.ssgServiceType\n    }, record.ssgServiceType), React.createElement(Divider, {\n      orientation: \"vertical\",\n      className: classes.divider\n    }), React.createElement(Tooltip, {\n      title: record.version\n    }, React.createElement(Typography, {\n      variant: \"caption\",\n      color: \"textSecondary\",\n      noWrap: true\n    }, translate('resources.apis.list.cards.fields.version', {\n      version: record.version\n    })))))\n  }), React.createElement(CardContent, {\n    className: classes.content\n  }, React.createElement(Tooltip, {\n    title: record.description || ''\n  }, React.createElement(MarkdownView, {\n    className: classes.description,\n    value: record.description\n  }))), React.createElement(CardActions, {\n    className: classes.footer\n  }, React.createElement(Divider, {\n    variant: \"middle\",\n    className: classes.contentDivider\n  }), React.createElement(Grid, {\n    container: true,\n    alignItems: \"center\",\n    className: classes.tags\n  }, React.createElement(TagsField, {\n    record: record,\n    source: \"tags\",\n    className: classes.tag\n  })), React.createElement(Grid, {\n    container: true,\n    alignItems: \"center\",\n    className: classes.stats\n  }, React.createElement(Grid, {\n    item: true\n  }, React.createElement(Stats, {\n    icon: React.createElement(AppsIcon, null),\n    title: translate('resources.apis.list.cards.fields.applications_long', {\n      smart_count: record.applicationUsage || 0\n    })\n  }, React.createElement(StatsText, null, translate('resources.apis.list.cards.fields.applications', {\n    smart_count: record.applicationUsage || 0\n  })))), React.createElement(Grid, {\n    item: true\n  }, React.createElement(Stats, {\n    icon: React.createElement(TimeIcon, null),\n    title: translate('resources.apis.list.cards.fields.averageLatency_long', {\n      smart_count: record.averageLatency || 0\n    })\n  }, React.createElement(StatsText, null, translate('resources.apis.list.cards.fields.averageLatency', {\n    ms: record.averageLatency || 0\n  })))), React.createElement(Grid, {\n    item: true\n  }, React.createElement(Stats, {\n    icon: React.createElement(EventIcon, null),\n    title: translate('resources.apis.list.cards.fields.updated', {\n      date: formattedDate\n    })\n  }, React.createElement(StatsText, null, formattedDate))))));\n};\nexport const ApiCardHeader = props => {\n  const classes = useApiCardHeaderStyles(props);\n  return React.createElement(CardHeader, Object.assign({}, props, {\n    classes: classes\n  }));\n};\nconst useApiCardHeaderStyles = makeStyles({\n  content: {\n    minWidth: '0%'\n  }\n});","map":null,"metadata":{},"sourceType":"module"}