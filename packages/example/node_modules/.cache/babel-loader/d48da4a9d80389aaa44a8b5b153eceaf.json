{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { Labeled, InputHelperText, useInput } from 'react-admin';\nimport classNames from 'classnames';\nimport { makeStyles } from '@material-ui/core';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { MarkdownEditor, markdownRenderer as defaultMarkdownRenderer } from './';\nconst useStyles = makeStyles({\n  editor: {\n    '& .rc-md-editor': {\n      width: '100%',\n      height: '40vh'\n    }\n  }\n});\nexport const MarkdownInput = _a => {\n  var _a$markdownRenderer = _a.markdownRenderer,\n      markdownRenderer = _a$markdownRenderer === void 0 ? defaultMarkdownRenderer : _a$markdownRenderer,\n      _a$options = _a.options,\n      options = _a$options === void 0 ? {} : _a$options,\n      helperText = _a.helperText,\n      formClassName = _a.formClassName,\n      className = _a.className,\n      rest = __rest(_a, [\"markdownRenderer\", \"options\", \"helperText\", \"formClassName\", \"className\"]);\n\n  const classes = useStyles(rest);\n\n  const _useInput = useInput(Object.assign({}, rest)),\n        _useInput$input = _useInput.input,\n        onChange = _useInput$input.onChange,\n        value = _useInput$input.value,\n        name = _useInput$input.name,\n        _useInput$meta = _useInput.meta,\n        error = _useInput$meta.error,\n        touched = _useInput$meta.touched;\n\n  return React.createElement(Labeled, Object.assign({\n    className: classNames(formClassName, className)\n  }, rest, {\n    id: \"textarea\"\n  }), React.createElement(\"div\", {\n    className: classes.editor\n  }, React.createElement(MarkdownEditor, {\n    name: name,\n    value: value,\n    markdownRenderer: markdownRenderer,\n    options: options,\n    onChange: onChange\n  }), React.createElement(FormHelperText, {\n    error: !!error,\n    variant: \"filled\",\n    margin: \"dense\"\n  }, React.createElement(InputHelperText, {\n    touched: touched,\n    error: error,\n    helperText: helperText\n  }))));\n};","map":null,"metadata":{},"sourceType":"module"}