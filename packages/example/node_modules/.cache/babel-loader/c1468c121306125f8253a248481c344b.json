{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\nvar basePath = '/api-management/1.0/apis';\nvar adminBasePath = '/api-management/internal';\nvar SearchFields = ['name', 'description'];\nexport var apisDataProvider = function apisDataProvider(apiUrl, adminUrl) {\n  return {\n    getList: function getList(_ref) {\n      var filter, pagination, sort, url, _ref2, json;\n\n      return _regeneratorRuntime.async(function getList$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              filter = _ref.filter, pagination = _ref.pagination, sort = _ref.sort;\n              url = \"\".concat(apiUrl).concat(basePath, \"?\").concat(stringify(Object.assign(Object.assign({}, getFilter(filter)), {\n                page: pagination.page - 1,\n                size: pagination.perPage,\n                sort: \"\".concat(sort.field, \",\").concat(sort.order)\n              })));\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                credentials: 'include'\n              }));\n\n            case 4:\n              _ref2 = _context.sent;\n              json = _ref2.json;\n              return _context.abrupt(\"return\", {\n                data: json.results.map(function (_a) {\n                  var uuid = _a.uuid,\n                      item = __rest(_a, [\"uuid\"]);\n\n                  return Object.assign(Object.assign({}, item), {\n                    id: uuid\n                  });\n                }) || [],\n                total: json.totalElements || 0\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    },\n    getOne: function getOne(_ref3) {\n      var id, url, _a, uuid, data;\n\n      return _regeneratorRuntime.async(function getOne$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              id = _ref3.id;\n              url = \"\".concat(apiUrl).concat(basePath, \"/\").concat(id);\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                credentials: 'include'\n              }));\n\n            case 4:\n              _a = _context2.sent.json;\n              uuid = _a.uuid;\n              data = __rest(_a, [\"uuid\"]);\n              return _context2.abrupt(\"return\", {\n                data: Object.assign(Object.assign({}, data), {\n                  id: uuid\n                })\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    },\n    getPermissions: function getPermissions(_ref4) {\n      var id, url, _ref5, data;\n\n      return _regeneratorRuntime.async(function getPermissions$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              id = _ref4.id;\n              url = \"\".concat(adminUrl).concat(adminBasePath, \"/permissions/apis/\").concat(id, \"/permitted\");\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url, {\n                credentials: 'include'\n              }));\n\n            case 4:\n              _ref5 = _context3.sent;\n              data = _ref5.json;\n              return _context3.abrupt(\"return\", {\n                data: Object.assign(Object.assign({}, data), {\n                  id: id\n                })\n              });\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  };\n};\nexport var getFilter = function getFilter(_a) {\n  var searchFields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SearchFields;\n\n  var q = _a.q,\n      filters = __rest(_a, [\"q\"]);\n\n  var result = filters;\n\n  if (!q) {\n    return filters;\n  } // The API does not support the `q` field for fulltext search.\n  // Instead, we must add a filter for each searchable field supported by this resource\n\n\n  if (!searchFields || searchFields.length === 0) {\n    return result;\n  }\n\n  return searchFields.reduce(function (acc, field) {\n    acc[field] = q;\n    return acc;\n  }, Object.assign({}, filters));\n};","map":null,"metadata":{},"sourceType":"module"}