{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport JSEncrypt from 'jsencrypt';\nimport { useApiHub } from '../ApiHubContext';\nexport var defaultEncrypt = function defaultEncrypt(publicKey, data) {\n  var encrypter = new JSEncrypt();\n  encrypter.setPublicKey(publicKey);\n  return Promise.resolve(encrypter.encrypt(data));\n};\n/**\n * A hook which will fetch the API public key and provide a function to encrypt data.\n * @param {*} encrypt The function to encrypt data.\n * It receives the public key as its first parameter and the dat to encrypt next.\n * It returns a promise resolving to the encrypted data.\n * @returns A tupple with the public key first and the encrypt function next.\n * @example\n *\n * const [publicKey, encrypt] = usePasswordEncryption();\n */\n\nexport var usePasswordEncryption = function usePasswordEncryption() {\n  var encrypt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultEncrypt;\n\n  var _useApiHub = useApiHub(),\n      urlWithTenant = _useApiHub.urlWithTenant;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      publicKey = _useState2[0],\n      setPublicKey = _useState2[1];\n\n  useEffect(function () {\n    fetchPublicKey(urlWithTenant).then(setPublicKey).catch(console.error);\n  }, [urlWithTenant]);\n\n  var encryptData = function encryptData(data) {\n    var encryptedData;\n    return _regeneratorRuntime.async(function encryptData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (publicKey) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", data);\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(encrypt(publicKey, data));\n\n          case 4:\n            encryptedData = _context.sent;\n            return _context.abrupt(\"return\", encryptedData);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  return [publicKey, encryptData];\n};\n\nvar fetchPublicKey = function fetchPublicKey(apiBaseUrl) {\n  var response, data;\n  return _regeneratorRuntime.async(function fetchPublicKey$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(apiBaseUrl, \"/authenticate/getPublicKey\")));\n\n        case 2:\n          response = _context2.sent;\n\n          if (!(response.status < 200 || response.status >= 300)) {\n            _context2.next = 5;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", undefined);\n\n        case 5:\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", data.publicKey);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}