{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { credentialsAuthProvider } from './credentialsAuthProvider';\nconst AUTH_PROVIDER_LOGIN_SCHEME = 'auth-login-scheme';\nexport const authProvider = (baseUrl, tenantName) => {\n  const adminUrl = `${baseUrl}/admin`;\n  const apiUrl = `${baseUrl}/api/${tenantName}`;\n  const providers = {\n    credentials: credentialsAuthProvider(apiUrl, adminUrl)\n  };\n  let schemeUsedForLogin = null;\n\n  const getSchemeUsedForLogin = () => {\n    if (!schemeUsedForLogin) {\n      schemeUsedForLogin = localStorage.getItem(AUTH_PROVIDER_LOGIN_SCHEME);\n    }\n\n    return schemeUsedForLogin;\n  };\n\n  const setSchemeUsedForLogin = scheme => {\n    localStorage.setItem(AUTH_PROVIDER_LOGIN_SCHEME, scheme);\n  };\n\n  const getProviderUsedForLogin = () => {\n    const scheme = getSchemeUsedForLogin();\n    return providers[scheme];\n  };\n\n  return {\n    login: async _a => {\n      var scheme = _a.scheme,\n          params = __rest(_a, [\"scheme\"]);\n\n      setSchemeUsedForLogin(scheme);\n      const authProviderUsedForLogin = getProviderUsedForLogin();\n\n      if (!authProviderUsedForLogin) {\n        throw new Error(`Unknown authentication scheme ${scheme}`);\n      }\n\n      return authProviderUsedForLogin.login(params);\n    },\n    logout: () => {\n      const authProviderUsedForLogin = getProviderUsedForLogin();\n\n      if (authProviderUsedForLogin) {\n        return authProviderUsedForLogin.logout();\n      }\n\n      return Promise.resolve();\n    },\n    checkAuth: () => {\n      const authProviderUsedForLogin = getProviderUsedForLogin();\n\n      if (authProviderUsedForLogin) {\n        return authProviderUsedForLogin.checkAuth();\n      }\n\n      return Promise.resolve();\n    },\n    checkError: error => {\n      const status = error.status;\n\n      if (!status) {\n        // TypeError: Network request failed\n        return Promise.reject(error);\n      }\n\n      switch (error.status) {\n        case 401: // Unauthorized\n\n        case 500:\n          // Internal Server Error\n          return Promise.reject(error);\n\n        default:\n          return Promise.resolve();\n      }\n    },\n    getPermissions: async () => {\n      const authProviderUsedForLogin = getProviderUsedForLogin();\n\n      if (authProviderUsedForLogin) {\n        return authProviderUsedForLogin.getPermissions();\n      }\n\n      return Promise.resolve();\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}