{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useEffect, useState } from 'react';\nimport { useApiHub } from '../../ApiHubContext';\nimport { extractTokenFromUrl } from '../extractTokenFromUrl';\nimport { usePasswordEncryption } from '../usePasswordEncryption';\nexport var fetchAccountData = function fetchAccountData(url, token) {\n  var response;\n  return _regeneratorRuntime.async(function fetchAccountData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(url, \"/admin/accountSetup?token=\").concat(token)));\n\n        case 2:\n          response = _context.sent;\n\n          if (!(response.status < 200 || response.status >= 300)) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error(response.statusText);\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var submitAccountData = function submitAccountData(url, token, data) {\n  var response;\n  return _regeneratorRuntime.async(function submitAccountData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(url, \"/admin/accountSetup?token=\").concat(token), {\n            method: 'put',\n            body: Object.assign({\n              token: token\n            }, data)\n          }));\n\n        case 2:\n          response = _context2.sent;\n\n          if (!(response.status < 200 || response.status >= 300)) {\n            _context2.next = 5;\n            break;\n          }\n\n          throw new Error(response.statusText);\n\n        case 5:\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\nexport var checkUsernameUnicity = function checkUsernameUnicity(url, username) {\n  var response;\n  return _regeneratorRuntime.async(function checkUsernameUnicity$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(url, \"/admin/Portal.svc/UserNameUnique()?Name='\").concat(username, \"'\")));\n\n        case 2:\n          response = _context3.sent;\n\n          if (!(response.status < 200 || response.status >= 300)) {\n            _context3.next = 5;\n            break;\n          }\n\n          throw new Error(response.statusText);\n\n        case 5:\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 7:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n};\n/**\n * This hook extracts the token from the url, fetch the account data and provides\n * a function to set up the account.\n *\n * It returns a tupple containing\n * - the current status of the form (prepare, fill, invalid_request and success)\n * - the account data to initialize the form\n * - a function to submit the new account data\n */\n\nexport var useAccountData = function useAccountData(location) {\n  var _useState = useState('prepare'),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      accountData = _useState4[0],\n      setAccountData = _useState4[1];\n\n  var _useApiHub = useApiHub(),\n      url = _useApiHub.url;\n\n  var token = extractTokenFromUrl(location.hash);\n\n  var _usePasswordEncryptio = usePasswordEncryption(),\n      _usePasswordEncryptio2 = _slicedToArray(_usePasswordEncryptio, 2),\n      publicKey = _usePasswordEncryptio2[0],\n      encrypt = _usePasswordEncryptio2[1];\n\n  useEffect(function () {\n    if (state === 'prepare') {\n      fetchAccountData(url, token).then(function (_a) {\n        var email = _a.email,\n            rest = __rest(_a, [\"email\"]);\n\n        var isVerified = !!email;\n\n        if (isVerified) {\n          setState('fill');\n          setAccountData(Object.assign({\n            email: email\n          }, rest));\n          return;\n        }\n\n        throw Error('Cannot get account setup data');\n      }).catch(function () {\n        setAccountData(null);\n        setState('invalid_request');\n      });\n    }\n  }, [url, token, state, accountData]);\n\n  var handleSubmitAccountData = function handleSubmitAccountData(data) {\n    var finalData = data;\n\n    if (publicKey) {\n      finalData = Object.assign(Object.assign({}, data), {\n        password: encrypt(data.password)\n      });\n    }\n\n    return submitAccountData(url, token, finalData).then(function () {\n      setState('success');\n    });\n  };\n\n  return [state, accountData, handleSubmitAccountData];\n};","map":null,"metadata":{},"sourceType":"module"}