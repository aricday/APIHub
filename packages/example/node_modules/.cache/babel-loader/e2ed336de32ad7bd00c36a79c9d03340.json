{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { theme as defaultTheme } from '../theme';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.default,\n    position: 'fixed',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    padding: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'auto'\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  columns: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(4),\n    [theme.breakpoints.down('sm')]: {\n      padding: theme.spacing(3)\n    },\n    '&:first-child': {\n      minWidth: '250px',\n      maxWidth: '30%',\n      [theme.breakpoints.down('sm')]: {\n        maxWidth: '100%',\n        width: '100%'\n      }\n    },\n    '&:not(:first-child)': {\n      borderStyle: 'solid',\n      borderColor: theme.palette.divider,\n      borderWidth: '0px 0px 0px 1px',\n      marginLeft: theme.spacing(4),\n      maxWidth: `calc(50% - ${theme.spacing(4)}px)`,\n      [theme.breakpoints.down('sm')]: {\n        borderWidth: '1px 0px 0px 0px',\n        marginLeft: '0px',\n        maxWidth: '100%',\n        width: '100%'\n      }\n    },\n    '&:last-child': {\n      flexGrow: 1\n    }\n  }\n})); // This component exists for theming only. Indeed, we must call the useStyles hook AFTER\n// the ThemeProvider has been initialized with the specified theme\n\nconst ThemedAuthenticationLayout = ({\n  children,\n  Header,\n  Content,\n  Footer\n}) => {\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, Header ? React.createElement(Header, null) : null, React.createElement(\"div\", {\n    className: classes.container\n  }, React.createElement(\"div\", {\n    className: classes.columns\n  }, children), Content ? React.createElement(\"div\", {\n    className: classes.columns\n  }, React.createElement(Content, null)) : null), Footer ? React.createElement(Footer, null) : null);\n};\n/**\n * The page displaying the account setup form\n *\n * @param {*} Header A React Component used as the page header\n * @param {*} Content A React Component used to display some content next to the account setup form\n * @param {*} Footer A React Component used as the page footer\n *\n * @example <caption>Simple usage</caption>\n * <AccountSetupPage />\n *\n * const MyApp = props => <Admin accountSetupPage={MyAccountSetupPage} {...props} />\n *\n * @example <caption>With customized parts</caption>\n * const Header = () => <header><h1>My company</h1></header>\n * const Content = () => <section><p>Welcome to My Product.</p></section>\n * const Footer = () => <footer>Copyright Â© 2020 My Company. All Rights Reserved</footer>\n *\n * const AccountSetupPagePage = props => (\n *     <AccountSetupPage\n *         Header={CustomHeader}\n *         Content={CustomContent}\n *         Footer={CustomFooter}\n *         {...props}\n *     />\n * );\n *\n * const MyApp = props => <Admin accountSetupPage={MyAccountSetupPage} {...props} />\n */\n\n\nexport const AuthenticationLayout = _a => {\n  var _a$theme = _a.theme,\n      theme = _a$theme === void 0 ? defaultTheme : _a$theme,\n      props = __rest(_a, [\"theme\"]);\n\n  return React.createElement(ThemeProvider, {\n    theme: createMuiTheme(theme)\n  }, React.createElement(ThemedAuthenticationLayout, Object.assign({}, props)));\n};","map":null,"metadata":{},"sourceType":"module"}