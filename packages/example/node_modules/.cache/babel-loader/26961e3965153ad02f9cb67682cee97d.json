{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\nconst basePath = '/api-management/1.0/applications';\nconst basePath2 = '/api-management/0.1/applications';\nexport const applicationsDataProvider = baseUrl => {\n  return {\n    getManyReference: async ({\n      pagination = {\n        page: 1,\n        perPage: 25\n      },\n      filter: {\n        id\n      }\n    }) => {\n      const url = `${baseUrl}${basePath}?${stringify({\n        apiUuid: id,\n        page: pagination.page - 1,\n        size: pagination.perPage\n      })}`;\n\n      const _ref = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            json = _ref.json;\n\n      return {\n        data: json.results.map(_a => {\n          var uuid = _a.uuid,\n              item = __rest(_a, [\"uuid\"]);\n\n          return Object.assign({\n            id: uuid\n          }, item);\n        }) || [],\n        total: json.totalElements || 0\n      };\n    },\n    getList: async ({\n      filter = {},\n      pagination = {\n        page: 1,\n        perPage: 25\n      },\n      sort = null\n    }) => {\n      const url = `${baseUrl}${basePath}?${stringify(Object.assign(Object.assign(Object.assign({}, filter), {\n        page: pagination.page - 1,\n        size: pagination.perPage\n      }), sort && {\n        sort: `${sort.field},${sort.order}`\n      }))}`;\n\n      const _ref2 = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            json = _ref2.json;\n\n      return {\n        data: json.results.map(_a => {\n          var uuid = _a.uuid,\n              item = __rest(_a, [\"uuid\"]);\n\n          return Object.assign({\n            id: uuid\n          }, item);\n        }) || [],\n        total: json.totalElements || 0\n      };\n    },\n    getOne: async ({\n      id\n    }) => {\n      const url = `${baseUrl}${basePath2}/${id}`;\n\n      const _a = (await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      })).json,\n            uuid = _a.uuid,\n            data = __rest(_a, [\"uuid\"]);\n\n      return {\n        data: Object.assign({\n          id: uuid\n        }, data)\n      };\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}