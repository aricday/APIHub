{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\nimport { useTranslate } from 'ra-core';\nimport { useListDisplay, LIST_DISPLAY_CARDS, LIST_DISPLAY_DATAGRID } from './ListDisplayContext';\nexport var ListDisplayButton = function ListDisplayButton(props) {\n  var _useListDisplay = useListDisplay(),\n      _useListDisplay2 = _slicedToArray(_useListDisplay, 2),\n      display = _useListDisplay2[0],\n      setDisplay = _useListDisplay2[1];\n\n  var handleChange = function handleChange(event, value) {\n    setDisplay(value);\n  };\n\n  return React.createElement(ToggleButtonGroup, Object.assign({\n    exclusive: true,\n    onChange: handleChange,\n    value: display,\n    size: \"small\"\n  }, props), React.createElement(ToggleButtonWithTooltip, {\n    label: \"apihub.actions.view_as_cards\",\n    value: LIST_DISPLAY_CARDS\n  }, React.createElement(ViewModuleIcon, null)), React.createElement(ToggleButtonWithTooltip, {\n    label: \"apihub.actions.view_as_list\",\n    value: LIST_DISPLAY_DATAGRID\n  }, React.createElement(ViewListIcon, null)));\n};\n\nvar ToggleButtonWithTooltip = function ToggleButtonWithTooltip(_a) {\n  var label = _a.label,\n      _a$title = _a.title,\n      title = _a$title === void 0 ? label : _a$title,\n      props = __rest(_a, [\"label\", \"title\"]);\n\n  var translate = useTranslate();\n  var translatedLabel = translate(label, {\n    _: label\n  });\n  var translatedTitle = translate(title, {\n    _: title\n  });\n  return React.createElement(Tooltip, {\n    title: translatedTitle\n  }, React.createElement(ToggleButton, Object.assign({\n    \"aria-label\": translatedLabel\n  }, props)));\n};","map":null,"metadata":{},"sourceType":"module"}