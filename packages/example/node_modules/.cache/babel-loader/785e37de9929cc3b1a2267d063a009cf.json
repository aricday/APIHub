{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Divider from '@material-ui/core/Divider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { HideOnScroll, LoadingIndicator, useLocale } from 'react-admin';\nimport { ApiHubUserMenu } from './ApiHubUserMenu';\nimport { ApiHubLanguageSwitcher } from './ApiHubLanguageSwitcher';\nimport { SidebarButton } from './SidebarButton';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    toolbar: {\n      paddingRight: 24\n    },\n    header: {\n      flex: 1,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      minWidth: '156px'\n    },\n    divider: {\n      alignSelf: 'stretch',\n      backgroundColor: theme.palette.primary.contrastText,\n      height: 'auto',\n      marginBottom: theme.spacing(2),\n      marginLeft: theme.spacing(4),\n      marginRight: theme.spacing(4),\n      marginTop: theme.spacing(2)\n    }\n  };\n}, {\n  name: 'RaAppBar'\n});\n/**\n * The ApiHub AppBar used in the ApiHub Layout.\n *\n * @param {*} props AppBar properties\n */\n\nexport var ApiHubAppBar = function ApiHubAppBar(_a) {\n  var children = _a.children,\n      classesOverride = _a.classes,\n      className = _a.className,\n      languagesMenu = _a.languagesMenu,\n      logo = _a.logo,\n      logout = _a.logout,\n      open = _a.open,\n      sidebarButton = _a.sidebarButton,\n      title = _a.title,\n      userMenu = _a.userMenu,\n      rest = __rest(_a, [\"children\", \"classes\", \"className\", \"languagesMenu\", \"logo\", \"logout\", \"open\", \"sidebarButton\", \"title\", \"userMenu\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n  useLocale(); // Make sure the locale change would rerender the component\n\n  return React.createElement(HideOnScroll, null, React.createElement(AppBar, Object.assign({\n    className: className,\n    color: \"secondary\",\n    elevation: 0\n  }, rest), React.createElement(Toolbar, {\n    disableGutters: true,\n    variant: \"regular\",\n    className: classes.toolbar\n  }, cloneElement(sidebarButton, {\n    open: open\n  }), React.createElement(\"div\", {\n    className: classes.header\n  }, children), React.createElement(LoadingIndicator, null), cloneElement(languagesMenu), React.createElement(Divider, {\n    className: classes.divider,\n    orientation: \"vertical\"\n  }), cloneElement(userMenu, {\n    logout: logout\n  }))));\n};\nApiHubAppBar.defaultProps = {\n  userMenu: React.createElement(ApiHubUserMenu, null),\n  languagesMenu: React.createElement(ApiHubLanguageSwitcher, null),\n  sidebarButton: React.createElement(SidebarButton, null)\n};","map":null,"metadata":{},"sourceType":"module"}