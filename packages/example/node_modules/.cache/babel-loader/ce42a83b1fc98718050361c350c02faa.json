{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { useTranslate } from 'ra-core';\nimport classnames from 'classnames';\nimport get from 'lodash/get';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nconst useAccessFieldStyles = makeStyles(theme => ({\n  root: {\n    borderRadius: theme.spacing(0.5)\n  },\n  enabled: {\n    backgroundColor: theme.palette.success.main\n  }\n}));\nexport const AccessField = _a => {\n  var basePath = _a.basePath,\n      record = _a.record,\n      source = _a.source,\n      translationKey = _a.translationKey,\n      props = __rest(_a, [\"basePath\", \"record\", \"source\", \"translationKey\"]);\n\n  const value = get(record, source);\n  const enabled = value === 'ENABLED';\n  const color = enabled ? 'primary' : 'default';\n  const classes = useAccessFieldStyles();\n  const translate = useTranslate();\n  return React.createElement(Chip, Object.assign({\n    color: color,\n    disabled: !enabled,\n    className: classnames(classes.root, {\n      [classes.enabled]: enabled\n    }),\n    label: translate(`${translationKey}.${value.toLowerCase()}`)\n  }, props));\n};","map":null,"metadata":{},"sourceType":"module"}