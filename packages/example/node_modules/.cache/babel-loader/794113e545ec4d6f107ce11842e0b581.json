{"ast":null,"code":"import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleListItemExpand } from '../actions/listActions';\n/**\n * State-like hook for controlling the expanded state of a list item\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {string|integer} id The record identifier, e.g. 123\n *\n * @returns {Object} Destructure as [expanded, toggleExpanded].\n *\n * @example\n *\n * const [expanded, toggleExpanded] = useExpanded('posts', 123);\n * const expandIcon = expanded ? ExpandLess : ExpandMore;\n * const onExpandClick = () => toggleExpanded();\n */\n\nvar useExpanded = function (resource, id) {\n  var dispatch = useDispatch();\n  var expandedList = useSelector(function (reduxState) {\n    return reduxState.admin.resources[resource] ? reduxState.admin.resources[resource].list.expanded : undefined;\n  });\n  var expanded = expandedList === undefined ? false : expandedList.map(function (el) {\n    return el == id;\n  }).indexOf(true) !== -1; // eslint-disable-line eqeqeq\n\n  var toggleExpanded = useCallback(function () {\n    dispatch(toggleListItemExpand(resource, id));\n  }, [dispatch, resource, id]);\n  return [expanded, toggleExpanded];\n};\n\nexport default useExpanded;","map":null,"metadata":{},"sourceType":"module"}