{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport JSEncrypt from 'jsencrypt';\nimport { useApiHub } from '../ApiHubContext';\nexport const defaultEncrypt = (publicKey, data) => {\n  const encrypter = new JSEncrypt();\n  encrypter.setPublicKey(publicKey);\n  return Promise.resolve(encrypter.encrypt(data));\n};\n/**\n * A hook which will fetch the API public key and provide a function to encrypt data.\n * @param {*} encrypt The function to encrypt data.\n * It receives the public key as its first parameter and the dat to encrypt next.\n * It returns a promise resolving to the encrypted data.\n * @returns A tupple with the public key first and the encrypt function next.\n * @example\n *\n * const [publicKey, encrypt] = usePasswordEncryption();\n */\n\nexport const usePasswordEncryption = (encrypt = defaultEncrypt) => {\n  const _useApiHub = useApiHub(),\n        urlWithTenant = _useApiHub.urlWithTenant;\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        publicKey = _useState2[0],\n        setPublicKey = _useState2[1];\n\n  useEffect(() => {\n    fetchPublicKey(urlWithTenant).then(setPublicKey).catch(console.error);\n  }, [urlWithTenant]);\n\n  const encryptData = async data => {\n    if (!publicKey) {\n      return data;\n    }\n\n    const encryptedData = await encrypt(publicKey, data);\n    return encryptedData;\n  };\n\n  return [publicKey, encryptData];\n};\n\nconst fetchPublicKey = async apiBaseUrl => {\n  const response = await fetch(`${apiBaseUrl}/authenticate/getPublicKey`);\n\n  if (response.status < 200 || response.status >= 300) {\n    return undefined;\n  }\n\n  const data = await response.json();\n  return data.publicKey;\n};","map":null,"metadata":{},"sourceType":"module"}