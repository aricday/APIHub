{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useState, useMemo } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconAccountTree from '@material-ui/icons/AccountTree';\nimport { useMutation, useNotify, useTranslate, CRUD_GET_LIST_SUCCESS, GET_LIST, FETCH_END } from 'ra-core';\nimport flow from 'lodash/flow';\nimport { useDispatch } from 'react-redux';\nimport { DocumentationTree, getChildDocuments, sortByOrdinal } from './DocumentationTree';\nimport { getAllDocumentParents } from './getAllDocumentParents';\nconst useStyles = makeStyles({\n  fullWidth: {\n    width: '100%'\n  }\n});\nexport const FakeRootUuid = '@layer7-fake-root';\nexport const moveDocument = ({\n  document,\n  newParentId,\n  ordinal,\n  allDocuments\n}) => {\n  const newDocuments = Array.from(allDocuments);\n  const updatedDocument = newDocuments.find(doc => doc.id === document.id);\n\n  if (!updatedDocument || !newParentId) {\n    return;\n  }\n\n  const newParent = newDocuments.find(doc => doc.id === newParentId);\n\n  if (!newParent) {\n    return;\n  }\n\n  const newSiblingsWhichMustBeMoved = newDocuments.filter(doc => doc.parentUuid === newParent.uuid && doc.ordinal >= ordinal);\n  newSiblingsWhichMustBeMoved.forEach((doc, index) => {\n    doc.ordinal += 1;\n  });\n  const oldSiblingsWhichMustBeMoved = newDocuments.filter(doc => doc.parentUuid === updatedDocument.parentUuid && doc.ordinal > updatedDocument.ordinal);\n  oldSiblingsWhichMustBeMoved.forEach((doc, index) => {\n    doc.ordinal -= 1;\n  });\n  newDocuments.filter(item => item.parentUuid === FakeRootUuid);\n  updatedDocument.parentUuid = newParent.uuid;\n  updatedDocument.ordinal = ordinal;\n  return newDocuments;\n};\n\nconst cleanupFakeRootUuid = items => items.filter(item => item.id !== FakeRootUuid).reduce((acc, item) => {\n  if (item.parentUuid === FakeRootUuid) {\n    acc.push(Object.assign(Object.assign({}, item), {\n      parentUuid: undefined\n    }));\n    return acc;\n  }\n\n  acc.push(item);\n  return acc;\n}, []);\n\nconst prepareDataForUpdate = items => items.map(_a => {\n  var id = _a.id,\n      children = _a.children,\n      markdown = _a.markdown,\n      item = __rest(_a, [\"id\", \"children\", \"markdown\"]);\n\n  return item;\n});\n\nexport const ChangeParentDocumentButton = _a => {\n  var _a$allDocuments = _a.allDocuments,\n      allDocuments = _a$allDocuments === void 0 ? [] : _a$allDocuments,\n      document = _a.document,\n      entityType = _a.entityType,\n      entityUuid = _a.entityUuid,\n      locale = _a.locale,\n      props = __rest(_a, [\"allDocuments\", \"document\", \"entityType\", \"entityUuid\", \"locale\"]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        open = _useState2[0],\n        setOpen = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newSibling = _useState4[0],\n        setNewSiblings = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        newParentId = _useState6[0],\n        setNewParentId = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        ordinal = _useState8[0],\n        setOrdinal = _useState8[1];\n\n  const classes = useStyles();\n  const translate = useTranslate();\n  const dispatch = useDispatch();\n  const notify = useNotify(); // Here we introduce a fake root item so that users have something\n  // to select in order to move a document to the root\n\n  const treeItems = useMemo(() => [{\n    id: FakeRootUuid,\n    uuid: FakeRootUuid,\n    title: translate('resources.documents.actions.move_as_root_item')\n  }, ...allDocuments.map(doc => !!doc.parentUuid ? doc : Object.assign(Object.assign({}, doc), {\n    parentUuid: FakeRootUuid\n  }))], [allDocuments, translate]);\n  const currentDocumentParents = getAllDocumentParents(document, allDocuments);\n\n  const _useState9 = useState([FakeRootUuid, ...currentDocumentParents.map(parent => parent.id)]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        expanded = _useState10[0],\n        setExpanded = _useState10[1];\n\n  const _useMutation = useMutation({\n    type: 'updateTree',\n    resource: 'documents'\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        mutate = _useMutation2[0],\n        loading = _useMutation2[1].loading;\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSave = () => {\n    const newDocuments = flow([moveDocument, cleanupFakeRootUuid])({\n      document,\n      newParentId,\n      ordinal,\n      allDocuments: treeItems\n    });\n    mutate({\n      payload: {\n        entityType,\n        entityUuid,\n        locale,\n        data: prepareDataForUpdate(newDocuments)\n      }\n    }, {\n      undoable: true,\n      onSuccess: () => {\n        setOpen(false); // Fake a getList fetch success to optimistically update\n        // the treeview, avoiding a full view refresh\n\n        dispatch({\n          type: CRUD_GET_LIST_SUCCESS,\n          payload: {\n            data: newDocuments,\n            total: newDocuments.length\n          },\n          meta: {\n            resource: 'documents',\n            fetchResponse: GET_LIST,\n            fetchStatus: FETCH_END\n          }\n        });\n        notify('resources.documents.notifications.tree_updated_success', 'info', undefined, true);\n      },\n      onFailure: () => {\n        notify('resources.documents.notifications.tree_updated_error', 'warning'); // Fake a getList fetch success to optimistically update\n        // the treeview, avoiding a full view refresh\n        // Here we pass the original documents\n\n        dispatch({\n          type: CRUD_GET_LIST_SUCCESS,\n          payload: {\n            data: allDocuments,\n            total: allDocuments.length\n          },\n          meta: {\n            resource: 'documents',\n            fetchResponse: GET_LIST,\n            fetchStatus: FETCH_END\n          }\n        });\n      }\n    });\n  };\n\n  const handleNewParentSelected = node => {\n    setNewParentId(node.id);\n    const newParent = treeItems.find(doc => doc.id === node.id);\n\n    if (!newParent) {\n      setOrdinal(0);\n      setNewSiblings([]);\n      return;\n    }\n\n    const siblings = getChildDocuments(newParent, treeItems, sortByOrdinal);\n\n    if (siblings.length === 0) {\n      setOrdinal(0);\n      setNewSiblings([]);\n      return;\n    }\n\n    setNewSiblings(siblings);\n  };\n\n  const handleOrdinalChange = event => setOrdinal(event.target.value);\n\n  return React.createElement(React.Fragment, null, React.createElement(Button, Object.assign({\n    onClick: handleClick,\n    \"aria-label\": translate('resources.documents.actions.change_document_parent_button'),\n    startIcon: React.createElement(IconAccountTree, null)\n  }, props), translate('resources.documents.actions.change_document_parent_button')), React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\"\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\"\n  }, translate('resources.documents.actions.change_document_parent_button')), React.createElement(DialogContent, null, React.createElement(DocumentationTree, {\n    items: treeItems.filter(item => item.id !== document.id),\n    selectedDocumentId: newParentId,\n    onDocumentSelected: handleNewParentSelected,\n    expanded: expanded,\n    onExpandedChange: setExpanded\n  }), React.createElement(\"hr\", null), newSibling.length > 0 ? React.createElement(FormControl, {\n    className: classes.fullWidth\n  }, React.createElement(InputLabel, {\n    id: \"ordinal-select-label\"\n  }, translate('resources.documents.fields.ordinal')), React.createElement(Select, {\n    labelId: \"ordinal-select-label\",\n    key: newParentId,\n    onChange: handleOrdinalChange,\n    value: ordinal,\n    className: classes.fullWidth\n  }, React.createElement(MenuItem, {\n    value: 0\n  }, translate('resources.documents.actions.move_as_first_child')), newSibling.map(child => React.createElement(MenuItem, {\n    key: child.id,\n    value: child.ordinal + 1\n  }, translate('resources.documents.actions.move_after_document', {\n    title: child.title\n  }))))) : null), React.createElement(DialogActions, null, React.createElement(Button, {\n    onClick: handleClose,\n    disabled: loading || !newParentId,\n    color: \"primary\"\n  }, translate('ra.action.cancel')), React.createElement(Button, {\n    onClick: handleSave,\n    disabled: loading,\n    color: \"primary\"\n  }, translate('ra.action.save')))));\n};","map":null,"metadata":{},"sourceType":"module"}