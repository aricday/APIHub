{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, Children, cloneElement, useEffect, forwardRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport SortIcon from '@material-ui/icons/Sort';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { changeListParams, useTranslate } from 'ra-core';\nimport { useHistory } from 'react-router-dom';\nimport { stringify } from 'query-string';\n/**\n * A sort button to use on a list which does not display a datagrid.\n *\n * @param {String} resource The resource on which to apply the sort\n * @param {Object} currentSort The current sort\n * @param {Object} currentSort.field The currently sorted field (eg: \"name\")\n * @param {Object} currentSort.order The current sort order (eg: \"ASC\")\n *\n * @example <caption>Usage inside a custom toolbar for a <List></caption>\n * import { TopToolbar } from 'react-admin';\n *\n * const ApiListActions = ({\n *     currentSort, // injected by react-admin\n *     resource, // injected by react-admin\n *     ...props\n * }) => {\n *     return (\n *         <TopToolbar\n *             className={classnames(classes.root, className)}\n *             {...sanitizeListRestProps(props)}\n *         >\n *             <SortButton resource={resource} currentSort={currentSort}>\n *                 <SortMenuItem\n *                     label=\"resources.apis.list.sort.name.asc\" // Will be translated\n *                     sort={{ field: 'name', order: 'ASC' }}\n *                 />\n *                 <SortMenuItem\n *                     label=\"resources.apis.list.sort.name.desc\" // Will be translated\n *                     sort={{ field: 'name', order: 'DESC' }}\n *                 />\n *             </SortButton>\n *         </TopToolbar>\n *     );\n * };\n */\n\nexport var SortButton = function SortButton(_ref) {\n  var children = _ref.children,\n      resource = _ref.resource,\n      currentSort = _ref.currentSort;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentSortLabel = _useState2[0],\n      setCurrentSortLabel = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      anchorEl = _useState4[0],\n      setAnchorEl = _useState4[1];\n\n  var translate = useTranslate();\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var classes = useStyles();\n  var listParams = useSelector(function (reduxState) {\n    return reduxState.admin.resources[resource] ? reduxState.admin.resources[resource].list.params : {};\n  }, shallowEqual);\n\n  var handleClick = function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  };\n\n  var handleClose = function handleClose() {\n    setAnchorEl(null);\n  };\n\n  var handleMenuItemClick = function handleMenuItemClick(event, sortData) {\n    history.push({\n      search: \"?\".concat(stringify(Object.assign(Object.assign({}, listParams), {\n        filter: JSON.stringify(listParams.filter),\n        sort: sortData.sort.field,\n        order: sortData.sort.order\n      })))\n    });\n    dispatch(changeListParams(resource, Object.assign(Object.assign({}, listParams), {\n      sort: sortData.sort.field,\n      order: sortData.sort.order\n    })));\n    handleClose();\n  };\n\n  useEffect(function () {\n    var childrenAsArray = Children.toArray(children);\n\n    if (childrenAsArray.length === 0) {\n      return;\n    }\n\n    var selectedChild = childrenAsArray.find(function (child) {\n      return child.props.sort.field === currentSort.field && child.props.sort.order === currentSort.order;\n    });\n\n    if (!selectedChild) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('The current sort parameters do not match the provided children');\n      }\n\n      selectedChild = childrenAsArray[0];\n    }\n\n    setCurrentSortLabel(translate(selectedChild.props.label));\n  }, [children, currentSort, translate]);\n  return currentSortLabel ? React.createElement(React.Fragment, null, React.createElement(Button, {\n    \"aria-controls\": \"sort-menu\",\n    \"aria-label\": currentSortLabel,\n    \"aria-haspopup\": \"true\",\n    onClick: handleClick,\n    startIcon: React.createElement(SortIcon, null),\n    endIcon: React.createElement(ArrowDropDownIcon, null),\n    className: classes.root,\n    size: \"small\",\n    color: \"primary\"\n  }, currentSortLabel), React.createElement(Menu, {\n    id: \"sort-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose\n  }, Children.map(children, function (child) {\n    return cloneElement(child, Object.assign({\n      onClick: handleMenuItemClick\n    }, child.props));\n  }))) : null;\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      marginLeft: theme.spacing()\n    }\n  };\n});\nexport var SortMenuItem = forwardRef(function (_ref2, ref) {\n  var label = _ref2.label,\n      sort = _ref2.sort,\n      onClick = _ref2.onClick;\n  var translate = useTranslate();\n\n  var handleClick = function handleClick(event) {\n    onClick(event, {\n      label: label,\n      sort: sort\n    });\n  };\n\n  return React.createElement(MenuItem, {\n    ref: ref,\n    onClick: handleClick\n  }, translate(label, {\n    _: label\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}