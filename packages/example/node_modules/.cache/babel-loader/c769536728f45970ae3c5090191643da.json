{"ast":null,"code":"import { apisDataProvider } from './apis';\nimport { applicationsDataProvider } from './applications';\nimport { assetsDataProvider } from './assets';\nimport { specsDataProvider } from './specs';\nimport { tagsDataProvider } from './tags';\nimport { documentsDataProvider } from './documents';\nimport { userContextsDataProvider } from './userContexts';\nexport const dataProvider = (baseUrl, tenantName) => {\n  const adminUrl = `${baseUrl}/admin`;\n  const apiUrl = `${baseUrl}/api/${tenantName}`;\n  const resourcesMap = {\n    apis: apisDataProvider(apiUrl, adminUrl),\n    applications: applicationsDataProvider(apiUrl),\n    assets: assetsDataProvider(apiUrl),\n    tags: tagsDataProvider(apiUrl),\n    specs: specsDataProvider(apiUrl),\n    documents: documentsDataProvider(apiUrl),\n    userContexts: userContextsDataProvider(apiUrl)\n  };\n  const proxy = new Proxy(fakeDataProvider, {\n    get: (target, name) => {\n      return (resource, params) => {\n        let resourceDataProvider = resourcesMap[resource];\n\n        if (!resourceDataProvider) {\n          throw new Error(`Invalid resource \"${resource}\"`);\n        }\n\n        if (!resourceDataProvider[name]) {\n          throw new Error(`Invalid action \"${name}\" for resource \"${resource}\"`);\n        }\n\n        return resourceDataProvider[name](params);\n      };\n    }\n  });\n  return proxy;\n}; // Only used to configure the proxy\n\nconst fakeDataProvider = {\n  create: () => Promise.resolve(null),\n  delete: () => Promise.resolve(null),\n  deleteMany: () => Promise.resolve(null),\n  getList: () => Promise.resolve(null),\n  getMany: () => Promise.resolve(null),\n  getManyReference: () => Promise.resolve(null),\n  getOne: () => Promise.resolve(null),\n  update: () => Promise.resolve(null),\n  updateMany: () => Promise.resolve(null)\n};","map":null,"metadata":{},"sourceType":"module"}