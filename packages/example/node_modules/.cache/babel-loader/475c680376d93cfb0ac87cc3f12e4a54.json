{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useMemo } from 'react';\nimport { SimpleForm, FormDataConsumer, TextInput, useCreate, useNotify, useRefresh, required, CRUD_CREATE } from 'react-admin';\nimport { makeStyles } from '@material-ui/core';\nimport { useForm } from 'react-final-form';\nimport slugify from 'slugify';\nimport { buildDocumentId } from '../../dataProvider/documents';\nimport { MarkdownInput } from '../../ui';\nimport { DocumentFormToolbar } from './DocumentFormToolbar';\nvar URI_ALLOWED_STRING = /^[a-zA-Z0-9_-]*$/;\nvar URI_NOT_ALLOWED_CHARACTERS = /[^a-zA-Z0-9_-\\s]/g;\nexport var checkSpecialCharacters = function checkSpecialCharacters() {\n  return function (value) {\n    if (URI_ALLOWED_STRING.test(value)) {\n      return;\n    }\n\n    return 'resources.apis.documentation.validation.error_no_special_characters';\n  };\n};\nexport var checkUnicity = function checkUnicity(navtitles) {\n  return function (value) {\n    if (!navtitles.map(function (navtitle) {\n      return navtitle.toLowerCase();\n    }).includes(value.toLowerCase())) {\n      return;\n    }\n\n    return 'resources.apis.documentation.validation.error_navtitle_not_unique';\n  };\n};\n\nvar replaceNotAllowedCharacters = function replaceNotAllowedCharacters(text) {\n  var replacement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n  return text.replace(URI_NOT_ALLOWED_CHARACTERS, replacement);\n};\n\nexport var slugifyURI = function slugifyURI(uri) {\n  var cleanedURI = replaceNotAllowedCharacters(uri, '_');\n  return slugify(cleanedURI);\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    title: {\n      display: 'inline-block',\n      width: '256px'\n    },\n    navtitle: {\n      display: 'inline-block',\n      marginLeft: theme.spacing(4),\n      width: '256px'\n    },\n    markdown: {\n      width: '100%'\n    }\n  };\n});\nexport var DocumentForm = function DocumentForm(_ref) {\n  var _ref$document = _ref.document,\n      document = _ref$document === void 0 ? {} : _ref$document,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? null : _ref$error,\n      _ref$allDocuments = _ref.allDocuments,\n      allDocuments = _ref$allDocuments === void 0 ? [] : _ref$allDocuments,\n      _ref$onSave = _ref.onSave,\n      onSave = _ref$onSave === void 0 ? function () {} : _ref$onSave,\n      _ref$onCancel = _ref.onCancel,\n      onCancel = _ref$onCancel === void 0 ? function () {} : _ref$onCancel;\n  var classes = useStyles();\n  var navtitles = useMemo(function () {\n    return Object.values(allDocuments).map(function (item) {\n      return item.navtitle;\n    });\n  }, [allDocuments]);\n  return React.createElement(SimpleForm, {\n    resource: \"documents\",\n    record: document,\n    toolbar: React.createElement(DocumentFormToolbar, {\n      loading: loading,\n      error: error,\n      onCancel: onCancel\n    }),\n    save: onSave\n  }, React.createElement(FormDataConsumer, null, function () {\n    // eslint-disable-next-line\n    var form = useForm();\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      resource: \"documents\",\n      source: \"title\",\n      className: classes.title,\n      onChange: function onChange(event) {\n        var navtitleFieldState = form.getFieldState('navtitle');\n\n        if (navtitleFieldState.modified && navtitleFieldState.touched) {\n          return;\n        }\n\n        var newNavtitle = slugifyURI(event.target.value);\n        form.change('navtitle', newNavtitle);\n      },\n      validate: required()\n    }), React.createElement(TextInput, {\n      resource: \"documents\",\n      source: \"navtitle\",\n      className: classes.navtitle,\n      validate: [required(), checkUnicity(navtitles), checkSpecialCharacters()]\n    }));\n  }), React.createElement(MarkdownInput, {\n    source: \"markdown\",\n    formClassName: classes.markdown,\n    validate: required(),\n    isRequired: true,\n    fullWidth: true\n  }));\n};\nexport var DocumentCreateForm = function DocumentCreateForm(_ref2) {\n  var document = _ref2.document,\n      entityType = _ref2.entityType,\n      entityUuid = _ref2.entityUuid,\n      _ref2$allDocuments = _ref2.allDocuments,\n      allDocuments = _ref2$allDocuments === void 0 ? [] : _ref2$allDocuments,\n      _ref2$onSaved = _ref2.onSaved,\n      onSaved = _ref2$onSaved === void 0 ? function () {} : _ref2$onSaved,\n      _ref2$onCancel = _ref2.onCancel,\n      onCancel = _ref2$onCancel === void 0 ? function () {} : _ref2$onCancel;\n  var notify = useNotify();\n  var refresh = useRefresh();\n\n  var _useCreate = useCreate('documents'),\n      _useCreate2 = _slicedToArray(_useCreate, 2),\n      create = _useCreate2[0],\n      _useCreate2$ = _useCreate2[1],\n      loading = _useCreate2$.loading,\n      error = _useCreate2$.error;\n\n  var handleSave = function handleSave(newDocument) {\n    var documentId = buildDocumentId(entityType, entityUuid, newDocument.navtitle, newDocument.locale);\n    create({\n      payload: {\n        data: Object.assign(Object.assign({}, newDocument), {\n          id: documentId\n        })\n      }\n    }, {\n      action: CRUD_CREATE,\n      onSuccess: function onSuccess(_ref3) {\n        var data = _ref3.data;\n        notify('resources.documents.notifications.create_success');\n        refresh();\n        onSaved(data);\n      },\n      onFailure: function onFailure() {\n        notify('resources.documents.notifications.create_error');\n      }\n    });\n  };\n\n  return React.createElement(DocumentForm, {\n    document: document,\n    loading: loading,\n    error: error,\n    allDocuments: allDocuments,\n    onSave: handleSave,\n    onCancel: onCancel\n  });\n};","map":null,"metadata":{},"sourceType":"module"}