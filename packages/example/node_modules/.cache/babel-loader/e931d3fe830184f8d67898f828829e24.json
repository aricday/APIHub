{"ast":null,"code":"import { fetchUtils } from 'ra-core'; // Fake id used because we can only access the current user context\n\nexport const CurrentUserId = 'layer7@currentUser';\nexport const userContextsDataProvider = baseUrl => {\n  const basePath = `${baseUrl}/userContexts`;\n  return {\n    getOne: async () => {\n      const _ref = await fetchUtils.fetchJson(basePath, {\n        credentials: 'include'\n      }),\n            data = _ref.json;\n\n      if (!data.userContexts || !data.userContexts.length > 0) {\n        throw new Error('Invalid user context');\n      }\n\n      const userContext = data.userContexts[0];\n      return {\n        data: Object.assign(Object.assign({}, userContext), {\n          id: CurrentUserId\n        })\n      };\n    },\n    update: async ({\n      id,\n      data\n    }) => {\n      // The update method should only be used to update the user details\n      const _data$userDetails = data.userDetails,\n            firstName = _data$userDetails.firstName,\n            lastName = _data$userDetails.lastName,\n            email = _data$userDetails.email,\n            username = _data$userDetails.username,\n            uuid = _data$userDetails.uuid;\n      await fetchUtils.fetchJson(basePath, {\n        credentials: 'include',\n        method: 'PUT',\n        body: JSON.stringify({\n          firstName,\n          lastName,\n          email,\n          username,\n          uuid\n        })\n      });\n      return {\n        data: Object.assign({\n          id\n        }, data)\n      };\n    },\n    updateActiveOrganization: async ({\n      id,\n      data\n    }) => {\n      // The updateActiveOrganization method should only be used to update the user active organization\n      await fetchUtils.fetchJson(basePath, {\n        credentials: 'include',\n        method: 'PUT',\n        body: JSON.stringify({\n          orgUuid: data.activeOrgUuid\n        })\n      });\n      return {\n        data: Object.assign({\n          id\n        }, data)\n      };\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}