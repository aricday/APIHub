{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { fetchUtils } from 'ra-core';\nimport { stringify } from 'query-string';\nconst basePath = '/api-management/1.0/apis';\nconst adminBasePath = '/api-management/internal';\nconst SearchFields = ['name', 'description'];\nexport const apisDataProvider = (apiUrl, adminUrl) => {\n  return {\n    getList: async ({\n      filter,\n      pagination,\n      sort\n    }) => {\n      const url = `${apiUrl}${basePath}?${stringify(Object.assign(Object.assign({}, getFilter(filter)), {\n        page: pagination.page - 1,\n        size: pagination.perPage,\n        sort: `${sort.field},${sort.order}`\n      }))}`;\n\n      const _ref = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            json = _ref.json;\n\n      return {\n        data: json.results.map(_a => {\n          var uuid = _a.uuid,\n              item = __rest(_a, [\"uuid\"]);\n\n          return Object.assign(Object.assign({}, item), {\n            id: uuid\n          });\n        }) || [],\n        total: json.totalElements || 0\n      };\n    },\n    getOne: async ({\n      id\n    }) => {\n      const url = `${apiUrl}${basePath}/${id}`;\n\n      const _a = (await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      })).json,\n            uuid = _a.uuid,\n            data = __rest(_a, [\"uuid\"]);\n\n      return {\n        data: Object.assign(Object.assign({}, data), {\n          id: uuid\n        })\n      };\n    },\n    getPermissions: async ({\n      id\n    }) => {\n      const url = `${adminUrl}${adminBasePath}/permissions/apis/${id}/permitted`;\n\n      const _ref2 = await fetchUtils.fetchJson(url, {\n        credentials: 'include'\n      }),\n            data = _ref2.json;\n\n      return {\n        data: Object.assign(Object.assign({}, data), {\n          id\n        })\n      };\n    }\n  };\n};\nexport const getFilter = (_a, searchFields = SearchFields) => {\n  var q = _a.q,\n      filters = __rest(_a, [\"q\"]);\n\n  let result = filters;\n\n  if (!q) {\n    return filters;\n  } // The API does not support the `q` field for fulltext search.\n  // Instead, we must add a filter for each searchable field supported by this resource\n\n\n  if (!searchFields || searchFields.length === 0) {\n    return result;\n  }\n\n  return searchFields.reduce((acc, field) => {\n    acc[field] = q;\n    return acc;\n  }, Object.assign({}, filters));\n};","map":null,"metadata":{},"sourceType":"module"}