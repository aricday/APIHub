{"ast":null,"code":"import _toConsumableArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef, useMemo, useState } from 'react';\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport { makeStyles } from '@material-ui/core';\nimport get from 'lodash/get';\nimport { useTranslate } from 'ra-core';\nexport var DocumentationTree = function DocumentationTree(_ref) {\n  var items = _ref.items,\n      onDocumentSelected = _ref.onDocumentSelected,\n      selectedDocumentId = _ref.selectedDocumentId,\n      controlledExpanded = _ref.expanded,\n      onExpandedChange = _ref.onExpandedChange;\n\n  var _useState = useState(items.filter(function (item) {\n    return !item.parentUuid;\n  }).map(function (item) {\n    return item.id;\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      uncontrolledExpanded = _useState2[0],\n      setExpanded = _useState2[1];\n\n  var expanded = controlledExpanded || uncontrolledExpanded;\n  var tree = useMemo(function () {\n    return getDocumentationTree(items, sortByOrdinal);\n  }, [items]);\n\n  var handleExpandedChange = function handleExpandedChange(newExpanded) {\n    if (onExpandedChange) {\n      return onExpandedChange(newExpanded);\n    }\n\n    setExpanded(newExpanded);\n  };\n\n  var handleSelectDocument = function handleSelectDocument(event, node) {\n    event.preventDefault();\n    onDocumentSelected(node);\n  };\n\n  var handleCollapse = function handleCollapse(event, nodeId) {\n    return handleExpandedChange(expanded.filter(function (item) {\n      return item !== nodeId;\n    }));\n  };\n\n  var handleExpand = function handleExpand(event, nodeId) {\n    return handleExpandedChange([].concat(_toConsumableArray(expanded), [nodeId]));\n  };\n\n  var handleNodeToggle = function handleNodeToggle(event, nodes) {\n    return handleExpandedChange(nodes);\n  };\n\n  return React.createElement(TreeView, {\n    defaultEndIcon: React.createElement(\"div\", {\n      style: {\n        width: 24\n      }\n    }),\n    expanded: expanded,\n    onNodeToggle: handleNodeToggle,\n    selected: selectedDocumentId\n  }, tree.map(function (item) {\n    return React.createElement(RecursiveTreeItem, {\n      key: item.id,\n      node: item,\n      nodeId: item.id,\n      onSelect: handleSelectDocument,\n      onCollapse: handleCollapse,\n      onExpand: handleExpand\n    });\n  }));\n};\nvar RecursiveTreeItem = forwardRef(function (props, ref) {\n  var node = props.node,\n      onSelect = props.onSelect,\n      onExpand = props.onExpand,\n      onCollapse = props.onCollapse,\n      rest = __rest(props, [\"node\", \"onSelect\", \"onExpand\", \"onCollapse\"]);\n\n  var classes = useRecursiveTreeItemStyles(props);\n  var translate = useTranslate();\n\n  var handleClick = function handleClick(event) {\n    // If the node does not have an uuid, it's a new document\n    // and it shouldn't handle collapse, expand or select\n    if (node && node.uuid && onSelect) {\n      onSelect(event, node);\n    }\n  };\n\n  var handleCollapse = function handleCollapse(event) {\n    // Stop event propagation to avoid loading the node\n    event.stopPropagation(); // If the node does not have an uuid, it's a new document\n    // and it shouldn't handle collapse, expand or select\n\n    if (node && node.uuid && onCollapse) {\n      onCollapse(event, node.id);\n    }\n  };\n\n  var handleExpand = function handleExpand(event) {\n    // Stop event propagation to avoid loading the node\n    event.stopPropagation(); // If the node does not have an uuid, it's a new document\n    // and it shouldn't handle collapse, expand or select\n\n    if (node && node.uuid && onExpand) {\n      onExpand(event, node.id);\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (event.altKey || event.currentTarget !== event.target) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      onSelect(event, node);\n    }\n  };\n\n  return React.createElement(TreeItem, Object.assign({\n    classes: classes,\n    label: node.title,\n    onClick: handleClick,\n    collapseIcon: React.createElement(ArrowDropDownIcon, {\n      role: \"button\",\n      \"aria-label\": translate('resources.apis.collapse_documentation', {\n        title: node.title,\n        _: \"resources.apis.collapse_documentation.\".concat(node.title)\n      }),\n      onClick: handleCollapse\n    }),\n    expandIcon: React.createElement(ArrowRightIcon, {\n      role: \"button\",\n      \"aria-label\": translate('resources.apis.expand_documentation', {\n        title: node.title,\n        _: \"resources.apis.expand_documentation.\".concat(node.title)\n      }),\n      onClick: handleExpand\n    }),\n    ref: ref,\n    onKeyDown: handleKeyDown\n  }, rest), node.children && node.children.length > 0 ? node.children.map(function (child) {\n    return React.createElement(RecursiveTreeItem, {\n      key: child.id,\n      node: child,\n      nodeId: child.id,\n      onSelect: onSelect,\n      onExpand: onExpand,\n      onCollapse: onCollapse\n    });\n  }) : null);\n});\nvar useRecursiveTreeItemStyles = makeStyles(function (theme) {\n  return {\n    content: {\n      padding: theme.spacing(1),\n      paddingLeft: 0\n    },\n    label: {}\n  };\n});\nexport var sortByOrdinal = function sortByOrdinal(a, b) {\n  return a.ordinal - b.ordinal;\n};\nexport var getDocumentationTree = function getDocumentationTree(items) {\n  var sortFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a) {\n    return a;\n  };\n  return items.filter(function (item) {\n    return !item.parentUuid;\n  }).reduce(function (acc, item) {\n    item.children = getChildDocuments(item, items);\n    acc.push(item);\n    return acc;\n  }, []).sort(sortFn);\n};\nexport var getChildDocuments = function getChildDocuments(parent, items) {\n  var sortFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a) {\n    return a;\n  };\n  return items.filter(function (item) {\n    return item.parentUuid === parent.uuid && !!parent.uuid;\n  }).reduce(function (acc, item) {\n    item.children = getChildDocuments(item, items);\n    acc.push(item);\n    return acc;\n  }, []).sort(sortFn);\n};\nexport var getSiblingsDocuments = function getSiblingsDocuments() {\n  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var parentUuid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n  if (parentUuid === undefined) {\n    return items;\n  }\n\n  var i = 0;\n\n  while (i < items.length) {\n    var item = items[i];\n    var children = get(item, 'children', []);\n\n    if (item.uuid === parentUuid) {\n      return children;\n    }\n\n    var result = getSiblingsDocuments(children, parentUuid);\n\n    if (result.length > 0) {\n      return result;\n    }\n\n    i++;\n  }\n\n  return [];\n};\nexport var documentHasChildren = function documentHasChildren(items, document) {\n  return items.some(function (node) {\n    return node.parentUuid === document.uuid;\n  });\n};\nexport var getMaxOrdinalFromDocuments = function getMaxOrdinalFromDocuments(items) {\n  if (!Array.isArray(items) || items.length === 0) {\n    return -1;\n  }\n\n  var sortedSiblingsItems = items.sort(function (itemA, itemB) {\n    return itemB.ordinal - itemA.ordinal;\n  });\n  return sortedSiblingsItems[0].ordinal;\n};","map":null,"metadata":{},"sourceType":"module"}