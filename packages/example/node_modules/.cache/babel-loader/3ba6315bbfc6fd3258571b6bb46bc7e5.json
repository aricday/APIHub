{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { useTranslate } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Divider from '@material-ui/core/Divider';\nimport CheckIcon from '@material-ui/icons/Check';\nimport { getUserOrganizations } from '.';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: `0px 0px ${theme.spacing()}px 0px`\n  },\n  item: {\n    color: theme.palette.text.secondary\n  },\n  itemText: {\n    display: 'block',\n    marginTop: '0px',\n    marginBottom: '0px',\n    maxWidth: '300px',\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: '250px'\n    }\n  },\n  truncatedText: {\n    display: 'inline-block',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    maxWidth: '300px',\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: '250px'\n    }\n  },\n  secondaryText: {\n    fontSize: theme.typography.caption.fontSize\n  },\n  icon: {\n    marginLeft: theme.spacing(2),\n    minWidth: theme.spacing(3),\n    color: theme.palette.success.main\n  },\n  divider: {\n    marginBottom: theme.spacing()\n  }\n}));\nexport const UserOrganizationSwitcher = _a => {\n  var userContext = _a.userContext,\n      onChangeUserContext = _a.onChangeUserContext,\n      props = __rest(_a, [\"userContext\", \"onChangeUserContext\"]);\n\n  const classes = useStyles(props);\n  const translate = useTranslate();\n\n  const _getUserOrganizations = getUserOrganizations(userContext),\n        hasAccessibleOrgs = _getUserOrganizations.hasAccessibleOrgs,\n        accessibleOrgs = _getUserOrganizations.accessibleOrgs,\n        activeOrg = _getUserOrganizations.activeOrg;\n\n  return hasAccessibleOrgs ? React.createElement(React.Fragment, null, React.createElement(List, {\n    compnent: \"div\",\n    className: classes.root\n  }, React.createElement(ListSubheader, {\n    className: classes.item\n  }, translate('resources.userContexts.accessibleOrgs.title', {\n    smart_count: accessibleOrgs.length || 0\n  })), accessibleOrgs.map(({\n    uuid,\n    name\n  }) => {\n    const isActiveOrg = uuid === activeOrg.uuid;\n    return React.createElement(Tooltip, {\n      key: uuid,\n      title: name\n    }, React.createElement(ListItem, {\n      className: classes.item,\n      \"aria-label\": translate(isActiveOrg ? 'resources.userContexts.activeOrgUuid.status.active' : 'resources.userContexts.activeOrgUuid.status.not_active'),\n      onClick: () => onChangeUserContext({\n        activeOrgUuid: uuid\n      }),\n      button: !isActiveOrg\n    }, React.createElement(ListItemText, {\n      className: classes.itemText,\n      primary: name,\n      primaryTypographyProps: {\n        variant: 'subtitle1',\n        className: classes.truncatedText\n      }\n    }), isActiveOrg && React.createElement(ListItemIcon, {\n      className: classes.icon\n    }, React.createElement(CheckIcon, null))));\n  })), React.createElement(Divider, {\n    className: classes.divider\n  })) : null;\n};","map":null,"metadata":{},"sourceType":"module"}