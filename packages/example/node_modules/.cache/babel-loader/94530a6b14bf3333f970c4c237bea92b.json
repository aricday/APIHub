{"ast":null,"code":"import get from 'lodash/get';\nimport set from 'lodash/set';\nimport { combineReducers } from 'redux';\nexport const SAVE_EXPANDED_NODES = '@layer7/SAVE_EXPANDED_NODES';\nexport const ADD_EXPANDED_NODES = '@layer7/ADD_EXPANDED_NODES';\nexport const DOCUMENT_ADDED = '@layer7/DOCUMENT_ADDED';\nexport const documentationTreeReducer = (previousState = {}, {\n  type,\n  payload\n}) => {\n  if (!payload || !payload.entityUuid || !payload.locale) {\n    return previousState;\n  }\n\n  switch (type) {\n    case SAVE_EXPANDED_NODES:\n      {\n        const newState = Object.assign({}, previousState);\n        return set(newState, `${payload.entityUuid}[${payload.locale}]`, payload.expandedNodes);\n      }\n\n    case ADD_EXPANDED_NODES:\n      {\n        const newExpandedNodes = new Set(get(previousState, `${payload.entityUuid}[${payload.locale}]`, []));\n        payload.nodeIds.forEach(id => newExpandedNodes.add(id));\n        const newState = Object.assign({}, previousState);\n        return set(newState, `${payload.entityUuid}[${payload.locale}]`, Array.from(newExpandedNodes));\n      }\n\n    default:\n      return previousState;\n  }\n};\nexport const newDocument = (previousState = null, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case DOCUMENT_ADDED:\n      return payload;\n\n    default:\n      return previousState;\n  }\n};\nexport const documentationReducer = {\n  documentation: combineReducers({\n    documentationTree: documentationTreeReducer,\n    newDocument\n  })\n}; // Tree\n\nexport const saveExpandedNodes = (entityUuid, locale, expandedNodes) => ({\n  type: SAVE_EXPANDED_NODES,\n  payload: {\n    entityUuid,\n    locale,\n    expandedNodes\n  }\n});\nexport const addExpandedNodes = (entityUuid, locale, nodeIds) => ({\n  type: ADD_EXPANDED_NODES,\n  payload: {\n    entityUuid,\n    locale,\n    nodeIds\n  }\n});\nexport const selectExpandedNodes = (entityUuid, locale) => state => get(state, `documentation.documentationTree.${entityUuid}.${locale}`, []); // New Document\n\nexport const addNewDocument = document => ({\n  type: DOCUMENT_ADDED,\n  payload: document\n});\nexport const removeNewDocument = () => ({\n  type: DOCUMENT_ADDED,\n  payload: null\n});\nexport const getNewDocument = state => state.documentation.newDocument;","map":null,"metadata":{},"sourceType":"module"}