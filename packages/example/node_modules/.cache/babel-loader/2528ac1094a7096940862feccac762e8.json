{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { useTranslate } from 'react-admin';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Close } from '@material-ui/icons';\nimport { useAuthenticationConfiguration } from '../useAuthenticationConfiguration';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      margin: 0,\n      padding: theme.spacing(2)\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500]\n    }\n  };\n});\n\nvar CustomDialogTitle = function CustomDialogTitle(_a) {\n  var children = _a.children,\n      onClose = _a.onClose,\n      rest = __rest(_a, [\"children\", \"onClose\"]);\n\n  var classes = useStyles(rest);\n  var translate = useTranslate();\n  return React.createElement(DialogTitle, Object.assign({\n    disableTypography: true,\n    className: classes.root\n  }, rest), React.createElement(Typography, {\n    variant: \"h6\"\n  }, children), onClose ? React.createElement(IconButton, {\n    \"aria-label\": translate('apihub.account_setup.terms_of_use_dialog.close'),\n    className: classes.closeButton,\n    onClick: onClose\n  }, React.createElement(Close, null)) : null);\n};\n\nvar Terms = function Terms(_ref) {\n  var content = _ref.content;\n  return React.createElement(React.Fragment, null, content.split('\\n').map(function (section, index) {\n    return React.createElement(Typography, {\n      key: index,\n      variant: \"body2\",\n      paragraph: true\n    }, section);\n  }));\n};\n\nexport var TermsDialog = function TermsDialog(_ref2) {\n  var open = _ref2.open,\n      onClose = _ref2.onClose;\n  var translate = useTranslate();\n\n  var _useAuthenticationCon = useAuthenticationConfiguration(),\n      termsOfUse = _useAuthenticationCon.termsOfUse;\n\n  return React.createElement(Dialog, {\n    \"aria-labelledby\": translate('apihub.account_setup.terms_of_use_dialog.title'),\n    open: open,\n    onClose: onClose,\n    maxWidth: \"md\",\n    fullWidth: true\n  }, React.createElement(CustomDialogTitle, {\n    onClose: onClose\n  }, translate('apihub.account_setup.terms_of_use_dialog.title')), React.createElement(DialogContent, {\n    dividers: true\n  }, termsOfUse === null && React.createElement(LinearProgress, null), termsOfUse && React.createElement(Terms, {\n    content: termsOfUse\n  })), React.createElement(DialogActions, null, React.createElement(Button, {\n    autoFocus: true,\n    onClick: onClose,\n    color: \"primary\"\n  }, translate('apihub.account_setup.terms_of_use_dialog.close'))));\n};","map":null,"metadata":{},"sourceType":"module"}