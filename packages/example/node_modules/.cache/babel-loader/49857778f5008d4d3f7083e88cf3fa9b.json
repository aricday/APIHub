{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useCallback } from 'react';\nimport { fetchUtils, SaveButton, SimpleForm, TextField, TextInput, Toolbar, required, useNotify, useTranslate } from 'react-admin';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core';\nimport { Edit } from '../ui';\nimport { useApiHub } from '../ApiHubContext';\nimport { usePasswordEncryption } from '../authentication/usePasswordEncryption';\nimport { NewPasswordForm } from './NewPasswordForm';\n\nconst UserContextTitle = () => {\n  const translate = useTranslate();\n  return translate('resources.userContexts.title');\n};\n\nconst validateField = [required()];\nexport const UserContextEdit = props => {\n  const classes = useUserContextEditStyles();\n  return React.createElement(Edit, Object.assign({}, props, {\n    title: React.createElement(UserContextTitle, null),\n    aside: React.createElement(UserContextEditAside, null),\n    successMessage: \"resources.userContexts.notifications.update_success\"\n  }), React.createElement(SimpleForm, {\n    toolbar: React.createElement(UserContextEditToolbar, null),\n    redirect: false\n  }, React.createElement(TextField, {\n    addLabel: true,\n    source: \"userDetails.username\",\n    className: classes.field\n  }), React.createElement(TextInput, {\n    source: \"userDetails.lastName\",\n    className: classes.field,\n    validate: validateField\n  }), React.createElement(TextInput, {\n    source: \"userDetails.firstName\",\n    className: classes.field,\n    validate: validateField\n  }), React.createElement(TextInput, {\n    source: \"userDetails.email\",\n    className: classes.field,\n    validate: validateField\n  })));\n};\nconst useUserContextEditStyles = makeStyles({\n  field: {\n    width: 456\n  }\n});\n\nconst UserContextEditToolbar = props => React.createElement(Toolbar, Object.assign({}, props), React.createElement(SaveButton, null));\n\nexport const UserContextEditAside = ({\n  record\n}) => {\n  const classes = useUserContextEditAsideStyles();\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(UserContextEditNewPassword, {\n    record: record\n  }));\n};\n\nconst useUpdatePassword = ({\n  user\n}) => {\n  var _a;\n\n  const _useApiHub = useApiHub(),\n        url = _useApiHub.url;\n\n  const notify = useNotify();\n\n  const _usePasswordEncryptio = usePasswordEncryption(),\n        _usePasswordEncryptio2 = _slicedToArray(_usePasswordEncryptio, 2),\n        publicKey = _usePasswordEncryptio2[0],\n        encrypt = _usePasswordEncryptio2[1];\n\n  const uuid = (_a = user) === null || _a === void 0 ? void 0 : _a.uuid;\n  return useCallback(async ({\n    password,\n    newPassword\n  }) => {\n    let finalPassword = password;\n    let finalNewPassword = newPassword;\n\n    if (publicKey) {\n      const _ref = await Promise.all([encrypt(password), encrypt(newPassword)]),\n            _ref2 = _slicedToArray(_ref, 2),\n            encryptedPassword = _ref2[0],\n            encryptedNewPassword = _ref2[1];\n\n      finalPassword = encryptedPassword;\n      finalNewPassword = encryptedNewPassword;\n    } // This is need to get a special cookie required for password change\n\n\n    await fetch(`${url}/admin/sessionCheck`, {\n      credentials: 'include'\n    });\n    fetchUtils.fetchJson(`${url}/admin/v2/users/password/change`, {\n      credentials: 'include',\n      body: JSON.stringify({\n        password: finalPassword,\n        newPassword: finalNewPassword,\n        uuid\n      }),\n      method: 'PUT'\n    }).then(() => {\n      notify('resources.userContexts.notifications.confirm_password_change');\n    }).catch(error => {\n      if (error.status === 400) {\n        notify('resources.userContexts.notifications.invalid_password', 'warning');\n      }\n\n      notify('resources.userContexts.notifications.update_error', 'warning');\n    });\n  }, [encrypt, notify, publicKey, url, uuid]);\n};\n\nexport const UserContextEditNewPassword = ({\n  record\n}) => {\n  const handleSubmit = useUpdatePassword({\n    user: record\n  });\n  return React.createElement(Card, null, React.createElement(NewPasswordForm, {\n    onSubmit: handleSubmit\n  }));\n};\nconst useUserContextEditAsideStyles = makeStyles(theme => ({\n  root: {\n    marginLeft: theme.spacing(3)\n  }\n}));","map":null,"metadata":{},"sourceType":"module"}