{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { useGetOne, useTranslate, CRUD_GET_ONE } from 'ra-core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport { DocumentEditForm } from './DocumentEditForm';\nimport { DocumentToolbar } from './DocumentToolbar';\nexport var DocumentEdit = function DocumentEdit(_a) {\n  var document = _a.document,\n      entityType = _a.entityType,\n      entityUuid = _a.entityUuid,\n      userCanDelete = _a.userCanDelete,\n      userCanEdit = _a.userCanEdit,\n      hasChildren = _a.hasChildren,\n      onAddNewDocument = _a.onAddNewDocument,\n      onDeleteDocument = _a.onDeleteDocument,\n      rest = __rest(_a, [\"document\", \"entityType\", \"entityUuid\", \"userCanDelete\", \"userCanEdit\", \"hasChildren\", \"onAddNewDocument\", \"onDeleteDocument\"]);\n\n  var translate = useTranslate();\n\n  var _useGetOne = useGetOne('documents', document.id, {\n    action: CRUD_GET_ONE\n  }),\n      data = _useGetOne.data,\n      loaded = _useGetOne.loaded,\n      loading = _useGetOne.loading,\n      error = _useGetOne.error;\n\n  if (loading) {\n    return React.createElement(LinearProgress, null);\n  }\n\n  if (loaded && !!(!data || error)) {\n    return React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"error\"\n    }, translate('ra.page.error'));\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(DocumentToolbar, {\n    document: document,\n    entityType: entityType,\n    entityUuid: entityUuid,\n    userCanEdit: userCanEdit,\n    userCanAdd: userCanEdit,\n    userCanDelete: userCanDelete,\n    hasChildren: hasChildren,\n    onAddNewDocument: onAddNewDocument,\n    onDeleteDocument: onDeleteDocument,\n    disabled: true\n  }), React.createElement(DocumentEditForm, Object.assign({\n    document: data\n  }, rest)));\n};","map":null,"metadata":{},"sourceType":"module"}