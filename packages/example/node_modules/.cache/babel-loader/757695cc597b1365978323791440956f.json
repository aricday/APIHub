{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { TabbedShowLayout, Tab, useGetOne, useQuery, CRUD_GET_ONE } from 'react-admin';\nimport { useTranslate } from 'ra-core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport get from 'lodash/get';\nimport { Show } from '../ui';\nimport { CurrentUserId } from '../dataProvider/userContexts';\nimport { isPublisher } from '../userContexts';\nimport { Overview } from './Overview';\nimport { Documentation } from './Documentation';\nimport { Specs } from './Specs';\n\nconst ApiTitle = ({\n  record\n}) => record ? record.name : '';\n\nconst useTabStyles = makeStyles(theme => ({\n  root: {\n    textTransform: 'capitalize'\n  },\n  selected: {\n    color: theme.palette.primary.main,\n    fontWeight: theme.typography.fontWeightBold\n  }\n}));\nexport const ApiShow = _a => {\n  var id = _a.id,\n      rest = __rest(_a, [\"id\"]);\n\n  const _useGetOne = useGetOne('userContexts', CurrentUserId, {\n    action: CRUD_GET_ONE\n  }),\n        userContexts = _useGetOne.data;\n\n  const _useQuery = useQuery({\n    type: 'getPermissions',\n    resource: 'apis',\n    payload: {\n      id\n    }\n  }),\n        apisPermissions = _useQuery.data;\n\n  return React.createElement(Show, Object.assign({\n    title: React.createElement(ApiTitle, null),\n    id: id\n  }, rest), React.createElement(ApiShowTabs, {\n    userIsPublisher: isPublisher(userContexts),\n    userCanEdit: get(apisPermissions, 'canEdit', false),\n    userCanDelete: get(apisPermissions, 'canEdit', false)\n  }));\n};\nexport const isSoapApi = record => {\n  // The API type is defined as ssgServiceType in the API list page,\n  // but as apiServiceType in the API show page.\n  // The react-admin engine first renders the API show page with the data of the API list page\n  // in order to improve the user experience.\n  // So we need to test both names to avoid a visual glitch when rendering the Tabs.\n  const type = get(record, 'apiServiceType', null) || get(record, 'ssgServiceType', null);\n  return type && type.toLowerCase() === 'soap';\n};\n\nconst ApiShowTabs = props => {\n  const translate = useTranslate();\n  const classes = useTabStyles(props);\n\n  const userIsPublisher = props.userIsPublisher,\n        userCanEdit = props.userCanEdit,\n        userCanDelete = props.userCanDelete,\n        rest = __rest(props, [\"userIsPublisher\", \"userCanEdit\", \"userCanDelete\"]);\n\n  const showSpecs = !isSoapApi(props.record);\n  return React.createElement(TabbedShowLayout, Object.assign({}, rest), React.createElement(Tab, {\n    label: translate('resources.apis.overview.title'),\n    classes: classes\n  }, React.createElement(Overview, {\n    userIsPublisher: userIsPublisher\n  })), showSpecs && React.createElement(Tab, {\n    label: translate('resources.apis.specification.title'),\n    path: \"spec\",\n    classes: classes\n  }, React.createElement(Specs, null)), React.createElement(Tab, {\n    label: translate('resources.apis.documentation.title'),\n    path: \"doc\",\n    classes: classes\n  }, React.createElement(Documentation, {\n    userCanEdit: userCanEdit,\n    userCanDelete: userCanDelete\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}