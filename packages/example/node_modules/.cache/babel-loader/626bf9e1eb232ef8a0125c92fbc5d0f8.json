{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Used for creating new events for LocalStorage. This enables us to\n * have the ability of updating the LocalStorage from outside of the component,\n * but still update the component without prop drilling or creating a dependency\n * on a large library such as Redux.\n *\n * @class LocalStorageChanged\n * @extends {CustomEvent<KVP<string, string>>}\n */\n\nvar LocalStorageChanged =\n/*#__PURE__*/\nfunction (_CustomEvent) {\n  _inherits(LocalStorageChanged, _CustomEvent);\n\n  function LocalStorageChanged(payload) {\n    _classCallCheck(this, LocalStorageChanged);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LocalStorageChanged).call(this, LocalStorageChanged.eventName, {\n      detail: payload\n    }));\n  }\n\n  return LocalStorageChanged;\n}(_wrapNativeSuper(CustomEvent));\n\nLocalStorageChanged.eventName = 'onLocalStorageChange';\nexports.LocalStorageChanged = LocalStorageChanged;\n/**\n * Checks if the event that is passed in is the same type as LocalStorageChanged.\n *\n * @export\n * @template TValue\n * @param {*} evt the object you wish to assert as a LocalStorageChanged event.\n * @returns {evt is LocalStorageChanged<TValue>} if true, evt is asserted to be LocalStorageChanged.\n */\n\nfunction isTypeOfLocalStorageChanged(evt) {\n  return !!evt && (evt instanceof LocalStorageChanged || evt.detail && evt.type === LocalStorageChanged.eventName);\n}\n\nexports.isTypeOfLocalStorageChanged = isTypeOfLocalStorageChanged;\n/**\n * Use this instead of directly using localStorage.setItem\n * in order to correctly send events within the same window.\n *\n * @example\n * ```js\n * writeStorage('hello', JSON.stringify({ name: 'world' }));\n * const { name } = JSON.parse(localStorage.getItem('hello'));\n * ```\n *\n * @export\n * @param {string} key The key to write to in the localStorage.\n * @param {string} value The value to write to in the localStorage.\n */\n\nfunction writeStorage(key, value) {\n  try {\n    localStorage.setItem(key, typeof value === 'object' ? JSON.stringify(value) : \"\".concat(value));\n    window.dispatchEvent(new LocalStorageChanged({\n      key: key,\n      value: value\n    }));\n  } catch (err) {\n    if (err instanceof TypeError && err.message.includes('circular structure')) {\n      throw new TypeError('The object that was given to the writeStorage function has circular references.\\n' + 'For more information, check here: ' + 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value');\n    }\n\n    throw err;\n  }\n}\n\nexports.writeStorage = writeStorage;\n/**\n * Use this function to delete a value from localStorage.\n *\n * @example\n * ```js\n * const user = { name: 'John', email: 'John@fakemail.com' };\n *\n * // Add a user to your localStorage\n * writeStorage('user', JSON.stringify(user));\n *\n * // This will also trigger an update to the state of your component\n * deleteFromStorage('user');\n * ```\n *\n * @export\n * @param {string} key The key of the item you wish to delete from localStorage.\n */\n\nfunction deleteFromStorage(key) {\n  localStorage.removeItem(key);\n  window.dispatchEvent(new LocalStorageChanged({\n    key: key,\n    value: ''\n  }));\n}\n\nexports.deleteFromStorage = deleteFromStorage;","map":null,"metadata":{},"sourceType":"script"}