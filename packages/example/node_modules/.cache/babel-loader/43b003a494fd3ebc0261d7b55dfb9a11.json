{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect } from 'react';\nimport { SimpleForm, DateField, TextField, TextInput, useUpdate, useNotify, required, CRUD_UPDATE } from 'react-admin';\nimport { makeStyles } from '@material-ui/core';\nimport { MarkdownInput } from '../../ui';\nimport { DocumentFormToolbar } from './DocumentFormToolbar';\nconst useStyles = makeStyles(theme => ({\n  title: {\n    display: 'inline-block',\n    width: '30%'\n  },\n  navtitle: {\n    display: 'inline-block',\n    marginLeft: theme.spacing(4),\n    width: '30%'\n  },\n  modifyTs: {\n    display: 'inline-block',\n    marginLeft: theme.spacing(4),\n    width: '30%'\n  },\n  markdown: {\n    width: '100%'\n  }\n}));\n\nconst DocumentForm = ({\n  record = {},\n  loading = false,\n  error = null,\n  onSave = () => {},\n  onCancel = () => {}\n}) => {\n  const classes = useStyles();\n  return React.createElement(SimpleForm, {\n    resource: \"documents\",\n    record: record,\n    toolbar: React.createElement(DocumentFormToolbar, {\n      loading: loading,\n      error: error,\n      onCancel: onCancel\n    }),\n    save: onSave\n  }, React.createElement(TextInput, {\n    source: \"title\",\n    formClassName: classes.title,\n    validate: required()\n  }), React.createElement(TextField, {\n    source: \"navtitle\",\n    formClassName: classes.navtitle\n  }), React.createElement(DateField, {\n    source: \"modifyTs\",\n    formClassName: classes.modifyTs\n  }), React.createElement(MarkdownInput, {\n    source: \"markdown\",\n    formClassName: classes.markdown,\n    validate: required(),\n    isRequired: true,\n    fullWidth: true\n  }));\n};\n\nexport const DocumentEditForm = ({\n  document,\n  onSave = () => {},\n  onCancel = () => {}\n}) => {\n  const notify = useNotify();\n\n  const _useUpdate = useUpdate('documents'),\n        _useUpdate2 = _slicedToArray(_useUpdate, 2),\n        update = _useUpdate2[0],\n        _useUpdate2$ = _useUpdate2[1],\n        data = _useUpdate2$.data,\n        loading = _useUpdate2$.loading,\n        error = _useUpdate2$.error;\n\n  const handleSave = newDocument => {\n    update({\n      payload: {\n        id: document.id,\n        data: Object.assign(Object.assign({}, newDocument), {\n          id: document.id\n        })\n      }\n    }, {\n      action: CRUD_UPDATE,\n      onSuccess: () => {\n        notify('resources.documents.notifications.edit_success');\n      },\n      onFailure: () => {\n        notify('resources.documents.notifications.edit_error');\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (data && data.uuid) {\n      onSave(data);\n    }\n  }, [data, onSave]);\n  return React.createElement(DocumentForm, {\n    record: document,\n    loading: loading,\n    error: error,\n    onSave: handleSave,\n    onCancel: onCancel\n  });\n};","map":null,"metadata":{},"sourceType":"module"}