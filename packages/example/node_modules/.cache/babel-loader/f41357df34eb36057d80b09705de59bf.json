{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useEffect, useState } from 'react';\nimport { useApiHub } from '../../ApiHubContext';\nimport { extractTokenFromUrl } from '../extractTokenFromUrl';\nimport { usePasswordEncryption } from '../usePasswordEncryption';\nexport const fetchAccountData = async (url, token) => {\n  const response = await fetch(`${url}/admin/accountSetup?token=${token}`);\n\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error(response.statusText);\n  }\n\n  return await response.json();\n};\nexport const submitAccountData = async (url, token, data) => {\n  const response = await fetch(`${url}/admin/accountSetup?token=${token}`, {\n    method: 'put',\n    body: Object.assign({\n      token\n    }, data)\n  });\n\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error(response.statusText);\n  }\n\n  return await response.json();\n};\nexport const checkUsernameUnicity = async (url, username) => {\n  const response = await fetch(`${url}/admin/Portal.svc/UserNameUnique()?Name='${username}'`);\n\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error(response.statusText);\n  }\n\n  return await response.json();\n};\n/**\n * This hook extracts the token from the url, fetch the account data and provides\n * a function to set up the account.\n *\n * It returns a tupple containing\n * - the current status of the form (prepare, fill, invalid_request and success)\n * - the account data to initialize the form\n * - a function to submit the new account data\n */\n\nexport const useAccountData = location => {\n  const _useState = useState('prepare'),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        accountData = _useState4[0],\n        setAccountData = _useState4[1];\n\n  const _useApiHub = useApiHub(),\n        url = _useApiHub.url;\n\n  const token = extractTokenFromUrl(location.hash);\n\n  const _usePasswordEncryptio = usePasswordEncryption(),\n        _usePasswordEncryptio2 = _slicedToArray(_usePasswordEncryptio, 2),\n        publicKey = _usePasswordEncryptio2[0],\n        encrypt = _usePasswordEncryptio2[1];\n\n  useEffect(() => {\n    if (state === 'prepare') {\n      fetchAccountData(url, token).then(_a => {\n        var email = _a.email,\n            rest = __rest(_a, [\"email\"]);\n\n        const isVerified = !!email;\n\n        if (isVerified) {\n          setState('fill');\n          setAccountData(Object.assign({\n            email\n          }, rest));\n          return;\n        }\n\n        throw Error('Cannot get account setup data');\n      }).catch(() => {\n        setAccountData(null);\n        setState('invalid_request');\n      });\n    }\n  }, [url, token, state, accountData]);\n\n  const handleSubmitAccountData = data => {\n    let finalData = data;\n\n    if (publicKey) {\n      finalData = Object.assign(Object.assign({}, data), {\n        password: encrypt(data.password)\n      });\n    }\n\n    return submitAccountData(url, token, finalData).then(() => {\n      setState('success');\n    });\n  };\n\n  return [state, accountData, handleSubmitAccountData];\n};","map":null,"metadata":{},"sourceType":"module"}