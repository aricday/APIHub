{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useCallback } from 'react';\nimport { fetchUtils, SaveButton, SimpleForm, TextField, TextInput, Toolbar, required, useNotify, useTranslate } from 'react-admin';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core';\nimport { Edit } from '../ui';\nimport { useApiHub } from '../ApiHubContext';\nimport { usePasswordEncryption } from '../authentication/usePasswordEncryption';\nimport { NewPasswordForm } from './NewPasswordForm';\n\nvar UserContextTitle = function UserContextTitle() {\n  var translate = useTranslate();\n  return translate('resources.userContexts.title');\n};\n\nvar validateField = [required()];\nexport var UserContextEdit = function UserContextEdit(props) {\n  var classes = useUserContextEditStyles();\n  return React.createElement(Edit, Object.assign({}, props, {\n    title: React.createElement(UserContextTitle, null),\n    aside: React.createElement(UserContextEditAside, null),\n    successMessage: \"resources.userContexts.notifications.update_success\"\n  }), React.createElement(SimpleForm, {\n    toolbar: React.createElement(UserContextEditToolbar, null),\n    redirect: false\n  }, React.createElement(TextField, {\n    addLabel: true,\n    source: \"userDetails.username\",\n    className: classes.field\n  }), React.createElement(TextInput, {\n    source: \"userDetails.lastName\",\n    className: classes.field,\n    validate: validateField\n  }), React.createElement(TextInput, {\n    source: \"userDetails.firstName\",\n    className: classes.field,\n    validate: validateField\n  }), React.createElement(TextInput, {\n    source: \"userDetails.email\",\n    className: classes.field,\n    validate: validateField\n  })));\n};\nvar useUserContextEditStyles = makeStyles({\n  field: {\n    width: 456\n  }\n});\n\nvar UserContextEditToolbar = function UserContextEditToolbar(props) {\n  return React.createElement(Toolbar, Object.assign({}, props), React.createElement(SaveButton, null));\n};\n\nexport var UserContextEditAside = function UserContextEditAside(_ref) {\n  var record = _ref.record;\n  var classes = useUserContextEditAsideStyles();\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(UserContextEditNewPassword, {\n    record: record\n  }));\n};\n\nvar useUpdatePassword = function useUpdatePassword(_ref2) {\n  var user = _ref2.user;\n\n  var _a;\n\n  var _useApiHub = useApiHub(),\n      url = _useApiHub.url;\n\n  var notify = useNotify();\n\n  var _usePasswordEncryptio = usePasswordEncryption(),\n      _usePasswordEncryptio2 = _slicedToArray(_usePasswordEncryptio, 2),\n      publicKey = _usePasswordEncryptio2[0],\n      encrypt = _usePasswordEncryptio2[1];\n\n  var uuid = (_a = user) === null || _a === void 0 ? void 0 : _a.uuid;\n  return useCallback(function _callee(_ref3) {\n    var password, newPassword, finalPassword, finalNewPassword, _ref4, _ref5, encryptedPassword, encryptedNewPassword;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            password = _ref3.password, newPassword = _ref3.newPassword;\n            finalPassword = password;\n            finalNewPassword = newPassword;\n\n            if (!publicKey) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Promise.all([encrypt(password), encrypt(newPassword)]));\n\n          case 6:\n            _ref4 = _context.sent;\n            _ref5 = _slicedToArray(_ref4, 2);\n            encryptedPassword = _ref5[0];\n            encryptedNewPassword = _ref5[1];\n            finalPassword = encryptedPassword;\n            finalNewPassword = encryptedNewPassword;\n\n          case 12:\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(fetch(\"\".concat(url, \"/admin/sessionCheck\"), {\n              credentials: 'include'\n            }));\n\n          case 14:\n            fetchUtils.fetchJson(\"\".concat(url, \"/admin/v2/users/password/change\"), {\n              credentials: 'include',\n              body: JSON.stringify({\n                password: finalPassword,\n                newPassword: finalNewPassword,\n                uuid: uuid\n              }),\n              method: 'PUT'\n            }).then(function () {\n              notify('resources.userContexts.notifications.confirm_password_change');\n            }).catch(function (error) {\n              if (error.status === 400) {\n                notify('resources.userContexts.notifications.invalid_password', 'warning');\n              }\n\n              notify('resources.userContexts.notifications.update_error', 'warning');\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }, [encrypt, notify, publicKey, url, uuid]);\n};\n\nexport var UserContextEditNewPassword = function UserContextEditNewPassword(_ref6) {\n  var record = _ref6.record;\n  var handleSubmit = useUpdatePassword({\n    user: record\n  });\n  return React.createElement(Card, null, React.createElement(NewPasswordForm, {\n    onSubmit: handleSubmit\n  }));\n};\nvar useUserContextEditAsideStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      marginLeft: theme.spacing(3)\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}