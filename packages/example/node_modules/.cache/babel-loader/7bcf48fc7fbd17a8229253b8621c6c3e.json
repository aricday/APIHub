{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useNotify, useRefresh, useRedirect, useGetOne, useUpdate, useMutation, CRUD_GET_ONE, CRUD_UPDATE } from 'ra-core';\nimport merge from 'lodash/merge';\nimport { CurrentUserId } from '../dataProvider/userContexts';\nexport const useUserContext = redirectTo => {\n  const notify = useNotify();\n  const refresh = useRefresh();\n  const redirect = useRedirect(); // Pass a fake id because we can only access the current user context\n\n  const _useGetOne = useGetOne('userContexts', CurrentUserId, {\n    action: CRUD_GET_ONE\n  }),\n        userContext = _useGetOne.data;\n\n  const _useUpdate = useUpdate('userContexts', CurrentUserId),\n        _useUpdate2 = _slicedToArray(_useUpdate, 1),\n        updateProfile = _useUpdate2[0];\n\n  const _useMutation = useMutation({\n    type: 'updateActiveOrganization',\n    resource: 'userContexts'\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 1),\n        updateActiveOrganization = _useMutation2[0];\n\n  const handleChangeUserProfile = newUserContext => {\n    updateProfile({\n      payload: {\n        id: CurrentUserId,\n        data: merge(userContext, newUserContext)\n      }\n    }, {\n      action: CRUD_UPDATE,\n      onSuccess: () => {\n        notify('resources.userContexts.userDetails.notifications.update_success', 'info');\n\n        if (redirectTo) {\n          redirect(redirectTo);\n        }\n\n        refresh();\n      },\n      onFailure: () => {\n        notify('resources.userContexts.userDetails.notifications.update_error', 'warning');\n      }\n    });\n  };\n\n  const handleChangeUserActiveOrganization = newUserContext => {\n    updateActiveOrganization({\n      payload: {\n        id: CurrentUserId,\n        data: merge(userContext, newUserContext)\n      }\n    }, {\n      action: CRUD_UPDATE,\n      onSuccess: () => {\n        notify('resources.userContexts.activeOrgUuid.notifications.update_success', 'info'); // We should perform a redirection before refreshing the view,\n        // because the current view may not be accessible for the new organization.\n\n        if (redirectTo) {\n          redirect(redirectTo);\n        }\n\n        refresh();\n      },\n      onFailure: () => {\n        notify('resources.userContexts.activeOrgUuid.notifications.update_error', 'warning');\n      }\n    });\n  };\n\n  return [userContext, handleChangeUserProfile, handleChangeUserActiveOrganization];\n};","map":null,"metadata":{},"sourceType":"module"}