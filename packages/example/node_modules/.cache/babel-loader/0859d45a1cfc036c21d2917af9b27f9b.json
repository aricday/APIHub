{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport IconEdit from '@material-ui/icons/Edit';\nimport IconDelete from '@material-ui/icons/Delete';\nimport IconAdd from '@material-ui/icons/Add';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslate } from 'ra-core';\nimport { DeleteDocumentButton } from './DeleteDocumentButton';\nimport { ChangeParentDocumentButton } from './ChangeParentDocumentButton';\n/**\n * The toolbar displayed at the top of the document view\n */\n\nexport const DocumentToolbar = ({\n  allDocuments,\n  disabled,\n  document,\n  entityType,\n  entityUuid,\n  locale,\n  hasChildren,\n  userCanEdit,\n  userCanAdd,\n  userCanDelete,\n  onEdit,\n  onAddNewDocument,\n  onDeleteDocument\n}) => {\n  const classes = useToolbarStyles();\n  const translate = useTranslate();\n\n  if (!document || !userCanEdit && !userCanDelete) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: classes.root\n  }, userCanAdd && React.createElement(AddDocumentButton, {\n    document: document,\n    color: \"primary\",\n    size: \"small\",\n    onClick: onAddNewDocument,\n    disabled: disabled,\n    className: classes.button,\n    \"aria-label\": translate('resources.apis.documentation.actions.new_child_document_button'),\n    startIcon: React.createElement(IconAdd, null)\n  }, translate('resources.apis.documentation.actions.new_child_document_button')), userCanEdit && React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    onClick: onEdit,\n    disabled: disabled,\n    className: classes.button,\n    \"aria-label\": translate('resources.apis.documentation.actions.edit_document_button'),\n    startIcon: React.createElement(IconEdit, null)\n  }, translate('resources.apis.documentation.actions.edit_document_button')), userCanEdit && React.createElement(ChangeParentDocumentButton, {\n    color: \"primary\",\n    size: \"small\",\n    disabled: disabled,\n    className: classes.button,\n    allDocuments: allDocuments,\n    document: document,\n    entityType: entityType,\n    entityUuid: entityUuid,\n    locale: locale\n  }), userCanDelete && React.createElement(DeleteDocumentButton, {\n    document: document,\n    entityType: entityType,\n    entityUuid: entityUuid,\n    hasChildren: hasChildren,\n    color: \"primary\",\n    size: \"small\",\n    onClick: onDeleteDocument,\n    disabled: disabled,\n    className: classes.button,\n    \"aria-label\": translate('resources.apis.documentation.actions.delete_document_button'),\n    startIcon: React.createElement(IconDelete, null)\n  }, translate('resources.apis.documentation.actions.delete_document_button'))), React.createElement(Divider, null));\n};\n\nconst AddDocumentButton = _a => {\n  var document = _a.document,\n      onClick = _a.onClick,\n      rest = __rest(_a, [\"document\", \"onClick\"]);\n\n  const handleAddNewDocument = () => {\n    onClick(document);\n  };\n\n  return React.createElement(Button, Object.assign({\n    onClick: handleAddNewDocument\n  }, rest));\n};\n\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(1)\n  },\n  button: {\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}), {\n  name: 'Layer7DocumentationToolbar'\n});","map":null,"metadata":{},"sourceType":"module"}