{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement, useCallback } from 'react';\nimport MuiGrid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { linkToRecord } from 'ra-core';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '-2px'\n  },\n  gridList: {\n    width: '100%',\n    marginTop: 0,\n    marginBottom: 0,\n    marginLeft: -theme.spacing(),\n    marginRight: -theme.spacing()\n  },\n  placeholder: {\n    backgroundColor: theme.palette.grey[300],\n    height: '100%'\n  }\n}));\n\nconst times = (nbChildren, fn) => Array.from({\n  length: nbChildren\n}, (_, key) => fn(key));\n\nexport const LoadingCardGrid = ({\n  nbItems = 10\n}) => {\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(MuiGrid, {\n    container: true,\n    className: classes.gridList\n  }, times(nbItems, key => React.createElement(MuiGrid, {\n    item: true,\n    key: key\n  }, React.createElement(\"div\", {\n    className: classes.placeholder\n  })))));\n};\nexport const LoadedCardGrid = ({\n  basePath,\n  children,\n  data,\n  ids,\n  resource,\n  rowClick,\n  spacing = 2\n}) => {\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(MuiGrid, {\n    className: classes.gridList,\n    container: true,\n    spacing: spacing\n  }, ids.map(id => React.createElement(CardGridItem, {\n    key: id,\n    id: id,\n    basePath: basePath,\n    record: data[id],\n    resource: resource,\n    rowClick: rowClick\n  }, children))));\n};\nexport const CardGrid = _a => {\n  var loaded = _a.loaded,\n      props = __rest(_a, [\"loaded\"]);\n\n  return loaded ? React.createElement(LoadedCardGrid, Object.assign({}, props)) : React.createElement(LoadingCardGrid, Object.assign({}, props));\n};\nexport const CardGridItem = _a => {\n  var basePath = _a.basePath,\n      children = _a.children,\n      id = _a.id,\n      record = _a.record,\n      resource = _a.resource,\n      rowClick = _a.rowClick,\n      _a$xsSize = _a.xsSize,\n      xsSize = _a$xsSize === void 0 ? 12 : _a$xsSize,\n      _a$smSize = _a.smSize,\n      smSize = _a$smSize === void 0 ? 6 : _a$smSize,\n      _a$mdSize = _a.mdSize,\n      mdSize = _a$mdSize === void 0 ? 4 : _a$mdSize,\n      _a$lgSize = _a.lgSize,\n      lgSize = _a$lgSize === void 0 ? 3 : _a$lgSize,\n      _a$xlSize = _a.xlSize,\n      xlSize = _a$xlSize === void 0 ? 3 : _a$xlSize,\n      props = __rest(_a, [\"basePath\", \"children\", \"id\", \"record\", \"resource\", \"rowClick\", \"xsSize\", \"smSize\", \"mdSize\", \"lgSize\", \"xlSize\"]);\n\n  const history = useHistory();\n  const handleClick = useCallback(async event => {\n    if (!rowClick) return;\n    event.persist();\n    const effect = typeof rowClick === 'function' ? await rowClick(id, basePath, record) : rowClick;\n\n    switch (effect) {\n      case 'edit':\n        history.push(linkToRecord(basePath, id));\n        return;\n\n      case 'show':\n        history.push(linkToRecord(basePath, id, 'show'));\n        return;\n\n      default:\n        if (effect) history.push(effect);\n        return;\n    }\n  }, [basePath, history, id, record, rowClick]);\n  return React.createElement(MuiGrid, Object.assign({\n    item: true,\n    onClick: handleClick,\n    xs: xsSize,\n    sm: smSize,\n    md: mdSize,\n    lg: lgSize,\n    xl: xlSize\n  }, props), cloneElement(children, {\n    basePath,\n    id,\n    record,\n    resource\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}