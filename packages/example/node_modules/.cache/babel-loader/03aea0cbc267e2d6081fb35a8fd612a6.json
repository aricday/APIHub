{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst local_storage_events_1 = require(\"./local-storage-events\");\n\nconst react_1 = require(\"react\");\n\nfunction tryParse(value) {\n  try {\n    return JSON.parse(value);\n  } catch (_a) {\n    return value;\n  }\n}\n/**\n * React hook to enable updates to state via localStorage.\n * This updates when the {writeStorage} function is used, when the returned function\n * is called, or when the \"storage\" event is fired from another tab in the browser.\n * This function takes an optional default value to start off with.\n *\n * @example\n * ```js\n * const MyComponent = () => {\n *   const [myStoredItem, setMyStoredItem] = useLocalStorage('myStoredItem');\n *   return (\n *     <p>{myStoredItem}</p>\n *   );\n * };\n * ```\n *\n * @export\n * @template TValue The type of the given initial value.\n * @param {string} key The key in the localStorage that you wish to watch.\n * @param {TValue} initialValue Optional initial value to start with.\n * @returns {[TValue | null, Dispatch<TValue>, Dispatch<void>]} An array containing the value\n * associated with the key in position 0, a function to set the value in position 1,\n * and a function to delete the value from localStorage in position 2.\n */\n\n\nfunction useLocalStorage(key, initialValue) {\n  const _react_1$useState = react_1.useState(tryParse(localStorage.getItem(key)) || initialValue),\n        _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n        localState = _react_1$useState2[0],\n        updateLocalState = _react_1$useState2[1];\n\n  const onLocalStorageChange = event => {\n    if (local_storage_events_1.isTypeOfLocalStorageChanged(event)) {\n      if (event.detail.key === key) {\n        updateLocalState(event.detail.value);\n      }\n    } else {\n      if (event.key === key) {\n        if (event.newValue) {\n          updateLocalState(tryParse(event.newValue));\n        }\n      }\n    }\n  }; // when the key changes, update localState to reflect it.\n\n\n  react_1.useEffect(() => {\n    updateLocalState(tryParse(localStorage.getItem(key)) || initialValue);\n  }, [key]);\n  react_1.useEffect(() => {\n    // The custom storage event allows us to update our component\n    // when a change occurs in localStorage outside of our component\n    const listener = e => onLocalStorageChange(e);\n\n    window.addEventListener(local_storage_events_1.LocalStorageChanged.eventName, listener); // The storage event only works in the context of other documents (eg. other browser tabs)\n\n    window.addEventListener('storage', listener); // We need to check if there is a stored value because we do not wish to overwrite it.\n\n    const storedValue = localStorage.getItem(key);\n    const canWrite = !(storedValue && tryParse(storedValue) !== storedValue); // Write initial value to the local storage if it's not present or contains invalid JSON data.\n\n    if (initialValue !== undefined && canWrite) {\n      local_storage_events_1.writeStorage(key, initialValue);\n    }\n\n    return () => {\n      window.removeEventListener(local_storage_events_1.LocalStorageChanged.eventName, listener);\n      window.removeEventListener('storage', listener);\n    };\n  }, [key]);\n  const writeState = react_1.useCallback(value => local_storage_events_1.writeStorage(key, value), [key]);\n  const deleteState = react_1.useCallback(() => local_storage_events_1.deleteFromStorage(key), [key]);\n  return [localState === null ? initialValue : localState, writeState, deleteState];\n}\n\nexports.useLocalStorage = useLocalStorage;","map":null,"metadata":{},"sourceType":"script"}