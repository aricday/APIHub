{"ast":null,"code":"import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport unified from 'unified';\nimport parse from 'remark-parse';\nimport remark2react from 'remark-react';\nimport removeMarkdown from 'remove-markdown';\nimport merge from 'lodash/merge';\nexport var removeTags = function removeTags(text) {\n  return removeMarkdown(text);\n}; // TODO: complete supported markdown syntax\n\nvar markdownOptions = {\n  remarkReactComponents: {\n    h1: function h1(props) {\n      return React.createElement(Typography, Object.assign({\n        variant: \"h1\"\n      }, props));\n    },\n    h2: function h2(props) {\n      return React.createElement(Typography, Object.assign({\n        variant: \"h2\"\n      }, props));\n    },\n    h3: function h3(props) {\n      return React.createElement(Typography, Object.assign({\n        variant: \"h3\"\n      }, props));\n    },\n    h4: function h4(props) {\n      return React.createElement(Typography, Object.assign({\n        variant: \"h4\"\n      }, props));\n    },\n    h5: function h5(props) {\n      return React.createElement(Typography, Object.assign({\n        variant: \"h5\"\n      }, props));\n    },\n    h6: function h6(props) {\n      return React.createElement(Typography, Object.assign({\n        variant: \"h6\"\n      }, props));\n    },\n    p: function p(props) {\n      return React.createElement(Typography, Object.assign({\n        component: \"p\",\n        variant: \"body1\"\n      }, props));\n    },\n    a: function a(props) {\n      return React.createElement(Link, Object.assign({}, props));\n    },\n    li: function li(props) {\n      return React.createElement(Typography, Object.assign({\n        component: \"li\",\n        variant: \"body1\"\n      }, props));\n    },\n    td: function td(props) {\n      return React.createElement(Typography, Object.assign({\n        component: \"td\",\n        variant: \"body1\"\n      }, props));\n    },\n    code: function code(props) {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      var classes = useMarkdownStyles();\n      return React.createElement(Typography, Object.assign({\n        component: \"code\",\n        variant: \"body1\",\n        className: classes.code\n      }, props));\n    }\n  }\n};\nvar useMarkdownStyles = makeStyles(function (theme) {\n  return {\n    code: {\n      fontFamily: 'initial',\n      backgroundColor: theme.palette.grey['300'],\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n      paddingTop: theme.spacing(0.5),\n      paddingBottom: theme.spacing(0.5)\n    }\n  };\n});\nexport var markdownRenderer = function markdownRenderer(text) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return unified().use(parse).use(remark2react, merge({}, markdownOptions, options)).processSync(text).contents;\n};","map":null,"metadata":{},"sourceType":"module"}