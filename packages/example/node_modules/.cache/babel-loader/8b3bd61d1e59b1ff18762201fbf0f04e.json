{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/aricday/Projects/APIHub/packages/example/src/layout/CustomAppBar.js\";\nimport React, { cloneElement, useEffect } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LightModeIcon from '@material-ui/icons/Brightness7';\nimport DarkModeIcon from '@material-ui/icons/Brightness4';\nimport { HideOnScroll, LoadingIndicator, useTranslate } from 'react-admin';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ApiHubUserMenu, ApiHubLanguageSwitcher, SidebarButton, useApiHubPreference } from 'layer7-apihub';\nimport { BrandLogo } from '../ui';\nimport { changeTheme } from '../theme';\nconst useStyles = makeStyles(theme => ({\n  toolbar: {\n    paddingRight: 24\n  },\n  header: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    minWidth: '156px'\n  },\n  divider: {\n    alignSelf: 'stretch',\n    backgroundColor: theme.palette.primary.contrastText,\n    height: 'auto',\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(4),\n    marginRight: theme.spacing(4),\n    marginTop: theme.spacing(2)\n  },\n  logo: {\n    height: theme.spacing(9)\n  }\n}), {\n  name: 'RaAppBar'\n});\nexport const CustomAppBar = (_ref) => {\n  let children = _ref.children,\n      classesOverride = _ref.classes,\n      className = _ref.className,\n      languagesMenu = _ref.languagesMenu,\n      logo = _ref.logo,\n      logout = _ref.logout,\n      open = _ref.open,\n      sidebarButton = _ref.sidebarButton,\n      title = _ref.title,\n      userMenu = _ref.userMenu,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"classes\", \"className\", \"languagesMenu\", \"logo\", \"logout\", \"open\", \"sidebarButton\", \"title\", \"userMenu\"]);\n\n  const classes = useStyles({\n    classes: classesOverride\n  });\n  return React.createElement(HideOnScroll, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(AppBar, Object.assign({\n    className: className,\n    color: \"secondary\",\n    elevation: 0\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Toolbar, {\n    disableGutters: true,\n    variant: \"regular\",\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, cloneElement(sidebarButton, {\n    open\n  }), React.createElement(\"div\", {\n    className: classes.header,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(BrandLogo, {\n    className: classes.logo,\n    fill: \"#fff\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(LoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(ThemeModeButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), cloneElement(languagesMenu), React.createElement(Divider, {\n    className: classes.divider,\n    orientation: \"vertical\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), cloneElement(userMenu, {\n    logout\n  }))));\n};\nCustomAppBar.defaultProps = {\n  userMenu: React.createElement(ApiHubUserMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }),\n  languagesMenu: React.createElement(ApiHubLanguageSwitcher, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }),\n  sidebarButton: React.createElement(SidebarButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })\n};\nconst useThemeModeButtonStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.common.white\n  }\n}));\nexport const ThemeModeButton = () => {\n  const classes = useThemeModeButtonStyles();\n  const translate = useTranslate();\n  const dispatch = useDispatch();\n  const themeMode = useSelector(state => state.theme);\n\n  const _useApiHubPreference = useApiHubPreference('themeMode'),\n        _useApiHubPreference2 = _slicedToArray(_useApiHubPreference, 2),\n        themeModePreference = _useApiHubPreference2[0],\n        setThemeModePreference = _useApiHubPreference2[1];\n\n  useEffect(() => {\n    if (themeModePreference && themeModePreference !== themeMode) {\n      dispatch(changeTheme(themeModePreference));\n    }\n  }, [themeModePreference, themeMode, dispatch]);\n\n  const handleClick = () => {\n    const newTheme = themeMode === 'light' ? 'dark' : 'light';\n    setThemeModePreference(newTheme);\n  };\n\n  return React.createElement(Tooltip, {\n    title: translate('example.action.toggle_dark_mode'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    color: \"default\",\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, themeMode === 'light' ? React.createElement(DarkModeIcon, {\n    className: classes.icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }) : React.createElement(LightModeIcon, {\n    className: classes.icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/aricday/Projects/APIHub/packages/example/src/layout/CustomAppBar.js"],"names":["React","cloneElement","useEffect","AppBar","Divider","IconButton","Toolbar","Tooltip","makeStyles","LightModeIcon","DarkModeIcon","HideOnScroll","LoadingIndicator","useTranslate","useDispatch","useSelector","ApiHubUserMenu","ApiHubLanguageSwitcher","SidebarButton","useApiHubPreference","BrandLogo","changeTheme","useStyles","theme","toolbar","paddingRight","header","flex","display","alignItems","justifyContent","textOverflow","whiteSpace","overflow","minWidth","divider","alignSelf","backgroundColor","palette","primary","contrastText","height","marginBottom","spacing","marginLeft","marginRight","marginTop","logo","name","CustomAppBar","children","classesOverride","classes","className","languagesMenu","logout","open","sidebarButton","title","userMenu","rest","defaultProps","useThemeModeButtonStyles","icon","color","common","white","ThemeModeButton","translate","dispatch","themeMode","state","themeModePreference","setThemeModePreference","handleClick","newTheme"],"mappings":"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","sourcesContent":["import React, { cloneElement, useEffect } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LightModeIcon from '@material-ui/icons/Brightness7';\nimport DarkModeIcon from '@material-ui/icons/Brightness4';\nimport { HideOnScroll, LoadingIndicator, useTranslate } from 'react-admin';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    ApiHubUserMenu,\n    ApiHubLanguageSwitcher,\n    SidebarButton,\n    useApiHubPreference,\n} from 'layer7-apihub';\nimport { BrandLogo } from '../ui';\nimport { changeTheme } from '../theme';\n\nconst useStyles = makeStyles(\n    theme => ({\n        toolbar: {\n            paddingRight: 24,\n        },\n        header: {\n            flex: 1,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            minWidth: '156px',\n        },\n        divider: {\n            alignSelf: 'stretch',\n            backgroundColor: theme.palette.primary.contrastText,\n            height: 'auto',\n            marginBottom: theme.spacing(2),\n            marginLeft: theme.spacing(4),\n            marginRight: theme.spacing(4),\n            marginTop: theme.spacing(2),\n        },\n        logo: {\n            height: theme.spacing(9),\n        },\n    }),\n    { name: 'RaAppBar' }\n);\n\nexport const CustomAppBar = ({\n    children,\n    classes: classesOverride,\n    className,\n    languagesMenu,\n    logo,\n    logout,\n    open,\n    sidebarButton,\n    title,\n    userMenu,\n    ...rest\n}) => {\n    const classes = useStyles({ classes: classesOverride });\n\n    return (\n        <HideOnScroll>\n            <AppBar\n                className={className}\n                color=\"secondary\"\n                elevation={0}\n                {...rest}\n            >\n                <Toolbar\n                    disableGutters\n                    variant=\"regular\"\n                    className={classes.toolbar}\n                >\n                    {cloneElement(sidebarButton, { open })}\n                    <div className={classes.header}>\n                        <BrandLogo className={classes.logo} fill=\"#fff\" />\n                    </div>\n                    <LoadingIndicator />\n                    <ThemeModeButton />\n                    {cloneElement(languagesMenu)}\n                    <Divider\n                        className={classes.divider}\n                        orientation=\"vertical\"\n                    />\n                    {cloneElement(userMenu, { logout })}\n                </Toolbar>\n            </AppBar>\n        </HideOnScroll>\n    );\n};\n\nCustomAppBar.defaultProps = {\n    userMenu: <ApiHubUserMenu />,\n    languagesMenu: <ApiHubLanguageSwitcher />,\n    sidebarButton: <SidebarButton />,\n};\n\nconst useThemeModeButtonStyles = makeStyles(theme => ({\n    icon: {\n        color: theme.palette.common.white,\n    },\n}));\n\nexport const ThemeModeButton = () => {\n    const classes = useThemeModeButtonStyles();\n    const translate = useTranslate();\n\n    const dispatch = useDispatch();\n    const themeMode = useSelector(state => state.theme);\n    const [themeModePreference, setThemeModePreference] = useApiHubPreference(\n        'themeMode'\n    );\n\n    useEffect(() => {\n        if (themeModePreference && themeModePreference !== themeMode) {\n            dispatch(changeTheme(themeModePreference));\n        }\n    }, [themeModePreference, themeMode, dispatch]);\n\n    const handleClick = () => {\n        const newTheme = themeMode === 'light' ? 'dark' : 'light';\n        setThemeModePreference(newTheme);\n    };\n\n    return (\n        <Tooltip title={translate('example.action.toggle_dark_mode')}>\n            <IconButton color=\"default\" onClick={handleClick}>\n                {themeMode === 'light' ? (\n                    <DarkModeIcon className={classes.icon} />\n                ) : (\n                    <LightModeIcon className={classes.icon} />\n                )}\n            </IconButton>\n        </Tooltip>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}