{"ast":null,"code":"var $, Collection, RemoteDb, async, jQueryHttpClient, quickfind, utils, _;\n\n_ = require('lodash');\n$ = require('jquery');\nasync = require('async');\nutils = require('./utils');\njQueryHttpClient = require('./jQueryHttpClient');\nquickfind = require('./quickfind');\n\nmodule.exports = RemoteDb = function () {\n  function RemoteDb(url, client, httpClient, useQuickFind, usePostFind) {\n    if (useQuickFind == null) {\n      useQuickFind = false;\n    }\n\n    if (usePostFind == null) {\n      usePostFind = false;\n    }\n\n    this.url = url;\n    this.client = client;\n    this.collections = {};\n    this.httpClient = httpClient;\n    this.useQuickFind = useQuickFind;\n    this.usePostFind = usePostFind;\n  }\n\n  RemoteDb.prototype.addCollection = function (name, options, success, error) {\n    var collection, url, usePostFind, useQuickFind, _ref;\n\n    if (options == null) {\n      options = {};\n    }\n\n    if (_.isFunction(options)) {\n      _ref = [{}, options, success], options = _ref[0], success = _ref[1], error = _ref[2];\n    }\n\n    if (options.url) {\n      url = options.url;\n    } else {\n      if (_.isArray(this.url)) {\n        url = _.map(this.url, function (url) {\n          return url + name;\n        });\n      } else {\n        url = this.url + name;\n      }\n    }\n\n    useQuickFind = this.useQuickFind;\n\n    if (options.useQuickFind != null) {\n      useQuickFind = options.useQuickFind;\n    }\n\n    usePostFind = this.usePostFind;\n\n    if (options.usePostFind != null) {\n      usePostFind = options.usePostFind;\n    }\n\n    collection = new Collection(name, url, this.client, this.httpClient, useQuickFind, usePostFind);\n    this[name] = collection;\n    this.collections[name] = collection;\n\n    if (success != null) {\n      return success();\n    }\n  };\n\n  RemoteDb.prototype.removeCollection = function (name, success, error) {\n    delete this[name];\n    delete this.collections[name];\n\n    if (success != null) {\n      return success();\n    }\n  };\n\n  RemoteDb.prototype.getCollectionNames = function () {\n    return _.keys(this.collections);\n  };\n\n  return RemoteDb;\n}();\n\nCollection = function () {\n  function Collection(name, url, client, httpClient, useQuickFind, usePostFind) {\n    this.name = name;\n    this.url = url;\n    this.client = client;\n    this.httpClient = httpClient || jQueryHttpClient;\n    this.useQuickFind = useQuickFind;\n    this.usePostFind = usePostFind;\n  }\n\n  Collection.prototype.getUrl = function () {\n    var url;\n\n    if (_.isArray(this.url)) {\n      url = this.url.pop();\n      this.url.unshift(url);\n      return url;\n    }\n\n    return this.url;\n  };\n\n  Collection.prototype.find = function (selector, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    return {\n      fetch: function (_this) {\n        return function (success, error) {\n          var body, method, params;\n\n          if (_this.useQuickFind && options.localData && (!options.fields || options.fields._rev) && !(options.limit && !options.sort && !options.orderByExprs)) {\n            method = \"quickfind\";\n          } else if (_this.usePostFind && JSON.stringify({\n            selector: selector,\n            sort: options.sort,\n            fields: options.fields\n          }).length > 500) {\n            method = \"post\";\n          } else {\n            method = \"get\";\n          }\n\n          if (method === \"get\") {\n            params = {};\n            params.selector = JSON.stringify(selector || {});\n\n            if (options.sort) {\n              params.sort = JSON.stringify(options.sort);\n            }\n\n            if (options.limit) {\n              params.limit = options.limit;\n            }\n\n            if (options.skip) {\n              params.skip = options.skip;\n            }\n\n            if (options.fields) {\n              params.fields = JSON.stringify(options.fields);\n            }\n\n            if (options.whereExpr) {\n              params.whereExpr = JSON.stringify(options.whereExpr);\n            }\n\n            if (options.orderByExprs) {\n              params.orderByExprs = JSON.stringify(options.orderByExprs);\n            }\n\n            if (_this.client) {\n              params.client = _this.client;\n            }\n\n            if (typeof navigator !== \"undefined\" && navigator !== null && navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {\n              params._ = new Date().getTime();\n            }\n\n            _this.httpClient(\"GET\", _this.getUrl(), params, null, success, error);\n\n            return;\n          }\n\n          body = {\n            selector: selector || {}\n          };\n\n          if (options.sort) {\n            body.sort = options.sort;\n          }\n\n          if (options.limit != null) {\n            body.limit = options.limit;\n          }\n\n          if (options.skip != null) {\n            body.skip = options.skip;\n          }\n\n          if (options.fields) {\n            body.fields = options.fields;\n          }\n\n          if (options.whereExpr) {\n            body.whereExpr = options.whereExpr;\n          }\n\n          if (options.orderByExprs) {\n            body.orderByExprs = options.orderByExprs;\n          }\n\n          params = {};\n\n          if (_this.client) {\n            params.client = _this.client;\n          }\n\n          if (method === \"quickfind\") {\n            body.quickfind = quickfind.encodeRequest(options.localData);\n\n            _this.httpClient(\"POST\", _this.getUrl() + \"/quickfind\", params, body, function (encodedResponse) {\n              return success(quickfind.decodeResponse(encodedResponse, options.localData, options.sort));\n            }, error);\n\n            return;\n          }\n\n          return _this.httpClient(\"POST\", _this.getUrl() + \"/find\", params, body, function (encodedResponse) {\n            return success(quickfind.decodeResponse(encodedResponse, options.localData, options.sort));\n          }, error);\n        };\n      }(this)\n    };\n  };\n\n  Collection.prototype.findOne = function (selector, options, success, error) {\n    var params, _ref;\n\n    if (options == null) {\n      options = {};\n    }\n\n    if (_.isFunction(options)) {\n      _ref = [{}, options, success], options = _ref[0], success = _ref[1], error = _ref[2];\n    }\n\n    params = {};\n\n    if (options.sort) {\n      params.sort = JSON.stringify(options.sort);\n    }\n\n    params.limit = 1;\n\n    if (this.client) {\n      params.client = this.client;\n    }\n\n    params.selector = JSON.stringify(selector || {});\n\n    if (typeof navigator !== \"undefined\" && navigator !== null && navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {\n      params._ = new Date().getTime();\n    }\n\n    return this.httpClient(\"GET\", this.getUrl(), params, null, function (results) {\n      if (results && results.length > 0) {\n        return success(results[0]);\n      } else {\n        return success(null);\n      }\n    }, error);\n  };\n\n  Collection.prototype.upsert = function (docs, bases, success, error) {\n    var basesPresent, items, params, results, _ref;\n\n    _ref = utils.regularizeUpsert(docs, bases, success, error), items = _ref[0], success = _ref[1], error = _ref[2];\n\n    if (!this.client) {\n      throw new Error(\"Client required to upsert\");\n    }\n\n    results = [];\n    basesPresent = _.compact(_.pluck(items, \"base\")).length > 0;\n    params = {\n      client: this.client\n    };\n\n    if (typeof navigator !== \"undefined\" && navigator !== null && navigator.userAgent.toLowerCase().indexOf('android 2.3') !== -1) {\n      params._ = new Date().getTime();\n    }\n\n    if (items.length === 1) {\n      if (basesPresent) {\n        return this.httpClient(\"PATCH\", this.getUrl(), params, items[0], function (result) {\n          if (_.isArray(docs)) {\n            return success([result]);\n          } else {\n            return success(result);\n          }\n        }, function (err) {\n          if (error) {\n            return error(err);\n          }\n        });\n      } else {\n        return this.httpClient(\"POST\", this.getUrl(), params, items[0].doc, function (result) {\n          if (_.isArray(docs)) {\n            return success([result]);\n          } else {\n            return success(result);\n          }\n        }, function (err) {\n          if (error) {\n            return error(err);\n          }\n        });\n      }\n    } else {\n      if (basesPresent) {\n        return this.httpClient(\"PATCH\", this.getUrl(), params, {\n          doc: _.pluck(items, \"doc\"),\n          base: _.pluck(items, \"base\")\n        }, function (result) {\n          return success(result);\n        }, function (err) {\n          if (error) {\n            return error(err);\n          }\n        });\n      } else {\n        return this.httpClient(\"POST\", this.getUrl(), params, _.pluck(items, \"doc\"), function (result) {\n          return success(result);\n        }, function (err) {\n          if (error) {\n            return error(err);\n          }\n        });\n      }\n    }\n  };\n\n  Collection.prototype.remove = function (id, success, error) {\n    var params;\n\n    if (!this.client) {\n      throw new Error(\"Client required to remove\");\n    }\n\n    params = {\n      client: this.client\n    };\n    return this.httpClient(\"DELETE\", this.getUrl() + \"/\" + id, params, null, success, function (err) {\n      if (err.status === 410) {\n        return success();\n      } else {\n        return error(err);\n      }\n    });\n  };\n\n  return Collection;\n}();","map":null,"metadata":{},"sourceType":"script"}