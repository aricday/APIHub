{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles, Typography } from '@material-ui/core';\nimport { useTranslate } from 'ra-core';\nimport { useApiHub } from '../../ApiHubContext';\nimport { extractTokenFromUrl } from '../extractTokenFromUrl';\nimport { NewPasswordForm } from './NewPasswordForm';\nimport { VerifyingToken } from './VerifyingToken';\nimport { InvalidToken } from './InvalidToken';\nimport { Success } from './Success';\nimport { AuthenticationLayout } from '../AuthenticationLayout';\nimport { usePasswordEncryption } from '../usePasswordEncryption';\n/**\n * The page displaying the form used to create a new password\n *\n * @param {*} Header A React Component used as the page header\n * @param {*} Content A React Component used to display some content next to the new password form\n * @param {*} Footer A React Component used as the page footer\n *\n * @example <caption>Simple usage</caption>\n * <NewPasswordPage />\n *\n * const MyApp = props => <Admin newPasswordPage={MyNewPassword} {...props} />\n *\n * @example <caption>With customized parts</caption>\n * const Header = () => <header><h1>My company</h1></header>\n * const Footer = () => <footer>Copyright Â© 2020 My Company. All Rights Reserved</footer>\n * const Content = () => <section><p>Welcome to My Product.</p></section>\n *\n * const MyNewPasswordPage = props => (\n *     <NewPasswordPage\n *         Header={CustomHeader}\n *         Content={CustomContent}\n *         Footer={CustomFooter}\n *         {...props}\n *     />\n * );\n *\n * const MyApp = props => <Admin newPasswordPage={MyNewPassword} {...props} />\n */\n\nexport const NewPasswordPage = _a => {\n  var location = _a.location,\n      _a$Layout = _a.Layout,\n      Layout = _a$Layout === void 0 ? AuthenticationLayout : _a$Layout,\n      props = __rest(_a, [\"location\", \"Layout\"]);\n\n  const _useSetNewPassword = useSetNewPassword(location),\n        _useSetNewPassword2 = _slicedToArray(_useSetNewPassword, 2),\n        state = _useSetNewPassword2[0],\n        handleSubmit = _useSetNewPassword2[1];\n\n  const translate = useTranslate();\n  const classes = useStyles(props);\n  return React.createElement(Layout, Object.assign({}, props), state === 'verifying_token' ? React.createElement(VerifyingToken, null) : state === 'request_new_password' ? React.createElement(React.Fragment, null, React.createElement(Typography, {\n    variant: \"h2\",\n    className: classes.title\n  }, translate('apihub.new_password.title')), React.createElement(NewPasswordForm, {\n    onSubmit: handleSubmit,\n    variant: \"outlined\"\n  })) : state === 'invalid_token' ? React.createElement(InvalidToken, null) : state === 'success' ? React.createElement(Success, null) : null);\n};\nconst useStyles = makeStyles(theme => ({\n  title: {\n    fontSize: theme.typography.fontSize * 2,\n    marginBottom: theme.spacing(6),\n    color: theme.palette.getContrastText(theme.palette.background.default)\n  }\n}));\n/**\n * This hook extracts the new password token from the url, verifies it and provides\n * a function to set the new password.\n *\n * It returns a tupple containing the current status (verifying_token, invalid_token, request_new_password and success)\n * and a function to actually submit the new password.\n */\n\nconst useSetNewPassword = location => {\n  const _useState = useState('verifying_token'),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useApiHub = useApiHub(),\n        url = _useApiHub.url;\n\n  const token = extractTokenFromUrl(location.hash);\n\n  const _usePasswordEncryptio = usePasswordEncryption(),\n        _usePasswordEncryptio2 = _slicedToArray(_usePasswordEncryptio, 2),\n        publicKey = _usePasswordEncryptio2[0],\n        encrypt = _usePasswordEncryptio2[1];\n\n  useEffect(() => {\n    if (state === 'verifying_token') {\n      verifyNewPasswordTokenValid(url, token).then(isVerified => {\n        setState(isVerified ? 'request_new_password' : 'invalid_token');\n      });\n    }\n  }, [url, token, state]);\n\n  const handleSubmit = ({\n    password\n  }) => {\n    let finalPassword = password;\n\n    if (publicKey) {\n      finalPassword = encrypt(password);\n    }\n\n    return submitNewPassword(url, {\n      password: finalPassword,\n      token\n    }).then(isSuccessful => setState(isSuccessful ? 'success' : 'request_new_password'));\n  };\n\n  return [state, handleSubmit];\n};\n\nconst submitNewPassword = (apiBaseUrl, {\n  password,\n  token\n}) => fetch(`${apiBaseUrl}/admin/UpdateMyPassword`, {\n  method: 'post',\n  body: {\n    password,\n    token\n  }\n}).then(response => response.status >= 200 && response.status < 300).catch(() => false);\n\nconst verifyNewPasswordTokenValid = (apiBaseUrl, token) => fetch(`${apiBaseUrl}/admin/passwordResetTokenValidate?token=${token}`).then(response => response.json()).then(json => !!json).catch(error => console.error(error) || false);","map":null,"metadata":{},"sourceType":"module"}