{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useMemo } from 'react';\nimport { SimpleForm, FormDataConsumer, TextInput, useCreate, useNotify, useRefresh, required, CRUD_CREATE } from 'react-admin';\nimport { makeStyles } from '@material-ui/core';\nimport { useForm } from 'react-final-form';\nimport slugify from 'slugify';\nimport { buildDocumentId } from '../../dataProvider/documents';\nimport { MarkdownInput } from '../../ui';\nimport { DocumentFormToolbar } from './DocumentFormToolbar';\nconst URI_ALLOWED_STRING = /^[a-zA-Z0-9_-]*$/;\nconst URI_NOT_ALLOWED_CHARACTERS = /[^a-zA-Z0-9_-\\s]/g;\nexport const checkSpecialCharacters = () => value => {\n  if (URI_ALLOWED_STRING.test(value)) {\n    return;\n  }\n\n  return 'resources.apis.documentation.validation.error_no_special_characters';\n};\nexport const checkUnicity = navtitles => value => {\n  if (!navtitles.map(navtitle => navtitle.toLowerCase()).includes(value.toLowerCase())) {\n    return;\n  }\n\n  return 'resources.apis.documentation.validation.error_navtitle_not_unique';\n};\n\nconst replaceNotAllowedCharacters = (text, replacement = '_') => {\n  return text.replace(URI_NOT_ALLOWED_CHARACTERS, replacement);\n};\n\nexport const slugifyURI = uri => {\n  const cleanedURI = replaceNotAllowedCharacters(uri, '_');\n  return slugify(cleanedURI);\n};\nconst useStyles = makeStyles(theme => ({\n  title: {\n    display: 'inline-block',\n    width: '256px'\n  },\n  navtitle: {\n    display: 'inline-block',\n    marginLeft: theme.spacing(4),\n    width: '256px'\n  },\n  markdown: {\n    width: '100%'\n  }\n}));\nexport const DocumentForm = ({\n  document = {},\n  loading = false,\n  error = null,\n  allDocuments = [],\n  onSave = () => {},\n  onCancel = () => {}\n}) => {\n  const classes = useStyles();\n  const navtitles = useMemo(() => Object.values(allDocuments).map(item => item.navtitle), [allDocuments]);\n  return React.createElement(SimpleForm, {\n    resource: \"documents\",\n    record: document,\n    toolbar: React.createElement(DocumentFormToolbar, {\n      loading: loading,\n      error: error,\n      onCancel: onCancel\n    }),\n    save: onSave\n  }, React.createElement(FormDataConsumer, null, () => {\n    // eslint-disable-next-line\n    const form = useForm();\n    return React.createElement(React.Fragment, null, React.createElement(TextInput, {\n      resource: \"documents\",\n      source: \"title\",\n      className: classes.title,\n      onChange: event => {\n        const navtitleFieldState = form.getFieldState('navtitle');\n\n        if (navtitleFieldState.modified && navtitleFieldState.touched) {\n          return;\n        }\n\n        const newNavtitle = slugifyURI(event.target.value);\n        form.change('navtitle', newNavtitle);\n      },\n      validate: required()\n    }), React.createElement(TextInput, {\n      resource: \"documents\",\n      source: \"navtitle\",\n      className: classes.navtitle,\n      validate: [required(), checkUnicity(navtitles), checkSpecialCharacters()]\n    }));\n  }), React.createElement(MarkdownInput, {\n    source: \"markdown\",\n    formClassName: classes.markdown,\n    validate: required(),\n    isRequired: true,\n    fullWidth: true\n  }));\n};\nexport const DocumentCreateForm = ({\n  document,\n  entityType,\n  entityUuid,\n  allDocuments = [],\n  onSaved = () => {},\n  onCancel = () => {}\n}) => {\n  const notify = useNotify();\n  const refresh = useRefresh();\n\n  const _useCreate = useCreate('documents'),\n        _useCreate2 = _slicedToArray(_useCreate, 2),\n        create = _useCreate2[0],\n        _useCreate2$ = _useCreate2[1],\n        loading = _useCreate2$.loading,\n        error = _useCreate2$.error;\n\n  const handleSave = newDocument => {\n    const documentId = buildDocumentId(entityType, entityUuid, newDocument.navtitle, newDocument.locale);\n    create({\n      payload: {\n        data: Object.assign(Object.assign({}, newDocument), {\n          id: documentId\n        })\n      }\n    }, {\n      action: CRUD_CREATE,\n      onSuccess: ({\n        data\n      }) => {\n        notify('resources.documents.notifications.create_success');\n        refresh();\n        onSaved(data);\n      },\n      onFailure: () => {\n        notify('resources.documents.notifications.create_error');\n      }\n    });\n  };\n\n  return React.createElement(DocumentForm, {\n    document: document,\n    loading: loading,\n    error: error,\n    allDocuments: allDocuments,\n    onSave: handleSave,\n    onCancel: onCancel\n  });\n};","map":null,"metadata":{},"sourceType":"module"}