{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport get from 'lodash/get';\nimport { useTranslate, useGetManyReference } from 'ra-core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TabScrollButton from '@material-ui/core/Tabs/TabScrollButton';\nimport classnames from 'classnames';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      margin: 0,\n      padding: 0,\n      maxWidth: 300,\n      minHeight: 'unset',\n      position: 'relative'\n    },\n    tab: {\n      minHeight: 'unset',\n      minWidth: 'unset',\n      maxWidth: 'unset',\n      paddingBottom: 0,\n      paddingTop: 0,\n      paddingLeft: theme.spacing(0.5),\n      paddingRight: theme.spacing(0.5)\n    },\n    tag: {\n      borderRadius: theme.spacing(0.5),\n      backgroundColor: 'transparent',\n      border: '1px solid',\n      '& + &': {\n        marginLeft: theme.spacing()\n      }\n    },\n    error: {\n      color: theme.palette.error.main,\n      marginBottom: theme.spacing()\n    }\n  };\n});\nexport var TagsField = function TagsField(props) {\n  var className = props.className,\n      record = props.record,\n      source = props.source,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'outlined' : _props$variant,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'small' : _props$size;\n  var classes = useStyles(props);\n  var tags = get(record, source, []);\n  return React.createElement(Tabs, {\n    variant: \"scrollable\",\n    className: classes.root,\n    scrollButtons: \"on\",\n    ScrollButtonComponent: TagsFieldScrollButton,\n    component: \"ul\",\n    value: false\n  }, tags.map(function (tag) {\n    return React.createElement(Tab, {\n      key: tag,\n      className: classes.tab,\n      disableFocusRipple: true,\n      disableRipple: true,\n      component: \"li\",\n      value: tag,\n      label: React.createElement(Chip, {\n        label: tag,\n        className: classnames(classes.tag, className),\n        color: color,\n        variant: variant,\n        size: size\n      })\n    });\n  }));\n};\nexport var TagsFieldScrollButton = function TagsFieldScrollButton(props) {\n  var onClick = props.onClick,\n      rest = __rest(props, [\"onClick\"]);\n\n  var handleClick = function handleClick(event) {\n    event.stopPropagation();\n    onClick(event);\n  };\n\n  return React.createElement(TabScrollButton, Object.assign({\n    onClick: handleClick\n  }, rest));\n};\nexport var AsyncTagsField = function AsyncTagsField(props) {\n  var id = props.id,\n      _props$variant2 = props.variant,\n      variant = _props$variant2 === void 0 ? 'outlined' : _props$variant2,\n      _props$color2 = props.color,\n      color = _props$color2 === void 0 ? 'primary' : _props$color2;\n  var translate = useTranslate();\n  var classes = useStyles(props);\n\n  var _useGetManyReference = useGetManyReference('tags', 'id', id, undefined, undefined, undefined, 'apis'),\n      data = _useGetManyReference.data,\n      loaded = _useGetManyReference.loaded,\n      error = _useGetManyReference.error;\n\n  if (!loaded) {\n    return React.createElement(LinearProgress, null);\n  }\n\n  if (error) {\n    return React.createElement(Typography, {\n      variant: \"body2\",\n      className: classes.error\n    }, translate('ra.page.error'));\n  }\n\n  var tags = data ? Object.keys(data).map(function (key) {\n    return data[key];\n  }) : [];\n  return React.createElement(React.Fragment, null, tags.map(function (tag) {\n    return React.createElement(Chip, {\n      key: tag.id,\n      label: tag.name,\n      className: classes.tag,\n      variant: variant,\n      color: color\n    });\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}