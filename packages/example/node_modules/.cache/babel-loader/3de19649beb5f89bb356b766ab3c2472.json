{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { credentialsAuthProvider } from './credentialsAuthProvider';\nvar AUTH_PROVIDER_LOGIN_SCHEME = 'auth-login-scheme';\nexport var authProvider = function authProvider(baseUrl, tenantName) {\n  var adminUrl = \"\".concat(baseUrl, \"/admin\");\n  var apiUrl = \"\".concat(baseUrl, \"/api/\").concat(tenantName);\n  var providers = {\n    credentials: credentialsAuthProvider(apiUrl, adminUrl)\n  };\n  var schemeUsedForLogin = null;\n\n  var getSchemeUsedForLogin = function getSchemeUsedForLogin() {\n    if (!schemeUsedForLogin) {\n      schemeUsedForLogin = localStorage.getItem(AUTH_PROVIDER_LOGIN_SCHEME);\n    }\n\n    return schemeUsedForLogin;\n  };\n\n  var setSchemeUsedForLogin = function setSchemeUsedForLogin(scheme) {\n    localStorage.setItem(AUTH_PROVIDER_LOGIN_SCHEME, scheme);\n  };\n\n  var getProviderUsedForLogin = function getProviderUsedForLogin() {\n    var scheme = getSchemeUsedForLogin();\n    return providers[scheme];\n  };\n\n  return {\n    login: function login(_a) {\n      var scheme, params, authProviderUsedForLogin;\n      return _regeneratorRuntime.async(function login$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              scheme = _a.scheme, params = __rest(_a, [\"scheme\"]);\n              setSchemeUsedForLogin(scheme);\n              authProviderUsedForLogin = getProviderUsedForLogin();\n\n              if (authProviderUsedForLogin) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error(\"Unknown authentication scheme \".concat(scheme));\n\n            case 5:\n              return _context.abrupt(\"return\", authProviderUsedForLogin.login(params));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    },\n    logout: function logout() {\n      var authProviderUsedForLogin = getProviderUsedForLogin();\n\n      if (authProviderUsedForLogin) {\n        return authProviderUsedForLogin.logout();\n      }\n\n      return Promise.resolve();\n    },\n    checkAuth: function checkAuth() {\n      var authProviderUsedForLogin = getProviderUsedForLogin();\n\n      if (authProviderUsedForLogin) {\n        return authProviderUsedForLogin.checkAuth();\n      }\n\n      return Promise.resolve();\n    },\n    checkError: function checkError(error) {\n      var status = error.status;\n\n      if (!status) {\n        // TypeError: Network request failed\n        return Promise.reject(error);\n      }\n\n      switch (error.status) {\n        case 401: // Unauthorized\n\n        case 500:\n          // Internal Server Error\n          return Promise.reject(error);\n\n        default:\n          return Promise.resolve();\n      }\n    },\n    getPermissions: function getPermissions() {\n      var authProviderUsedForLogin;\n      return _regeneratorRuntime.async(function getPermissions$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              authProviderUsedForLogin = getProviderUsedForLogin();\n\n              if (!authProviderUsedForLogin) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", authProviderUsedForLogin.getPermissions());\n\n            case 3:\n              return _context2.abrupt(\"return\", Promise.resolve());\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}