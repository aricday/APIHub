{"ast":null,"code":"import _slicedToArray from \"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef, useMemo, useState } from 'react';\nimport TreeView from '@material-ui/lab/TreeView';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport { makeStyles } from '@material-ui/core';\nimport get from 'lodash/get';\nimport { useTranslate } from 'ra-core';\nexport const DocumentationTree = ({\n  items,\n  onDocumentSelected,\n  selectedDocumentId,\n  expanded: controlledExpanded,\n  onExpandedChange\n}) => {\n  const _useState = useState(items.filter(item => !item.parentUuid).map(item => item.id)),\n        _useState2 = _slicedToArray(_useState, 2),\n        uncontrolledExpanded = _useState2[0],\n        setExpanded = _useState2[1];\n\n  const expanded = controlledExpanded || uncontrolledExpanded;\n  const tree = useMemo(() => getDocumentationTree(items, sortByOrdinal), [items]);\n\n  const handleExpandedChange = newExpanded => {\n    if (onExpandedChange) {\n      return onExpandedChange(newExpanded);\n    }\n\n    setExpanded(newExpanded);\n  };\n\n  const handleSelectDocument = (event, node) => {\n    event.preventDefault();\n    onDocumentSelected(node);\n  };\n\n  const handleCollapse = (event, nodeId) => handleExpandedChange(expanded.filter(item => item !== nodeId));\n\n  const handleExpand = (event, nodeId) => handleExpandedChange([...expanded, nodeId]);\n\n  const handleNodeToggle = (event, nodes) => handleExpandedChange(nodes);\n\n  return React.createElement(TreeView, {\n    defaultEndIcon: React.createElement(\"div\", {\n      style: {\n        width: 24\n      }\n    }),\n    expanded: expanded,\n    onNodeToggle: handleNodeToggle,\n    selected: selectedDocumentId\n  }, tree.map(item => React.createElement(RecursiveTreeItem, {\n    key: item.id,\n    node: item,\n    nodeId: item.id,\n    onSelect: handleSelectDocument,\n    onCollapse: handleCollapse,\n    onExpand: handleExpand\n  })));\n};\nconst RecursiveTreeItem = forwardRef((props, ref) => {\n  const node = props.node,\n        onSelect = props.onSelect,\n        onExpand = props.onExpand,\n        onCollapse = props.onCollapse,\n        rest = __rest(props, [\"node\", \"onSelect\", \"onExpand\", \"onCollapse\"]);\n\n  const classes = useRecursiveTreeItemStyles(props);\n  const translate = useTranslate();\n\n  const handleClick = event => {\n    // If the node does not have an uuid, it's a new document\n    // and it shouldn't handle collapse, expand or select\n    if (node && node.uuid && onSelect) {\n      onSelect(event, node);\n    }\n  };\n\n  const handleCollapse = event => {\n    // Stop event propagation to avoid loading the node\n    event.stopPropagation(); // If the node does not have an uuid, it's a new document\n    // and it shouldn't handle collapse, expand or select\n\n    if (node && node.uuid && onCollapse) {\n      onCollapse(event, node.id);\n    }\n  };\n\n  const handleExpand = event => {\n    // Stop event propagation to avoid loading the node\n    event.stopPropagation(); // If the node does not have an uuid, it's a new document\n    // and it shouldn't handle collapse, expand or select\n\n    if (node && node.uuid && onExpand) {\n      onExpand(event, node.id);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.altKey || event.currentTarget !== event.target) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      onSelect(event, node);\n    }\n  };\n\n  return React.createElement(TreeItem, Object.assign({\n    classes: classes,\n    label: node.title,\n    onClick: handleClick,\n    collapseIcon: React.createElement(ArrowDropDownIcon, {\n      role: \"button\",\n      \"aria-label\": translate('resources.apis.collapse_documentation', {\n        title: node.title,\n        _: `resources.apis.collapse_documentation.${node.title}`\n      }),\n      onClick: handleCollapse\n    }),\n    expandIcon: React.createElement(ArrowRightIcon, {\n      role: \"button\",\n      \"aria-label\": translate('resources.apis.expand_documentation', {\n        title: node.title,\n        _: `resources.apis.expand_documentation.${node.title}`\n      }),\n      onClick: handleExpand\n    }),\n    ref: ref,\n    onKeyDown: handleKeyDown\n  }, rest), node.children && node.children.length > 0 ? node.children.map(child => React.createElement(RecursiveTreeItem, {\n    key: child.id,\n    node: child,\n    nodeId: child.id,\n    onSelect: onSelect,\n    onExpand: onExpand,\n    onCollapse: onCollapse\n  })) : null);\n});\nconst useRecursiveTreeItemStyles = makeStyles(theme => ({\n  content: {\n    padding: theme.spacing(1),\n    paddingLeft: 0\n  },\n  label: {}\n}));\nexport const sortByOrdinal = (a, b) => a.ordinal - b.ordinal;\nexport const getDocumentationTree = (items, sortFn = a => a) => {\n  return items.filter(item => !item.parentUuid).reduce((acc, item) => {\n    item.children = getChildDocuments(item, items);\n    acc.push(item);\n    return acc;\n  }, []).sort(sortFn);\n};\nexport const getChildDocuments = (parent, items, sortFn = a => a) => {\n  return items.filter(item => item.parentUuid === parent.uuid && !!parent.uuid).reduce((acc, item) => {\n    item.children = getChildDocuments(item, items);\n    acc.push(item);\n    return acc;\n  }, []).sort(sortFn);\n};\nexport const getSiblingsDocuments = (items = [], parentUuid = undefined) => {\n  if (parentUuid === undefined) {\n    return items;\n  }\n\n  let i = 0;\n\n  while (i < items.length) {\n    const item = items[i];\n    const children = get(item, 'children', []);\n\n    if (item.uuid === parentUuid) {\n      return children;\n    }\n\n    const result = getSiblingsDocuments(children, parentUuid);\n\n    if (result.length > 0) {\n      return result;\n    }\n\n    i++;\n  }\n\n  return [];\n};\nexport const documentHasChildren = (items, document) => {\n  return items.some(node => node.parentUuid === document.uuid);\n};\nexport const getMaxOrdinalFromDocuments = items => {\n  if (!Array.isArray(items) || items.length === 0) {\n    return -1;\n  }\n\n  const sortedSiblingsItems = items.sort((itemA, itemB) => itemB.ordinal - itemA.ordinal);\n  return sortedSiblingsItems[0].ordinal;\n};","map":null,"metadata":{},"sourceType":"module"}