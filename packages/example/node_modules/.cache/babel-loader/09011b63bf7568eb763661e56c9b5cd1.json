{"ast":null,"code":"import get from 'lodash/get';\nimport set from 'lodash/set';\nimport { combineReducers } from 'redux';\nexport var SAVE_EXPANDED_NODES = '@layer7/SAVE_EXPANDED_NODES';\nexport var ADD_EXPANDED_NODES = '@layer7/ADD_EXPANDED_NODES';\nexport var DOCUMENT_ADDED = '@layer7/DOCUMENT_ADDED';\nexport var documentationTreeReducer = function documentationTreeReducer() {\n  var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  if (!payload || !payload.entityUuid || !payload.locale) {\n    return previousState;\n  }\n\n  switch (type) {\n    case SAVE_EXPANDED_NODES:\n      {\n        var newState = Object.assign({}, previousState);\n        return set(newState, \"\".concat(payload.entityUuid, \"[\").concat(payload.locale, \"]\"), payload.expandedNodes);\n      }\n\n    case ADD_EXPANDED_NODES:\n      {\n        var newExpandedNodes = new Set(get(previousState, \"\".concat(payload.entityUuid, \"[\").concat(payload.locale, \"]\"), []));\n        payload.nodeIds.forEach(function (id) {\n          return newExpandedNodes.add(id);\n        });\n\n        var _newState = Object.assign({}, previousState);\n\n        return set(_newState, \"\".concat(payload.entityUuid, \"[\").concat(payload.locale, \"]\"), Array.from(newExpandedNodes));\n      }\n\n    default:\n      return previousState;\n  }\n};\nexport var newDocument = function newDocument() {\n  var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _ref2 = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref2.type,\n      payload = _ref2.payload;\n\n  switch (type) {\n    case DOCUMENT_ADDED:\n      return payload;\n\n    default:\n      return previousState;\n  }\n};\nexport var documentationReducer = {\n  documentation: combineReducers({\n    documentationTree: documentationTreeReducer,\n    newDocument: newDocument\n  })\n}; // Tree\n\nexport var saveExpandedNodes = function saveExpandedNodes(entityUuid, locale, expandedNodes) {\n  return {\n    type: SAVE_EXPANDED_NODES,\n    payload: {\n      entityUuid: entityUuid,\n      locale: locale,\n      expandedNodes: expandedNodes\n    }\n  };\n};\nexport var addExpandedNodes = function addExpandedNodes(entityUuid, locale, nodeIds) {\n  return {\n    type: ADD_EXPANDED_NODES,\n    payload: {\n      entityUuid: entityUuid,\n      locale: locale,\n      nodeIds: nodeIds\n    }\n  };\n};\nexport var selectExpandedNodes = function selectExpandedNodes(entityUuid, locale) {\n  return function (state) {\n    return get(state, \"documentation.documentationTree.\".concat(entityUuid, \".\").concat(locale), []);\n  };\n}; // New Document\n\nexport var addNewDocument = function addNewDocument(document) {\n  return {\n    type: DOCUMENT_ADDED,\n    payload: document\n  };\n};\nexport var removeNewDocument = function removeNewDocument() {\n  return {\n    type: DOCUMENT_ADDED,\n    payload: null\n  };\n};\nexport var getNewDocument = function getNewDocument(state) {\n  return state.documentation.newDocument;\n};","map":null,"metadata":{},"sourceType":"module"}