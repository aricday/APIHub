{"ast":null,"code":"import { apisDataProvider } from './apis';\nimport { applicationsDataProvider } from './applications';\nimport { assetsDataProvider } from './assets';\nimport { specsDataProvider } from './specs';\nimport { tagsDataProvider } from './tags';\nimport { documentsDataProvider } from './documents';\nimport { userContextsDataProvider } from './userContexts';\nexport var dataProvider = function dataProvider(baseUrl, tenantName) {\n  var adminUrl = \"\".concat(baseUrl, \"/admin\");\n  var apiUrl = \"\".concat(baseUrl, \"/api/\").concat(tenantName);\n  var resourcesMap = {\n    apis: apisDataProvider(apiUrl, adminUrl),\n    applications: applicationsDataProvider(apiUrl),\n    assets: assetsDataProvider(apiUrl),\n    tags: tagsDataProvider(apiUrl),\n    specs: specsDataProvider(apiUrl),\n    documents: documentsDataProvider(apiUrl),\n    userContexts: userContextsDataProvider(apiUrl)\n  };\n  var proxy = new Proxy(fakeDataProvider, {\n    get: function get(target, name) {\n      return function (resource, params) {\n        var resourceDataProvider = resourcesMap[resource];\n\n        if (!resourceDataProvider) {\n          throw new Error(\"Invalid resource \\\"\".concat(resource, \"\\\"\"));\n        }\n\n        if (!resourceDataProvider[name]) {\n          throw new Error(\"Invalid action \\\"\".concat(name, \"\\\" for resource \\\"\").concat(resource, \"\\\"\"));\n        }\n\n        return resourceDataProvider[name](params);\n      };\n    }\n  });\n  return proxy;\n}; // Only used to configure the proxy\n\nvar fakeDataProvider = {\n  create: function create() {\n    return Promise.resolve(null);\n  },\n  delete: function _delete() {\n    return Promise.resolve(null);\n  },\n  deleteMany: function deleteMany() {\n    return Promise.resolve(null);\n  },\n  getList: function getList() {\n    return Promise.resolve(null);\n  },\n  getMany: function getMany() {\n    return Promise.resolve(null);\n  },\n  getManyReference: function getManyReference() {\n    return Promise.resolve(null);\n  },\n  getOne: function getOne() {\n    return Promise.resolve(null);\n  },\n  update: function update() {\n    return Promise.resolve(null);\n  },\n  updateMany: function updateMany() {\n    return Promise.resolve(null);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}