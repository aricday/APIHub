{"ast":null,"code":"import _slicedToArray from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useEffect,useState}from'react';import{makeStyles,Typography}from'@material-ui/core';import{useTranslate}from'ra-core';import{useApiHub}from'../../ApiHubContext';import{extractTokenFromUrl}from'../extractTokenFromUrl';import{NewPasswordForm}from'./NewPasswordForm';import{VerifyingToken}from'./VerifyingToken';import{InvalidToken}from'./InvalidToken';import{Success}from'./Success';import{AuthenticationLayout}from'../AuthenticationLayout';import{usePasswordEncryption}from'../usePasswordEncryption';/**\n * The page displaying the form used to create a new password\n *\n * @param {*} Header A React Component used as the page header\n * @param {*} Content A React Component used to display some content next to the new password form\n * @param {*} Footer A React Component used as the page footer\n *\n * @example <caption>Simple usage</caption>\n * <NewPasswordPage />\n *\n * const MyApp = props => <Admin newPasswordPage={MyNewPassword} {...props} />\n *\n * @example <caption>With customized parts</caption>\n * const Header = () => <header><h1>My company</h1></header>\n * const Footer = () => <footer>Copyright Â© 2020 My Company. All Rights Reserved</footer>\n * const Content = () => <section><p>Welcome to My Product.</p></section>\n *\n * const MyNewPasswordPage = props => (\n *     <NewPasswordPage\n *         Header={CustomHeader}\n *         Content={CustomContent}\n *         Footer={CustomFooter}\n *         {...props}\n *     />\n * );\n *\n * const MyApp = props => <Admin newPasswordPage={MyNewPassword} {...props} />\n */export var NewPasswordPage=function NewPasswordPage(_ref){var location=_ref.location,_ref$Layout=_ref.Layout,Layout=_ref$Layout===void 0?AuthenticationLayout:_ref$Layout,props=_objectWithoutProperties(_ref,[\"location\",\"Layout\"]);var _useSetNewPassword=useSetNewPassword(location),_useSetNewPassword2=_slicedToArray(_useSetNewPassword,2),state=_useSetNewPassword2[0],handleSubmit=_useSetNewPassword2[1];var translate=useTranslate();var classes=useStyles(props);return React.createElement(Layout,props,state==='verifying_token'?React.createElement(VerifyingToken,null):state==='request_new_password'?React.createElement(React.Fragment,null,React.createElement(Typography,{variant:\"h2\",className:classes.title},translate('apihub.new_password.title')),React.createElement(NewPasswordForm,{onSubmit:handleSubmit,variant:\"outlined\"})):state==='invalid_token'?React.createElement(InvalidToken,null):state==='success'?React.createElement(Success,null):null);};var useStyles=makeStyles(function(theme){return{title:{fontSize:theme.typography.fontSize*2,marginBottom:theme.spacing(6),color:theme.palette.getContrastText(theme.palette.background[\"default\"])}};});/**\n * This hook extracts the new password token from the url, verifies it and provides\n * a function to set the new password.\n *\n * It returns a tupple containing the current status (verifying_token, invalid_token, request_new_password and success)\n * and a function to actually submit the new password.\n */var useSetNewPassword=function useSetNewPassword(location){var _useState=useState('verifying_token'),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useApiHub=useApiHub(),url=_useApiHub.url;var token=extractTokenFromUrl(location.hash);var _usePasswordEncryptio=usePasswordEncryption(),_usePasswordEncryptio2=_slicedToArray(_usePasswordEncryptio,2),publicKey=_usePasswordEncryptio2[0],encrypt=_usePasswordEncryptio2[1];useEffect(function(){if(state==='verifying_token'){verifyNewPasswordTokenValid(url,token).then(function(isVerified){setState(isVerified?'request_new_password':'invalid_token');});}},[url,token,state]);var handleSubmit=function handleSubmit(_ref2){var password=_ref2.password;var finalPassword=password;if(publicKey){finalPassword=encrypt(password);}return submitNewPassword(url,{password:finalPassword,token:token}).then(function(isSuccessful){return setState(isSuccessful?'success':'request_new_password');});};return[state,handleSubmit];};var submitNewPassword=function submitNewPassword(apiBaseUrl,_ref3){var password=_ref3.password,token=_ref3.token;return fetch(\"\".concat(apiBaseUrl,\"/admin/UpdateMyPassword\"),{method:'post',body:{password:password,token:token}}).then(function(response){return response.status>=200&&response.status<300;})[\"catch\"](function(){return false;});};var verifyNewPasswordTokenValid=function verifyNewPasswordTokenValid(apiBaseUrl,token){return fetch(\"\".concat(apiBaseUrl,\"/admin/passwordResetTokenValidate?token=\").concat(token)).then(function(response){return response.json();}).then(function(json){return!!json;})[\"catch\"](function(error){return console.error(error)||false;});};NewPasswordPage.__docgenInfo={\"description\":\"The page displaying the form used to create a new password\\n\\n@param {*} Header A React Component used as the page header\\n@param {*} Content A React Component used to display some content next to the new password form\\n@param {*} Footer A React Component used as the page footer\\n\\n@example <caption>Simple usage</caption>\\n<NewPasswordPage />\\n\\nconst MyApp = props => <Admin newPasswordPage={MyNewPassword} {...props} />\\n\\n@example <caption>With customized parts</caption>\\nconst Header = () => <header><h1>My company</h1></header>\\nconst Footer = () => <footer>Copyright \\xA9 2020 My Company. All Rights Reserved</footer>\\nconst Content = () => <section><p>Welcome to My Product.</p></section>\\n\\nconst MyNewPasswordPage = props => (\\n    <NewPasswordPage\\n        Header={CustomHeader}\\n        Content={CustomContent}\\n        Footer={CustomFooter}\\n        {...props}\\n    />\\n);\\n\\nconst MyApp = props => <Admin newPasswordPage={MyNewPassword} {...props} />\",\"methods\":[],\"displayName\":\"NewPasswordPage\",\"props\":{\"Layout\":{\"defaultValue\":{\"value\":\"AuthenticationLayout\",\"computed\":true},\"required\":false}}};if(typeof STORYBOOK_REACT_CLASSES!==\"undefined\"){STORYBOOK_REACT_CLASSES[\"src/authentication/NewPassword/NewPassword.js\"]={name:\"NewPasswordPage\",docgenInfo:NewPasswordPage.__docgenInfo,path:\"src/authentication/NewPassword/NewPassword.js\"};}","map":{"version":3,"sources":["/Users/aricday/Projects/APIHub/packages/layer7-apihub/src/authentication/NewPassword/NewPassword.js"],"names":["React","useEffect","useState","makeStyles","Typography","useTranslate","useApiHub","extractTokenFromUrl","NewPasswordForm","VerifyingToken","InvalidToken","Success","AuthenticationLayout","usePasswordEncryption","NewPasswordPage","location","Layout","props","useSetNewPassword","state","handleSubmit","translate","classes","useStyles","title","theme","fontSize","typography","marginBottom","spacing","color","palette","getContrastText","background","setState","url","token","hash","publicKey","encrypt","verifyNewPasswordTokenValid","then","isVerified","password","finalPassword","submitNewPassword","isSuccessful","apiBaseUrl","fetch","method","body","response","status","json","error","console"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles, Typography } from '@material-ui/core';\nimport { useTranslate } from 'ra-core';\n\nimport { useApiHub } from '../../ApiHubContext';\nimport { extractTokenFromUrl } from '../extractTokenFromUrl';\nimport { NewPasswordForm } from './NewPasswordForm';\nimport { VerifyingToken } from './VerifyingToken';\nimport { InvalidToken } from './InvalidToken';\nimport { Success } from './Success';\nimport { AuthenticationLayout } from '../AuthenticationLayout';\nimport { usePasswordEncryption } from '../usePasswordEncryption';\n\n/**\n * The page displaying the form used to create a new password\n *\n * @param {*} Header A React Component used as the page header\n * @param {*} Content A React Component used to display some content next to the new password form\n * @param {*} Footer A React Component used as the page footer\n *\n * @example <caption>Simple usage</caption>\n * <NewPasswordPage />\n *\n * const MyApp = props => <Admin newPasswordPage={MyNewPassword} {...props} />\n *\n * @example <caption>With customized parts</caption>\n * const Header = () => <header><h1>My company</h1></header>\n * const Footer = () => <footer>Copyright Â© 2020 My Company. All Rights Reserved</footer>\n * const Content = () => <section><p>Welcome to My Product.</p></section>\n *\n * const MyNewPasswordPage = props => (\n *     <NewPasswordPage\n *         Header={CustomHeader}\n *         Content={CustomContent}\n *         Footer={CustomFooter}\n *         {...props}\n *     />\n * );\n *\n * const MyApp = props => <Admin newPasswordPage={MyNewPassword} {...props} />\n */\nexport const NewPasswordPage = ({\n    location,\n    Layout = AuthenticationLayout,\n    ...props\n}) => {\n    const [state, handleSubmit] = useSetNewPassword(location);\n    const translate = useTranslate();\n    const classes = useStyles(props);\n\n    return (\n        <Layout {...props}>\n            {state === 'verifying_token' ? (\n                <VerifyingToken />\n            ) : state === 'request_new_password' ? (\n                <>\n                    <Typography variant=\"h2\" className={classes.title}>\n                        {translate('apihub.new_password.title')}\n                    </Typography>\n                    <NewPasswordForm\n                        onSubmit={handleSubmit}\n                        variant=\"outlined\"\n                    />\n                </>\n            ) : state === 'invalid_token' ? (\n                <InvalidToken />\n            ) : state === 'success' ? (\n                <Success />\n            ) : null}\n        </Layout>\n    );\n};\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        fontSize: theme.typography.fontSize * 2,\n        marginBottom: theme.spacing(6),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n}));\n\n/**\n * This hook extracts the new password token from the url, verifies it and provides\n * a function to set the new password.\n *\n * It returns a tupple containing the current status (verifying_token, invalid_token, request_new_password and success)\n * and a function to actually submit the new password.\n */\nconst useSetNewPassword = location => {\n    const [state, setState] = useState('verifying_token');\n\n    const { url } = useApiHub();\n    const token = extractTokenFromUrl(location.hash);\n    const [publicKey, encrypt] = usePasswordEncryption();\n\n    useEffect(() => {\n        if (state === 'verifying_token') {\n            verifyNewPasswordTokenValid(url, token).then(isVerified => {\n                setState(isVerified ? 'request_new_password' : 'invalid_token');\n            });\n        }\n    }, [url, token, state]);\n\n    const handleSubmit = ({ password }) => {\n        let finalPassword = password;\n        if (publicKey) {\n            finalPassword = encrypt(password);\n        }\n        return submitNewPassword(url, {\n            password: finalPassword,\n            token,\n        }).then(isSuccessful =>\n            setState(isSuccessful ? 'success' : 'request_new_password')\n        );\n    };\n\n    return [state, handleSubmit];\n};\n\nconst submitNewPassword = (apiBaseUrl, { password, token }) =>\n    fetch(`${apiBaseUrl}/admin/UpdateMyPassword`, {\n        method: 'post',\n        body: { password, token },\n    })\n        .then(response => response.status >= 200 && response.status < 300)\n        .catch(() => false);\n\nconst verifyNewPasswordTokenValid = (apiBaseUrl, token) =>\n    fetch(`${apiBaseUrl}/admin/passwordResetTokenValidate?token=${token}`)\n        .then(response => response.json())\n        .then(json => !!json)\n        .catch(error => console.error(error) || false);\n"]},"metadata":{},"sourceType":"module"}