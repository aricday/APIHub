{"ast":null,"code":"import{useLocalStorage}from'@rehooks/local-storage';var DEFAULT_STORAGE_KEY='@layer7/preferences';/**\n * An hook to get, write or delete a preference.\n * The preferences will be synchronized between all the browser tabs\n * that share same localstorage.\n *\n * @param {string} preferenceName The preference name\n * @param {*} defaultPreference the default preference (is case there isn't)\n *\n * @example <caption>Simple usage</caption>\n *\n * const MyComponent = () => {\n *     const [customPreference, writeCustomPreference] = useApiHubPreference(\n *         'custom',\n *         'default value'\n *     );\n *\n *     console.log(customPreference); // 1st render: shows \"default value\", 2nd render: shows 'hello'\n *\n *     const handleClick = () => {\n *         writeCustomPreference('hello'); // Triggers an update of the useApiHubPreference hook\n *     };\n *\n *     return <button onClick={handleClick} />;\n * };\n *\n */export var useApiHubPreference=function useApiHubPreference(preferenceName,defaultPreference){return useLocalStorage(\"\".concat(DEFAULT_STORAGE_KEY,\"/\").concat(preferenceName),defaultPreference);};/**\n * A method to get a preference from the localstorage. Be careful, it's not a hook.\n * The preference will NOT be synchronized every time the preference is updated in the localstorage.\n *\n * Use it only to get an initial preference.\n *\n * @param {string} preferenceName The preference name\n * @param {*} defaultPreference the default preference (is case there isn't)\n *\n */export var readApiHubPreference=function readApiHubPreference(preferenceName,defaultPreference){return localStorage.getItem(\"\".concat(DEFAULT_STORAGE_KEY,\"/\").concat(preferenceName))||defaultPreference;};/**\n * A method to write a preference in the localstorage. Be careful, it's not a hook.\n * The new preference will NOT be synchronized.\n *\n * Use it only to set an initial preference.\n *\n * @param {string} preferenceName The preference name\n * @param {*} newPreference the new preference to save\n *\n */export var writeApiHubPreference=function writeApiHubPreference(preferenceName,newPreference){localStorage.setItem(\"\".concat(DEFAULT_STORAGE_KEY,\"/\").concat(preferenceName),newPreference);};","map":{"version":3,"sources":["/Users/aricday/Projects/APIHub/packages/layer7-apihub/src/preferences/useApiHubPreferences.js"],"names":["useLocalStorage","DEFAULT_STORAGE_KEY","useApiHubPreference","preferenceName","defaultPreference","readApiHubPreference","localStorage","getItem","writeApiHubPreference","newPreference","setItem"],"mappings":"AAAA,OAASA,eAAT,KAAgC,wBAAhC,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,qBAA5B,CAEA;;;;;;;;;;;;;;;;;;;;;;;;;GA0BA,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,cAAD,CAAiBC,iBAAjB,CAAuC,CACtE,MAAOJ,CAAAA,eAAe,WACfC,mBADe,aACQE,cADR,EAElBC,iBAFkB,CAAtB,CAIH,CALM,CAOP;;;;;;;;;GAUA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACF,cAAD,CAAiBC,iBAAjB,CAAuC,CACvE,MACIE,CAAAA,YAAY,CAACC,OAAb,WAAwBN,mBAAxB,aAA+CE,cAA/C,IACAC,iBAFJ,CAIH,CALM,CAOP;;;;;;;;;GAUA,MAAO,IAAMI,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACL,cAAD,CAAiBM,aAAjB,CAAmC,CACpEH,YAAY,CAACI,OAAb,WACOT,mBADP,aAC8BE,cAD9B,EAEIM,aAFJ,EAIH,CALM","sourcesContent":["import { useLocalStorage } from '@rehooks/local-storage';\n\nconst DEFAULT_STORAGE_KEY = '@layer7/preferences';\n\n/**\n * An hook to get, write or delete a preference.\n * The preferences will be synchronized between all the browser tabs\n * that share same localstorage.\n *\n * @param {string} preferenceName The preference name\n * @param {*} defaultPreference the default preference (is case there isn't)\n *\n * @example <caption>Simple usage</caption>\n *\n * const MyComponent = () => {\n *     const [customPreference, writeCustomPreference] = useApiHubPreference(\n *         'custom',\n *         'default value'\n *     );\n *\n *     console.log(customPreference); // 1st render: shows \"default value\", 2nd render: shows 'hello'\n *\n *     const handleClick = () => {\n *         writeCustomPreference('hello'); // Triggers an update of the useApiHubPreference hook\n *     };\n *\n *     return <button onClick={handleClick} />;\n * };\n *\n */\nexport const useApiHubPreference = (preferenceName, defaultPreference) => {\n    return useLocalStorage(\n        `${DEFAULT_STORAGE_KEY}/${preferenceName}`,\n        defaultPreference\n    );\n};\n\n/**\n * A method to get a preference from the localstorage. Be careful, it's not a hook.\n * The preference will NOT be synchronized every time the preference is updated in the localstorage.\n *\n * Use it only to get an initial preference.\n *\n * @param {string} preferenceName The preference name\n * @param {*} defaultPreference the default preference (is case there isn't)\n *\n */\nexport const readApiHubPreference = (preferenceName, defaultPreference) => {\n    return (\n        localStorage.getItem(`${DEFAULT_STORAGE_KEY}/${preferenceName}`) ||\n        defaultPreference\n    );\n};\n\n/**\n * A method to write a preference in the localstorage. Be careful, it's not a hook.\n * The new preference will NOT be synchronized.\n *\n * Use it only to set an initial preference.\n *\n * @param {string} preferenceName The preference name\n * @param {*} newPreference the new preference to save\n *\n */\nexport const writeApiHubPreference = (preferenceName, newPreference) => {\n    localStorage.setItem(\n        `${DEFAULT_STORAGE_KEY}/${preferenceName}`,\n        newPreference\n    );\n};\n"]},"metadata":{},"sourceType":"module"}