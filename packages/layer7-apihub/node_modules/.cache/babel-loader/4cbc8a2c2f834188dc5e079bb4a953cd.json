{"ast":null,"code":"import _objectWithoutProperties from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _slicedToArray from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import{useEffect,useState}from'react';import{useApiHub}from'../../ApiHubContext';import{extractTokenFromUrl}from'../extractTokenFromUrl';import{usePasswordEncryption}from'../usePasswordEncryption';export var fetchAccountData=function fetchAccountData(url,token){var response;return _regeneratorRuntime.async(function fetchAccountData$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(fetch(\"\".concat(url,\"/admin/accountSetup?token=\").concat(token)));case 2:response=_context.sent;if(!(response.status<200||response.status>=300)){_context.next=5;break;}throw new Error(response.statusText);case 5:_context.next=7;return _regeneratorRuntime.awrap(response.json());case 7:return _context.abrupt(\"return\",_context.sent);case 8:case\"end\":return _context.stop();}}});};export var submitAccountData=function submitAccountData(url,token,data){var response;return _regeneratorRuntime.async(function submitAccountData$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(fetch(\"\".concat(url,\"/admin/accountSetup?token=\").concat(token),{method:'put',body:_objectSpread({token:token},data)}));case 2:response=_context2.sent;if(!(response.status<200||response.status>=300)){_context2.next=5;break;}throw new Error(response.statusText);case 5:_context2.next=7;return _regeneratorRuntime.awrap(response.json());case 7:return _context2.abrupt(\"return\",_context2.sent);case 8:case\"end\":return _context2.stop();}}});};export var checkUsernameUnicity=function checkUsernameUnicity(url,username){var response;return _regeneratorRuntime.async(function checkUsernameUnicity$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regeneratorRuntime.awrap(fetch(\"\".concat(url,\"/admin/Portal.svc/UserNameUnique()?Name='\").concat(username,\"'\")));case 2:response=_context3.sent;if(!(response.status<200||response.status>=300)){_context3.next=5;break;}throw new Error(response.statusText);case 5:_context3.next=7;return _regeneratorRuntime.awrap(response.json());case 7:return _context3.abrupt(\"return\",_context3.sent);case 8:case\"end\":return _context3.stop();}}});};/**\n * This hook extracts the token from the url, fetch the account data and provides\n * a function to set up the account.\n *\n * It returns a tupple containing\n * - the current status of the form (prepare, fill, invalid_request and success)\n * - the account data to initialize the form\n * - a function to submit the new account data\n */export var useAccountData=function useAccountData(location){var _useState=useState('prepare'),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),accountData=_useState4[0],setAccountData=_useState4[1];var _useApiHub=useApiHub(),url=_useApiHub.url;var token=extractTokenFromUrl(location.hash);var _usePasswordEncryptio=usePasswordEncryption(),_usePasswordEncryptio2=_slicedToArray(_usePasswordEncryptio,2),publicKey=_usePasswordEncryptio2[0],encrypt=_usePasswordEncryptio2[1];useEffect(function(){if(state==='prepare'){fetchAccountData(url,token).then(function(_ref){var email=_ref.email,rest=_objectWithoutProperties(_ref,[\"email\"]);var isVerified=!!email;if(isVerified){setState('fill');setAccountData(_objectSpread({email:email},rest));return;}throw Error('Cannot get account setup data');})[\"catch\"](function(){setAccountData(null);setState('invalid_request');});}},[url,token,state,accountData]);var handleSubmitAccountData=function handleSubmitAccountData(data){var finalData=data;if(publicKey){finalData=_objectSpread({},data,{password:encrypt(data.password)});}return submitAccountData(url,token,finalData).then(function(){setState('success');});};return[state,accountData,handleSubmitAccountData];};","map":{"version":3,"sources":["/Users/aricday/Projects/APIHub/packages/layer7-apihub/src/authentication/AccountSetup/useAccountData.js"],"names":["useEffect","useState","useApiHub","extractTokenFromUrl","usePasswordEncryption","fetchAccountData","url","token","fetch","response","status","Error","statusText","json","submitAccountData","data","method","body","checkUsernameUnicity","username","useAccountData","location","state","setState","accountData","setAccountData","hash","publicKey","encrypt","then","email","rest","isVerified","handleSubmitAccountData","finalData","password"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useApiHub } from '../../ApiHubContext';\nimport { extractTokenFromUrl } from '../extractTokenFromUrl';\nimport { usePasswordEncryption } from '../usePasswordEncryption';\n\nexport const fetchAccountData = async (url, token) => {\n    const response = await fetch(`${url}/admin/accountSetup?token=${token}`);\n\n    if (response.status < 200 || response.status >= 300) {\n        throw new Error(response.statusText);\n    }\n\n    return await response.json();\n};\n\nexport const submitAccountData = async (url, token, data) => {\n    const response = await fetch(`${url}/admin/accountSetup?token=${token}`, {\n        method: 'put',\n        body: {\n            token,\n            ...data,\n        },\n    });\n\n    if (response.status < 200 || response.status >= 300) {\n        throw new Error(response.statusText);\n    }\n\n    return await response.json();\n};\n\nexport const checkUsernameUnicity = async (url, username) => {\n    const response = await fetch(\n        `${url}/admin/Portal.svc/UserNameUnique()?Name='${username}'`\n    );\n\n    if (response.status < 200 || response.status >= 300) {\n        throw new Error(response.statusText);\n    }\n\n    return await response.json();\n};\n\n/**\n * This hook extracts the token from the url, fetch the account data and provides\n * a function to set up the account.\n *\n * It returns a tupple containing\n * - the current status of the form (prepare, fill, invalid_request and success)\n * - the account data to initialize the form\n * - a function to submit the new account data\n */\nexport const useAccountData = location => {\n    const [state, setState] = useState('prepare');\n    const [accountData, setAccountData] = useState(null);\n\n    const { url } = useApiHub();\n    const token = extractTokenFromUrl(location.hash);\n    const [publicKey, encrypt] = usePasswordEncryption();\n\n    useEffect(() => {\n        if (state === 'prepare') {\n            fetchAccountData(url, token)\n                .then(({ email, ...rest }) => {\n                    const isVerified = !!email;\n                    if (isVerified) {\n                        setState('fill');\n                        setAccountData({ email, ...rest });\n                        return;\n                    }\n                    throw Error('Cannot get account setup data');\n                })\n                .catch(() => {\n                    setAccountData(null);\n                    setState('invalid_request');\n                });\n        }\n    }, [url, token, state, accountData]);\n\n    const handleSubmitAccountData = data => {\n        let finalData = data;\n        if (publicKey) {\n            finalData = {\n                ...data,\n                password: encrypt(data.password),\n            };\n        }\n        return submitAccountData(url, token, finalData).then(() => {\n            setState('success');\n        });\n    };\n\n    return [state, accountData, handleSubmitAccountData];\n};\n"]},"metadata":{},"sourceType":"module"}