{"ast":null,"code":"import _objectSpread from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,Children,cloneElement,useEffect,forwardRef}from'react';import Button from'@material-ui/core/Button';import Menu from'@material-ui/core/Menu';import MenuItem from'@material-ui/core/MenuItem';import ArrowDropDownIcon from'@material-ui/icons/ArrowDropDown';import SortIcon from'@material-ui/icons/Sort';import{makeStyles}from'@material-ui/core/styles';import{shallowEqual,useDispatch,useSelector}from'react-redux';import{changeListParams,useTranslate}from'ra-core';import{useHistory}from'react-router-dom';import{stringify}from'query-string';/**\n * A sort button to use on a list which does not display a datagrid.\n *\n * @param {String} resource The resource on which to apply the sort\n * @param {Object} currentSort The current sort\n * @param {Object} currentSort.field The currently sorted field (eg: \"name\")\n * @param {Object} currentSort.order The current sort order (eg: \"ASC\")\n *\n * @example <caption>Usage inside a custom toolbar for a <List></caption>\n * import { TopToolbar } from 'react-admin';\n *\n * const ApiListActions = ({\n *     currentSort, // injected by react-admin\n *     resource, // injected by react-admin\n *     ...props\n * }) => {\n *     return (\n *         <TopToolbar\n *             className={classnames(classes.root, className)}\n *             {...sanitizeListRestProps(props)}\n *         >\n *             <SortButton resource={resource} currentSort={currentSort}>\n *                 <SortMenuItem\n *                     label=\"resources.apis.list.sort.name.asc\" // Will be translated\n *                     sort={{ field: 'name', order: 'ASC' }}\n *                 />\n *                 <SortMenuItem\n *                     label=\"resources.apis.list.sort.name.desc\" // Will be translated\n *                     sort={{ field: 'name', order: 'DESC' }}\n *                 />\n *             </SortButton>\n *         </TopToolbar>\n *     );\n * };\n */export var SortButton=function SortButton(_ref){var children=_ref.children,resource=_ref.resource,currentSort=_ref.currentSort;var _useState=useState(),_useState2=_slicedToArray(_useState,2),currentSortLabel=_useState2[0],setCurrentSortLabel=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),anchorEl=_useState4[0],setAnchorEl=_useState4[1];var translate=useTranslate();var dispatch=useDispatch();var history=useHistory();var classes=useStyles();var listParams=useSelector(function(reduxState){return reduxState.admin.resources[resource]?reduxState.admin.resources[resource].list.params:{};},shallowEqual);var handleClick=function handleClick(event){setAnchorEl(event.currentTarget);};var handleClose=function handleClose(){setAnchorEl(null);};var handleMenuItemClick=function handleMenuItemClick(event,sortData){history.push({search:\"?\".concat(stringify(_objectSpread({},listParams,{filter:JSON.stringify(listParams.filter),sort:sortData.sort.field,order:sortData.sort.order})))});dispatch(changeListParams(resource,_objectSpread({},listParams,{sort:sortData.sort.field,order:sortData.sort.order})));handleClose();};useEffect(function(){var childrenAsArray=Children.toArray(children);if(childrenAsArray.length===0){return;}var selectedChild=childrenAsArray.find(function(child){return child.props.sort.field===currentSort.field&&child.props.sort.order===currentSort.order;});if(!selectedChild){if(process.env.NODE_ENV!=='production'){console.warn('The current sort parameters do not match the provided children');}selectedChild=childrenAsArray[0];}setCurrentSortLabel(translate(selectedChild.props.label));},[children,currentSort,translate]);return currentSortLabel?React.createElement(React.Fragment,null,React.createElement(Button,{\"aria-controls\":\"sort-menu\",\"aria-label\":currentSortLabel,\"aria-haspopup\":\"true\",onClick:handleClick,startIcon:React.createElement(SortIcon,null),endIcon:React.createElement(ArrowDropDownIcon,null),className:classes.root,size:\"small\",color:\"primary\"},currentSortLabel),React.createElement(Menu,{id:\"sort-menu\",anchorEl:anchorEl,keepMounted:true,open:Boolean(anchorEl),onClose:handleClose},Children.map(children,function(child){return cloneElement(child,_objectSpread({onClick:handleMenuItemClick},child.props));}))):null;};var useStyles=makeStyles(function(theme){return{root:{marginLeft:theme.spacing()}};});export var SortMenuItem=forwardRef(function(_ref2,ref){var label=_ref2.label,sort=_ref2.sort,onClick=_ref2.onClick;var translate=useTranslate();var handleClick=function handleClick(event){onClick(event,{label:label,sort:sort});};return React.createElement(MenuItem,{ref:ref,onClick:handleClick},translate(label,{_:label}));});SortButton.__docgenInfo={\"description\":\"A sort button to use on a list which does not display a datagrid.\\n\\n@param {String} resource The resource on which to apply the sort\\n@param {Object} currentSort The current sort\\n@param {Object} currentSort.field The currently sorted field (eg: \\\"name\\\")\\n@param {Object} currentSort.order The current sort order (eg: \\\"ASC\\\")\\n\\n@example <caption>Usage inside a custom toolbar for a <List></caption>\\nimport { TopToolbar } from 'react-admin';\\n\\nconst ApiListActions = ({\\n    currentSort, // injected by react-admin\\n    resource, // injected by react-admin\\n    ...props\\n}) => {\\n    return (\\n        <TopToolbar\\n            className={classnames(classes.root, className)}\\n            {...sanitizeListRestProps(props)}\\n        >\\n            <SortButton resource={resource} currentSort={currentSort}>\\n                <SortMenuItem\\n                    label=\\\"resources.apis.list.sort.name.asc\\\" // Will be translated\\n                    sort={{ field: 'name', order: 'ASC' }}\\n                />\\n                <SortMenuItem\\n                    label=\\\"resources.apis.list.sort.name.desc\\\" // Will be translated\\n                    sort={{ field: 'name', order: 'DESC' }}\\n                />\\n            </SortButton>\\n        </TopToolbar>\\n    );\\n};\",\"methods\":[],\"displayName\":\"SortButton\"};if(typeof STORYBOOK_REACT_CLASSES!==\"undefined\"){STORYBOOK_REACT_CLASSES[\"src/ui/SortButton.js\"]={name:\"SortButton\",docgenInfo:SortButton.__docgenInfo,path:\"src/ui/SortButton.js\"};}SortMenuItem.__docgenInfo={\"description\":\"\",\"methods\":[]};if(typeof STORYBOOK_REACT_CLASSES!==\"undefined\"){STORYBOOK_REACT_CLASSES[\"src/ui/SortButton.js\"]={name:\"SortMenuItem\",docgenInfo:SortMenuItem.__docgenInfo,path:\"src/ui/SortButton.js\"};}","map":{"version":3,"sources":["/Users/aricday/Projects/APIHub/packages/layer7-apihub/src/ui/SortButton.js"],"names":["React","useState","Children","cloneElement","useEffect","forwardRef","Button","Menu","MenuItem","ArrowDropDownIcon","SortIcon","makeStyles","shallowEqual","useDispatch","useSelector","changeListParams","useTranslate","useHistory","stringify","SortButton","children","resource","currentSort","currentSortLabel","setCurrentSortLabel","anchorEl","setAnchorEl","translate","dispatch","history","classes","useStyles","listParams","reduxState","admin","resources","list","params","handleClick","event","currentTarget","handleClose","handleMenuItemClick","sortData","push","search","filter","JSON","sort","field","order","childrenAsArray","toArray","length","selectedChild","find","child","props","process","env","NODE_ENV","console","warn","label","root","Boolean","map","onClick","theme","marginLeft","spacing","SortMenuItem","ref","_"],"mappings":"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","sourcesContent":["import React, {\n    useState,\n    Children,\n    cloneElement,\n    useEffect,\n    forwardRef,\n} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport SortIcon from '@material-ui/icons/Sort';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { changeListParams, useTranslate } from 'ra-core';\nimport { useHistory } from 'react-router-dom';\nimport { stringify } from 'query-string';\n\n/**\n * A sort button to use on a list which does not display a datagrid.\n *\n * @param {String} resource The resource on which to apply the sort\n * @param {Object} currentSort The current sort\n * @param {Object} currentSort.field The currently sorted field (eg: \"name\")\n * @param {Object} currentSort.order The current sort order (eg: \"ASC\")\n *\n * @example <caption>Usage inside a custom toolbar for a <List></caption>\n * import { TopToolbar } from 'react-admin';\n *\n * const ApiListActions = ({\n *     currentSort, // injected by react-admin\n *     resource, // injected by react-admin\n *     ...props\n * }) => {\n *     return (\n *         <TopToolbar\n *             className={classnames(classes.root, className)}\n *             {...sanitizeListRestProps(props)}\n *         >\n *             <SortButton resource={resource} currentSort={currentSort}>\n *                 <SortMenuItem\n *                     label=\"resources.apis.list.sort.name.asc\" // Will be translated\n *                     sort={{ field: 'name', order: 'ASC' }}\n *                 />\n *                 <SortMenuItem\n *                     label=\"resources.apis.list.sort.name.desc\" // Will be translated\n *                     sort={{ field: 'name', order: 'DESC' }}\n *                 />\n *             </SortButton>\n *         </TopToolbar>\n *     );\n * };\n */\nexport const SortButton = ({ children, resource, currentSort }) => {\n    const [currentSortLabel, setCurrentSortLabel] = useState();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const translate = useTranslate();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const classes = useStyles();\n\n    const listParams = useSelector(\n        reduxState =>\n            reduxState.admin.resources[resource]\n                ? reduxState.admin.resources[resource].list.params\n                : {},\n        shallowEqual\n    );\n\n    const handleClick = event => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleMenuItemClick = (event, sortData) => {\n        history.push({\n            search: `?${stringify({\n                ...listParams,\n                filter: JSON.stringify(listParams.filter),\n                sort: sortData.sort.field,\n                order: sortData.sort.order,\n            })}`,\n        });\n\n        dispatch(\n            changeListParams(resource, {\n                ...listParams,\n                sort: sortData.sort.field,\n                order: sortData.sort.order,\n            })\n        );\n        handleClose();\n    };\n\n    useEffect(() => {\n        const childrenAsArray = Children.toArray(children);\n\n        if (childrenAsArray.length === 0) {\n            return;\n        }\n\n        let selectedChild = childrenAsArray.find(\n            child =>\n                child.props.sort.field === currentSort.field &&\n                child.props.sort.order === currentSort.order\n        );\n\n        if (!selectedChild) {\n            if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                    'The current sort parameters do not match the provided children'\n                );\n            }\n            selectedChild = childrenAsArray[0];\n        }\n\n        setCurrentSortLabel(translate(selectedChild.props.label));\n    }, [children, currentSort, translate]);\n\n    return currentSortLabel ? (\n        <>\n            <Button\n                aria-controls=\"sort-menu\"\n                aria-label={currentSortLabel}\n                aria-haspopup=\"true\"\n                onClick={handleClick}\n                startIcon={<SortIcon />}\n                endIcon={<ArrowDropDownIcon />}\n                className={classes.root}\n                size=\"small\"\n                color=\"primary\"\n            >\n                {currentSortLabel}\n            </Button>\n            <Menu\n                id=\"sort-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {Children.map(children, child =>\n                    cloneElement(child, {\n                        onClick: handleMenuItemClick,\n                        ...child.props,\n                    })\n                )}\n            </Menu>\n        </>\n    ) : null;\n};\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginLeft: theme.spacing(),\n    },\n}));\n\nexport const SortMenuItem = forwardRef(({ label, sort, onClick }, ref) => {\n    const translate = useTranslate();\n\n    const handleClick = event => {\n        onClick(event, { label, sort });\n    };\n\n    return (\n        <MenuItem ref={ref} onClick={handleClick}>\n            {translate(label, { _: label })}\n        </MenuItem>\n    );\n});\n"]},"metadata":{},"sourceType":"module"}