{"ast":null,"code":"import _extends from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends\";import _slicedToArray from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import{fetchUtils}from'ra-core';var basePath='/document-service/0.1';export var buildDocumentId=function buildDocumentId(entityType,entityUuid,navtitle,locale){// The document API does not follow the usual REST convention\n// To make it work with react admin, we build an ID which will be destructured\n// in the dataProvider\nreturn\"\".concat(entityType,\"/\").concat(entityUuid,\"/\").concat(navtitle,\"/\").concat(locale);};/**\n * Prepare data to create a document\n * Filtered params are: id, uuid, children\n * Conserved params are: type, typeUuid, locale, parentUuid, status, title, navtitle, markdown, ordinal, modifyTs\n */var prepareCreateData=function prepareCreateData(_ref){var id=_ref.id,uuid=_ref.uuid,children=_ref.children,rest=_objectWithoutProperties(_ref,[\"id\",\"uuid\",\"children\"]);return JSON.stringify(rest);};/**\n * Prepare data to update a document\n * Filtered params are: id, children\n * Conserved params are: uuid, type, typeUuid, locale, parentUuid, status, title, navtitle, markdown, ordinal, modifyTs\n */var prepareUpdateData=function prepareUpdateData(_ref2){var id=_ref2.id,children=_ref2.children,rest=_objectWithoutProperties(_ref2,[\"id\",\"children\"]);return JSON.stringify(rest);};export var documentsDataProvider=function documentsDataProvider(baseUrl){return{getList:function getList(_ref3){var filter,entityType,entityUuid,locale,_filter$fetchTree,fetchTree,url,_ref4,json;return _regeneratorRuntime.async(function getList$(_context){while(1){switch(_context.prev=_context.next){case 0:filter=_ref3.filter;entityType=filter.entityType,entityUuid=filter.entityUuid,locale=filter.locale,_filter$fetchTree=filter.fetchTree,fetchTree=_filter$fetchTree===void 0?true:_filter$fetchTree;url=\"\".concat(baseUrl).concat(basePath,\"/\").concat(entityType,\"/\").concat(entityUuid,\"/docs/\").concat(fetchTree?'tree':'',\"?locale=\").concat(locale);_context.next=5;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url,{credentials:'include'}));case 5:_ref4=_context.sent;json=_ref4.json;return _context.abrupt(\"return\",{data:json.map(function(item){return _objectSpread({},item,{id:buildDocumentId(entityType,entityUuid,item.navtitle,locale)});}),total:json.length});case 8:case\"end\":return _context.stop();}}});},getOne:function getOne(_ref5){var id,_id$split,_id$split2,entityType,entityUuid,navtitle,locale,url,_ref6,json;return _regeneratorRuntime.async(function getOne$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:id=_ref5.id;_id$split=id.split('/'),_id$split2=_slicedToArray(_id$split,4),entityType=_id$split2[0],entityUuid=_id$split2[1],navtitle=_id$split2[2],locale=_id$split2[3];url=\"\".concat(baseUrl).concat(basePath,\"/\").concat(entityType,\"/\").concat(entityUuid,\"/docs/\").concat(encodeURIComponent(navtitle),\"?locale=\").concat(locale);_context2.next=5;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url,{credentials:'include'}));case 5:_ref6=_context2.sent;json=_ref6.json;return _context2.abrupt(\"return\",{data:_objectSpread({},json,{id:buildDocumentId(entityType,entityUuid,json.navtitle,json.locale)})});case 8:case\"end\":return _context2.stop();}}});},create:function create(_ref7){var _ref7$data,id,body,_id$split3,_id$split4,entityType,entityUuid,url,_ref8,json;return _regeneratorRuntime.async(function create$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_ref7$data=_ref7.data,id=_ref7$data.id,body=_objectWithoutProperties(_ref7$data,[\"id\"]);_id$split3=id.split('/'),_id$split4=_slicedToArray(_id$split3,2),entityType=_id$split4[0],entityUuid=_id$split4[1];url=\"\".concat(baseUrl).concat(basePath,\"/\").concat(entityType,\"/\").concat(entityUuid,\"/docs\");_context3.next=5;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url,{credentials:'include',method:'POST',body:prepareCreateData(body)}));case 5:_ref8=_context3.sent;json=_ref8.json;return _context3.abrupt(\"return\",{data:_objectSpread({},json,{id:buildDocumentId(entityType,entityUuid,json.navtitle,json.locale)})});case 8:case\"end\":return _context3.stop();}}});},update:function update(_ref9){var _ref9$data,id,body,_id$split5,_id$split6,entityType,entityUuid,navtitle,locale,url,_ref10,json;return _regeneratorRuntime.async(function update$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_ref9$data=_ref9.data,id=_ref9$data.id,body=_objectWithoutProperties(_ref9$data,[\"id\"]);_id$split5=id.split('/'),_id$split6=_slicedToArray(_id$split5,4),entityType=_id$split6[0],entityUuid=_id$split6[1],navtitle=_id$split6[2],locale=_id$split6[3];url=\"\".concat(baseUrl).concat(basePath,\"/\").concat(entityType,\"/\").concat(entityUuid,\"/docs/\").concat(encodeURIComponent(navtitle),\"?locale=\").concat(locale);_context4.next=5;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url,{credentials:'include',method:'PUT',body:prepareUpdateData(body)}));case 5:_ref10=_context4.sent;json=_ref10.json;return _context4.abrupt(\"return\",{data:_objectSpread({},json,{id:buildDocumentId(entityType,entityUuid,json.navtitle,json.locale)})});case 8:case\"end\":return _context4.stop();}}});},updateTree:function updateTree(_ref11){var entityType,entityUuid,locale,data,url,_ref12,json;return _regeneratorRuntime.async(function updateTree$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:entityType=_ref11.entityType,entityUuid=_ref11.entityUuid,locale=_ref11.locale,data=_ref11.data;url=\"\".concat(baseUrl).concat(basePath,\"/\").concat(entityType,\"/\").concat(entityUuid,\"/docs/tree?locale=\").concat(locale);_context5.next=4;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url,{method:'PUT',credentials:'include',body:JSON.stringify(data)}));case 4:_ref12=_context5.sent;json=_ref12.json;return _context5.abrupt(\"return\",{data:json});case 7:case\"end\":return _context5.stop();}}});},\"delete\":function _delete(_ref13){var id,_id$split7,_id$split8,entityType,entityUuid,navtitle,locale,url,_ref14,data;return _regeneratorRuntime.async(function _delete$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:id=_ref13.id;_id$split7=id.split('/'),_id$split8=_slicedToArray(_id$split7,4),entityType=_id$split8[0],entityUuid=_id$split8[1],navtitle=_id$split8[2],locale=_id$split8[3];url=\"\".concat(baseUrl).concat(basePath,\"/\").concat(entityType,\"/\").concat(entityUuid,\"/docs/\").concat(encodeURIComponent(navtitle),\"?locale=\").concat(locale,\"&forceDelete=true\");_context6.next=5;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(url,{credentials:'include',method:'DELETE'}));case 5:_ref14=_context6.sent;data=_extends({},_ref14.json);return _context6.abrupt(\"return\",{data:_objectSpread({},data,{id:buildDocumentId(entityType,entityUuid,data.navtitle,data.locale)})});case 8:case\"end\":return _context6.stop();}}});}};};","map":{"version":3,"sources":["/Users/aricday/Projects/APIHub/packages/layer7-apihub/src/dataProvider/documents.js"],"names":["fetchUtils","basePath","buildDocumentId","entityType","entityUuid","navtitle","locale","prepareCreateData","id","uuid","children","rest","JSON","stringify","prepareUpdateData","documentsDataProvider","baseUrl","getList","filter","fetchTree","url","fetchJson","credentials","json","data","map","item","total","length","getOne","split","encodeURIComponent","create","body","method","update","updateTree"],"mappings":"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","sourcesContent":["import { fetchUtils } from 'ra-core';\n\nconst basePath = '/document-service/0.1';\n\nexport const buildDocumentId = (entityType, entityUuid, navtitle, locale) => {\n    // The document API does not follow the usual REST convention\n    // To make it work with react admin, we build an ID which will be destructured\n    // in the dataProvider\n    return `${entityType}/${entityUuid}/${navtitle}/${locale}`;\n};\n\n/**\n * Prepare data to create a document\n * Filtered params are: id, uuid, children\n * Conserved params are: type, typeUuid, locale, parentUuid, status, title, navtitle, markdown, ordinal, modifyTs\n */\nconst prepareCreateData = ({ id, uuid, children, ...rest }) =>\n    JSON.stringify(rest);\n\n/**\n * Prepare data to update a document\n * Filtered params are: id, children\n * Conserved params are: uuid, type, typeUuid, locale, parentUuid, status, title, navtitle, markdown, ordinal, modifyTs\n */\nconst prepareUpdateData = ({ id, children, ...rest }) => JSON.stringify(rest);\n\nexport const documentsDataProvider = baseUrl => {\n    return {\n        getList: async ({ filter }) => {\n            const { entityType, entityUuid, locale, fetchTree = true } = filter;\n\n            const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/${\n                fetchTree ? 'tree' : ''\n            }?locale=${locale}`;\n\n            const { json } = await fetchUtils.fetchJson(url, {\n                credentials: 'include',\n            });\n\n            return {\n                data: json.map(item => ({\n                    ...item,\n                    id: buildDocumentId(\n                        entityType,\n                        entityUuid,\n                        item.navtitle,\n                        locale\n                    ),\n                })),\n                total: json.length,\n            };\n        },\n        getOne: async ({ id }) => {\n            const [entityType, entityUuid, navtitle, locale] = id.split('/');\n            const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/${encodeURIComponent(\n                navtitle\n            )}?locale=${locale}`;\n\n            const { json } = await fetchUtils.fetchJson(url, {\n                credentials: 'include',\n            });\n\n            return {\n                data: {\n                    ...json,\n                    id: buildDocumentId(\n                        entityType,\n                        entityUuid,\n                        json.navtitle,\n                        json.locale\n                    ),\n                },\n            };\n        },\n        create: async ({ data: { id, ...body } }) => {\n            const [entityType, entityUuid] = id.split('/');\n            const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs`;\n\n            const { json } = await fetchUtils.fetchJson(url, {\n                credentials: 'include',\n                method: 'POST',\n                body: prepareCreateData(body),\n            });\n\n            return {\n                data: {\n                    ...json,\n                    id: buildDocumentId(\n                        entityType,\n                        entityUuid,\n                        json.navtitle,\n                        json.locale\n                    ),\n                },\n            };\n        },\n        update: async ({ data: { id, ...body } }) => {\n            const [entityType, entityUuid, navtitle, locale] = id.split('/');\n            const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/${encodeURIComponent(\n                navtitle\n            )}?locale=${locale}`;\n\n            const { json } = await fetchUtils.fetchJson(url, {\n                credentials: 'include',\n                method: 'PUT',\n                body: prepareUpdateData(body),\n            });\n\n            return {\n                data: {\n                    ...json,\n                    id: buildDocumentId(\n                        entityType,\n                        entityUuid,\n                        json.navtitle,\n                        json.locale\n                    ),\n                },\n            };\n        },\n        updateTree: async ({ entityType, entityUuid, locale, data }) => {\n            const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/tree?locale=${locale}`;\n\n            const { json } = await fetchUtils.fetchJson(url, {\n                method: 'PUT',\n                credentials: 'include',\n                body: JSON.stringify(data),\n            });\n\n            return { data: json };\n        },\n        delete: async ({ id }) => {\n            const [entityType, entityUuid, navtitle, locale] = id.split('/');\n            const url = `${baseUrl}${basePath}/${entityType}/${entityUuid}/docs/${encodeURIComponent(\n                navtitle\n            )}?locale=${locale}&forceDelete=true`;\n\n            const {\n                json: { ...data },\n            } = await fetchUtils.fetchJson(url, {\n                credentials: 'include',\n                method: 'DELETE',\n            });\n\n            return {\n                data: {\n                    ...data,\n                    id: buildDocumentId(\n                        entityType,\n                        entityUuid,\n                        data.navtitle,\n                        data.locale\n                    ),\n                },\n            };\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"module"}