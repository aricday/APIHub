{"ast":null,"code":"import _slicedToArray from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useNotify,useRefresh,useRedirect,useGetOne,useUpdate,useMutation,CRUD_GET_ONE,CRUD_UPDATE}from'ra-core';import merge from'lodash/merge';import{CurrentUserId}from'../dataProvider/userContexts';export var useUserContext=function useUserContext(redirectTo){var notify=useNotify();var refresh=useRefresh();var redirect=useRedirect();// Pass a fake id because we can only access the current user context\nvar _useGetOne=useGetOne('userContexts',CurrentUserId,{action:CRUD_GET_ONE}),userContext=_useGetOne.data;var _useUpdate=useUpdate('userContexts',CurrentUserId),_useUpdate2=_slicedToArray(_useUpdate,1),updateProfile=_useUpdate2[0];var _useMutation=useMutation({type:'updateActiveOrganization',resource:'userContexts'}),_useMutation2=_slicedToArray(_useMutation,1),updateActiveOrganization=_useMutation2[0];var handleChangeUserProfile=function handleChangeUserProfile(newUserContext){updateProfile({payload:{id:CurrentUserId,data:merge(userContext,newUserContext)}},{action:CRUD_UPDATE,onSuccess:function onSuccess(){notify('resources.userContexts.userDetails.notifications.update_success','info');if(redirectTo){redirect(redirectTo);}refresh();},onFailure:function onFailure(){notify('resources.userContexts.userDetails.notifications.update_error','warning');}});};var handleChangeUserActiveOrganization=function handleChangeUserActiveOrganization(newUserContext){updateActiveOrganization({payload:{id:CurrentUserId,data:merge(userContext,newUserContext)}},{action:CRUD_UPDATE,onSuccess:function onSuccess(){notify('resources.userContexts.activeOrgUuid.notifications.update_success','info');// We should perform a redirection before refreshing the view,\n// because the current view may not be accessible for the new organization.\nif(redirectTo){redirect(redirectTo);}refresh();},onFailure:function onFailure(){notify('resources.userContexts.activeOrgUuid.notifications.update_error','warning');}});};return[userContext,handleChangeUserProfile,handleChangeUserActiveOrganization];};","map":{"version":3,"sources":["/Users/aricday/Projects/APIHub/packages/layer7-apihub/src/userContexts/useUserContext.js"],"names":["useNotify","useRefresh","useRedirect","useGetOne","useUpdate","useMutation","CRUD_GET_ONE","CRUD_UPDATE","merge","CurrentUserId","useUserContext","redirectTo","notify","refresh","redirect","action","userContext","data","updateProfile","type","resource","updateActiveOrganization","handleChangeUserProfile","newUserContext","payload","id","onSuccess","onFailure","handleChangeUserActiveOrganization"],"mappings":"qJAAA,OACIA,SADJ,CAEIC,UAFJ,CAGIC,WAHJ,CAIIC,SAJJ,CAKIC,SALJ,CAMIC,WANJ,CAOIC,YAPJ,CAQIC,WARJ,KASO,SATP,CAUA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CAEA,OAASC,aAAT,KAA8B,8BAA9B,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,UAAU,CAAI,CACxC,GAAMC,CAAAA,MAAM,CAAGZ,SAAS,EAAxB,CACA,GAAMa,CAAAA,OAAO,CAAGZ,UAAU,EAA1B,CACA,GAAMa,CAAAA,QAAQ,CAAGZ,WAAW,EAA5B,CAEA;AALwC,eAMVC,SAAS,CAAC,cAAD,CAAiBM,aAAjB,CAAgC,CACnEM,MAAM,CAAET,YAD2D,CAAhC,CANC,CAM1BU,WAN0B,YAMhCC,IANgC,gBAUhBb,SAAS,CAAC,cAAD,CAAiBK,aAAjB,CAVO,0CAUjCS,aAViC,iCAYLb,WAAW,CAAC,CAC3Cc,IAAI,CAAE,0BADqC,CAE3CC,QAAQ,CAAE,cAFiC,CAAD,CAZN,8CAYjCC,wBAZiC,kBAiBxC,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,cAAc,CAAI,CAC9CL,aAAa,CACT,CACIM,OAAO,CAAE,CACLC,EAAE,CAAEhB,aADC,CAELQ,IAAI,CAAET,KAAK,CAACQ,WAAD,CAAcO,cAAd,CAFN,CADb,CADS,CAOT,CACIR,MAAM,CAAER,WADZ,CAEImB,SAAS,CAAE,oBAAM,CACbd,MAAM,CACF,iEADE,CAEF,MAFE,CAAN,CAIA,GAAID,UAAJ,CAAgB,CACZG,QAAQ,CAACH,UAAD,CAAR,CACH,CACDE,OAAO,GACV,CAXL,CAYIc,SAAS,CAAE,oBAAM,CACbf,MAAM,CACF,+DADE,CAEF,SAFE,CAAN,CAIH,CAjBL,CAPS,CAAb,CA2BH,CA5BD,CA8BA,GAAMgB,CAAAA,kCAAkC,CAAG,QAArCA,CAAAA,kCAAqC,CAAAL,cAAc,CAAI,CACzDF,wBAAwB,CACpB,CACIG,OAAO,CAAE,CACLC,EAAE,CAAEhB,aADC,CAELQ,IAAI,CAAET,KAAK,CAACQ,WAAD,CAAcO,cAAd,CAFN,CADb,CADoB,CAOpB,CACIR,MAAM,CAAER,WADZ,CAEImB,SAAS,CAAE,oBAAM,CACbd,MAAM,CACF,mEADE,CAEF,MAFE,CAAN,CAIA;AACA;AACA,GAAID,UAAJ,CAAgB,CACZG,QAAQ,CAACH,UAAD,CAAR,CACH,CACDE,OAAO,GACV,CAbL,CAcIc,SAAS,CAAE,oBAAM,CACbf,MAAM,CACF,iEADE,CAEF,SAFE,CAAN,CAIH,CAnBL,CAPoB,CAAxB,CA6BH,CA9BD,CA+BA,MAAO,CACHI,WADG,CAEHM,uBAFG,CAGHM,kCAHG,CAAP,CAKH,CAnFM","sourcesContent":["import {\n    useNotify,\n    useRefresh,\n    useRedirect,\n    useGetOne,\n    useUpdate,\n    useMutation,\n    CRUD_GET_ONE,\n    CRUD_UPDATE,\n} from 'ra-core';\nimport merge from 'lodash/merge';\n\nimport { CurrentUserId } from '../dataProvider/userContexts';\n\nexport const useUserContext = redirectTo => {\n    const notify = useNotify();\n    const refresh = useRefresh();\n    const redirect = useRedirect();\n\n    // Pass a fake id because we can only access the current user context\n    const { data: userContext } = useGetOne('userContexts', CurrentUserId, {\n        action: CRUD_GET_ONE,\n    });\n\n    const [updateProfile] = useUpdate('userContexts', CurrentUserId);\n\n    const [updateActiveOrganization] = useMutation({\n        type: 'updateActiveOrganization',\n        resource: 'userContexts',\n    });\n\n    const handleChangeUserProfile = newUserContext => {\n        updateProfile(\n            {\n                payload: {\n                    id: CurrentUserId,\n                    data: merge(userContext, newUserContext),\n                },\n            },\n            {\n                action: CRUD_UPDATE,\n                onSuccess: () => {\n                    notify(\n                        'resources.userContexts.userDetails.notifications.update_success',\n                        'info'\n                    );\n                    if (redirectTo) {\n                        redirect(redirectTo);\n                    }\n                    refresh();\n                },\n                onFailure: () => {\n                    notify(\n                        'resources.userContexts.userDetails.notifications.update_error',\n                        'warning'\n                    );\n                },\n            }\n        );\n    };\n\n    const handleChangeUserActiveOrganization = newUserContext => {\n        updateActiveOrganization(\n            {\n                payload: {\n                    id: CurrentUserId,\n                    data: merge(userContext, newUserContext),\n                },\n            },\n            {\n                action: CRUD_UPDATE,\n                onSuccess: () => {\n                    notify(\n                        'resources.userContexts.activeOrgUuid.notifications.update_success',\n                        'info'\n                    );\n                    // We should perform a redirection before refreshing the view,\n                    // because the current view may not be accessible for the new organization.\n                    if (redirectTo) {\n                        redirect(redirectTo);\n                    }\n                    refresh();\n                },\n                onFailure: () => {\n                    notify(\n                        'resources.userContexts.activeOrgUuid.notifications.update_error',\n                        'warning'\n                    );\n                },\n            }\n        );\n    };\n    return [\n        userContext,\n        handleChangeUserProfile,\n        handleChangeUserActiveOrganization,\n    ];\n};\n"]},"metadata":{},"sourceType":"module"}