{"ast":null,"code":"import _regeneratorRuntime from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/aricday/Projects/APIHub/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{fetchUtils}from'ra-core';// Fake id used because we can only access the current user context\nexport var CurrentUserId='layer7@currentUser';export var userContextsDataProvider=function userContextsDataProvider(baseUrl){var basePath=\"\".concat(baseUrl,\"/userContexts\");return{getOne:function getOne(){var _ref,data,userContext;return _regeneratorRuntime.async(function getOne$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(basePath,{credentials:'include'}));case 2:_ref=_context.sent;data=_ref.json;if(!(!data.userContexts||!data.userContexts.length>0)){_context.next=6;break;}throw new Error('Invalid user context');case 6:userContext=data.userContexts[0];return _context.abrupt(\"return\",{data:_objectSpread({},userContext,{id:CurrentUserId})});case 8:case\"end\":return _context.stop();}}});},update:function update(_ref2){var id,data,_data$userDetails,firstName,lastName,email,username,uuid;return _regeneratorRuntime.async(function update$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:id=_ref2.id,data=_ref2.data;// The update method should only be used to update the user details\n_data$userDetails=data.userDetails,firstName=_data$userDetails.firstName,lastName=_data$userDetails.lastName,email=_data$userDetails.email,username=_data$userDetails.username,uuid=_data$userDetails.uuid;_context2.next=4;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(basePath,{credentials:'include',method:'PUT',body:JSON.stringify({firstName:firstName,lastName:lastName,email:email,username:username,uuid:uuid})}));case 4:return _context2.abrupt(\"return\",{data:_objectSpread({id:id},data)});case 5:case\"end\":return _context2.stop();}}});},updateActiveOrganization:function updateActiveOrganization(_ref3){var id,data;return _regeneratorRuntime.async(function updateActiveOrganization$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:id=_ref3.id,data=_ref3.data;_context3.next=3;return _regeneratorRuntime.awrap(fetchUtils.fetchJson(basePath,{credentials:'include',method:'PUT',body:JSON.stringify({orgUuid:data.activeOrgUuid})}));case 3:return _context3.abrupt(\"return\",{data:_objectSpread({id:id},data)});case 4:case\"end\":return _context3.stop();}}});}};};","map":{"version":3,"sources":["/Users/aricday/Projects/APIHub/packages/layer7-apihub/src/dataProvider/userContexts.js"],"names":["fetchUtils","CurrentUserId","userContextsDataProvider","baseUrl","basePath","getOne","fetchJson","credentials","data","json","userContexts","length","Error","userContext","id","update","userDetails","firstName","lastName","email","username","uuid","method","body","JSON","stringify","updateActiveOrganization","orgUuid","activeOrgUuid"],"mappings":"gSAAA,OAASA,UAAT,KAA2B,SAA3B,CAEA;AACA,MAAO,IAAMC,CAAAA,aAAa,CAAG,oBAAtB,CAEP,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAAAC,OAAO,CAAI,CAC/C,GAAMC,CAAAA,QAAQ,WAAMD,OAAN,iBAAd,CAEA,MAAO,CACHE,MAAM,CAAE,6MACyBL,UAAU,CAACM,SAAX,CAAqBF,QAArB,CAA+B,CACxDG,WAAW,CAAE,SAD2C,CAA/B,CADzB,4BACUC,IADV,MACIC,IADJ,MAKA,CAACD,IAAI,CAACE,YAAN,EAAsB,CAACF,IAAI,CAACE,YAAL,CAAkBC,MAAnB,CAA4B,CALlD,+BAMM,IAAIC,CAAAA,KAAJ,CAAU,sBAAV,CANN,QASEC,WATF,CASgBL,IAAI,CAACE,YAAL,CAAkB,CAAlB,CAThB,iCAWG,CACHF,IAAI,kBAAOK,WAAP,EAAoBC,EAAE,CAAEb,aAAxB,EADD,CAXH,gDADL,CAgBHc,MAAM,CAAE,+MAASD,EAAT,OAASA,EAAT,CAAaN,IAAb,OAAaA,IAAb,CACJ;AADI,kBAIAA,IAJA,CAGAQ,WAHA,CAGeC,SAHf,mBAGeA,SAHf,CAG0BC,QAH1B,mBAG0BA,QAH1B,CAGoCC,KAHpC,mBAGoCA,KAHpC,CAG2CC,QAH3C,mBAG2CA,QAH3C,CAGqDC,IAHrD,mBAGqDA,IAHrD,mDAMErB,UAAU,CAACM,SAAX,CAAqBF,QAArB,CAA+B,CACjCG,WAAW,CAAE,SADoB,CAEjCe,MAAM,CAAE,KAFyB,CAGjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBR,SAAS,CAATA,SADiB,CAEjBC,QAAQ,CAARA,QAFiB,CAGjBC,KAAK,CAALA,KAHiB,CAIjBC,QAAQ,CAARA,QAJiB,CAKjBC,IAAI,CAAJA,IALiB,CAAf,CAH2B,CAA/B,CANF,0CAkBG,CACHb,IAAI,gBACAM,EAAE,CAAFA,EADA,EAEGN,IAFH,CADD,CAlBH,iDAhBL,CAyCHkB,wBAAwB,CAAE,0LAASZ,EAAT,OAASA,EAAT,CAAaN,IAAb,OAAaA,IAAb,mDAEhBR,UAAU,CAACM,SAAX,CAAqBF,QAArB,CAA+B,CACjCG,WAAW,CAAE,SADoB,CAEjCe,MAAM,CAAE,KAFyB,CAGjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBE,OAAO,CAAEnB,IAAI,CAACoB,aADG,CAAf,CAH2B,CAA/B,CAFgB,0CAUf,CACHpB,IAAI,gBACAM,EAAE,CAAFA,EADA,EAEGN,IAFH,CADD,CAVe,iDAzCvB,CAAP,CA2DH,CA9DM","sourcesContent":["import { fetchUtils } from 'ra-core';\n\n// Fake id used because we can only access the current user context\nexport const CurrentUserId = 'layer7@currentUser';\n\nexport const userContextsDataProvider = baseUrl => {\n    const basePath = `${baseUrl}/userContexts`;\n\n    return {\n        getOne: async () => {\n            const { json: data } = await fetchUtils.fetchJson(basePath, {\n                credentials: 'include',\n            });\n\n            if (!data.userContexts || !data.userContexts.length > 0) {\n                throw new Error('Invalid user context');\n            }\n\n            const userContext = data.userContexts[0];\n\n            return {\n                data: { ...userContext, id: CurrentUserId },\n            };\n        },\n        update: async ({ id, data }) => {\n            // The update method should only be used to update the user details\n            const {\n                userDetails: { firstName, lastName, email, username, uuid },\n            } = data;\n\n            await fetchUtils.fetchJson(basePath, {\n                credentials: 'include',\n                method: 'PUT',\n                body: JSON.stringify({\n                    firstName,\n                    lastName,\n                    email,\n                    username,\n                    uuid,\n                }),\n            });\n\n            return {\n                data: {\n                    id,\n                    ...data,\n                },\n            };\n        },\n        updateActiveOrganization: async ({ id, data }) => {\n            // The updateActiveOrganization method should only be used to update the user active organization\n            await fetchUtils.fetchJson(basePath, {\n                credentials: 'include',\n                method: 'PUT',\n                body: JSON.stringify({\n                    orgUuid: data.activeOrgUuid,\n                }),\n            });\n\n            return {\n                data: {\n                    id,\n                    ...data,\n                },\n            };\n        },\n    };\n};\n"]},"metadata":{},"sourceType":"module"}